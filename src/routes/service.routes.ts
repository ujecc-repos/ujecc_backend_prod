import express from 'express';
import { prisma } from '../utils/client';

const router = express.Router()

/**
 * ‚ûï Cr√©er un √©v√©nement
 */
router.post("/", async (req, res) => {
  const { nom, churchId } = req.body;
  console.log(nom, churchId)
  try {
    const services = await prisma.service.create({
      data: { nom, churchId },
    });
    res.json(services);    
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Impossible de cr√©er l'√©v√©nement" });
  }
});

/**
 * üìã Lire tous les √©v√©nements
 */
router.get("/", async (req, res) => {
  try {
    const services = await prisma.service.findMany({
      orderBy: { createdAt: "desc" },
    });
    res.json(services);
  } catch (err) {
    res.status(500).json({ error: "Impossible de r√©cup√©rer les √©v√©nements" });
  }
});

/**
 * üîç Lire un √©v√©nement par ID
 */
router.get("//:id", async (req, res) => {
  const { id } = req.params;
  try {
    const evenement = await prisma.service.findUnique({
      where: { id },
    });
    if (!evenement) {
      return res.status(404).json({ error: "√âv√©nement introuvable" });
    }
    res.json(evenement);
  } catch (err) {
    res.status(500).json({ error: "Impossible de r√©cup√©rer l'√©v√©nement" });
  }
});

/**
 * ‚úèÔ∏è Mettre √† jour un √©v√©nement
 */
router.put("//:id", async (req, res) => {
  const { id } = req.params;
  const { nom } = req.body;

  try {
    const service = await prisma.service.update({
      where: { id },
      data: { nom },
    });
    res.json(service);
  } catch (err) {
    res.status(500).json({ error: "Impossible de mettre √† jour l'√©v√©nement" });
  }
});

/**
 * üóëÔ∏è Supprimer un √©v√©nement
 */
router.delete("/:id", async (req, res) => {
  const { id } = req.params;

  try {
    await prisma.service.delete({
      where: { id },
    });
    res.json({ message: "√âv√©nement supprim√© avec succ√®s" });
  } catch (err) {
    res.status(500).json({ error: "Impossible de supprimer l'√©v√©nement" });
  }
});

/**
 * üèõÔ∏è Lire tous les services par √©glise
 */
router.get("/church/:churchId", async (req, res) => {
  const { churchId } = req.params;
  try {
    const services = await prisma.service.findMany({
      where: { churchId },
      orderBy: { createdAt: "desc" },
    });
    res.json(services);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Impossible de r√©cup√©rer les services de l'√©glise" });
  }
});

export default router
