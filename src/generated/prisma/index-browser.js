
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  churchId: 'churchId'
};

exports.Prisma.PresenceScalarFieldEnum = {
  id: 'id',
  statut: 'statut',
  utilisateurId: 'utilisateurId',
  serviceId: 'serviceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TtiScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  country: 'country',
  departement: 'departement',
  commune: 'commune',
  sectionCommunale: 'sectionCommunale',
  telephone: 'telephone',
  rue: 'rue'
};

exports.Prisma.ChurchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  quantity: 'quantity',
  address: 'address',
  picture: 'picture',
  longitude: 'longitude',
  latitude: 'latitude',
  phone: 'phone',
  anthem: 'anthem',
  facebook: 'facebook',
  instagram: 'instagram',
  whatsapp: 'whatsapp',
  email: 'email',
  mainPasteur: 'mainPasteur',
  missionId: 'missionId',
  addressId: 'addressId',
  ttiId: 'ttiId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  joinDate: 'joinDate',
  email: 'email',
  firstname: 'firstname',
  lastname: 'lastname',
  nif: 'nif',
  groupeSanguin: 'groupeSanguin',
  personToContact: 'personToContact',
  spouseFullName: 'spouseFullName',
  password: 'password',
  membreActif: 'membreActif',
  longitude: 'longitude',
  latitude: 'latitude',
  plainPassword: 'plainPassword',
  age: 'age',
  minister: 'minister',
  mobilePhone: 'mobilePhone',
  homePhone: 'homePhone',
  picture: 'picture',
  city: 'city',
  etatCivil: 'etatCivil',
  country: 'country',
  birthCountry: 'birthCountry',
  birthCity: 'birthCity',
  birthDate: 'birthDate',
  sex: 'sex',
  addressLine: 'addressLine',
  envelopeNumber: 'envelopeNumber',
  baptismLocation: 'baptismLocation',
  baptismDate: 'baptismDate',
  istimothee: 'istimothee',
  role: 'role',
  churchRole: 'churchRole',
  facebook: 'facebook',
  instagram: 'instagram',
  profession: 'profession',
  sundayClass: 'sundayClass',
  timotheeId: 'timotheeId',
  churchId: 'churchId'
};

exports.Prisma.GroupeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  minister: 'minister',
  description: 'description',
  picture: 'picture',
  showToMembers: 'showToMembers',
  showToNonMembers: 'showToNonMembers',
  showMembers: 'showMembers',
  showLeaders: 'showLeaders',
  meetingDays: 'meetingDays',
  meetingTime: 'meetingTime',
  meetingLocation: 'meetingLocation',
  meetingFrequency: 'meetingFrequency',
  ageGroup: 'ageGroup',
  maxMembers: 'maxMembers',
  churchId: 'churchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  location: 'location',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  startPeriode: 'startPeriode',
  endPeriode: 'endPeriode',
  createAt: 'createAt',
  isRecurring: 'isRecurring',
  updateAt: 'updateAt',
  churchId: 'churchId'
};

exports.Prisma.MariageScalarFieldEnum = {
  id: 'id',
  brideFullname: 'brideFullname',
  birthDate: 'birthDate',
  groomFullname: 'groomFullname',
  goomBirthDate: 'goomBirthDate',
  weddingDate: 'weddingDate',
  witnessSignature: 'witnessSignature',
  civilStateStateOfficer: 'civilStateStateOfficer',
  weddingLocation: 'weddingLocation',
  civilStateOfficer: 'civilStateOfficer',
  witness: 'witness',
  grooomCertificate: 'grooomCertificate',
  brideCertificate: 'brideCertificate',
  weddingCertificate: 'weddingCertificate',
  officiantName: 'officiantName',
  churchId: 'churchId'
};

exports.Prisma.FuneralScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  birthDate: 'birthDate',
  funeralDate: 'funeralDate',
  funeralTime: 'funeralTime',
  relationShip: 'relationShip',
  telephone: 'telephone',
  email: 'email',
  deathCertificate: 'deathCertificate',
  nextOfKin: 'nextOfKin',
  officiantName: 'officiantName',
  description: 'description',
  funeralLocation: 'funeralLocation',
  status: 'status',
  churchId: 'churchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PresentationScalarFieldEnum = {
  id: 'id',
  childName: 'childName',
  dateOfBirth: 'dateOfBirth',
  placeOfBirth: 'placeOfBirth',
  birthCertificate: 'birthCertificate',
  fatherName: 'fatherName',
  motherName: 'motherName',
  phone: 'phone',
  address: 'address',
  presentationDate: 'presentationDate',
  officiantName: 'officiantName',
  witness: 'witness',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.BaptismScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  birthDate: 'birthDate',
  placeOfBirth: 'placeOfBirth',
  baptismDate: 'baptismDate',
  baptismLocation: 'baptismLocation',
  baptismCertificate: 'baptismCertificate',
  officiantName: 'officiantName',
  startDate: 'startDate',
  endDate: 'endDate',
  withness: 'withness',
  conversionDate: 'conversionDate',
  previousChurch: 'previousChurch',
  status: 'status',
  testimony: 'testimony',
  churchId: 'churchId'
};

exports.Prisma.DeathScalarFieldEnum = {
  id: 'id',
  deathDate: 'deathDate',
  deathPlace: 'deathPlace',
  deathTime: 'deathTime',
  deathCause: 'deathCause',
  deathCertificate: 'deathCertificate',
  serviceDate: 'serviceDate',
  location: 'location',
  nextOfKin: 'nextOfKin',
  relationShip: 'relationShip',
  officiantName: 'officiantName',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.SundayClassScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  teacher: 'teacher',
  ageGroup: 'ageGroup',
  startTime: 'startTime',
  book: 'book',
  endTime: 'endTime',
  maxStudents: 'maxStudents',
  description: 'description',
  churchId: 'churchId',
  createdAt: 'createdAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  category: 'category',
  date: 'date',
  paymentMethod: 'paymentMethod',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.OfferingScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  date: 'date',
  status: 'status',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.TithingScalarFieldEnum = {
  id: 'id',
  contributorName: 'contributorName',
  amount: 'amount',
  date: 'date',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  contributorName: 'contributorName',
  amount: 'amount',
  date: 'date',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.MoissonScalarFieldEnum = {
  id: 'id',
  contributorName: 'contributorName',
  amount: 'amount',
  date: 'date',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.ComiteeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  meetingDay: 'meetingDay',
  meetingTime: 'meetingTime',
  churchId: 'churchId'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  visibility: 'visibility',
  description: 'description',
  date: 'date',
  time: 'time',
  duration: 'duration',
  notes: 'notes',
  churchId: 'churchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransfertScalarFieldEnum = {
  id: 'id',
  fromChurchId: 'fromChurchId',
  userId: 'userId',
  toChurchId: 'toChurchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MissionScalarFieldEnum = {
  id: 'id',
  missionName: 'missionName',
  description: 'description',
  presidentName: 'presidentName',
  status: 'status',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SanctionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  churchId: 'churchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MinistryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  churchId: 'churchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasteurScalarFieldEnum = {
  id: 'id',
  pasteurName: 'pasteurName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  status: 'status',
  churchId: 'churchId'
};

exports.Prisma.DepartementScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CommuneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  departementId: 'departementId'
};

exports.Prisma.SectionCommunaleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  communeId: 'communeId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom',
  churchId: 'churchId'
};

exports.Prisma.PresenceOrderByRelevanceFieldEnum = {
  id: 'id',
  utilisateurId: 'utilisateurId',
  serviceId: 'serviceId'
};

exports.Prisma.TtiOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  id: 'id',
  country: 'country',
  departement: 'departement',
  commune: 'commune',
  sectionCommunale: 'sectionCommunale',
  telephone: 'telephone',
  rue: 'rue'
};

exports.Prisma.ChurchOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  quantity: 'quantity',
  address: 'address',
  picture: 'picture',
  longitude: 'longitude',
  latitude: 'latitude',
  phone: 'phone',
  anthem: 'anthem',
  facebook: 'facebook',
  instagram: 'instagram',
  whatsapp: 'whatsapp',
  email: 'email',
  mainPasteur: 'mainPasteur',
  missionId: 'missionId',
  addressId: 'addressId',
  ttiId: 'ttiId'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  joinDate: 'joinDate',
  email: 'email',
  firstname: 'firstname',
  lastname: 'lastname',
  nif: 'nif',
  groupeSanguin: 'groupeSanguin',
  personToContact: 'personToContact',
  spouseFullName: 'spouseFullName',
  password: 'password',
  longitude: 'longitude',
  latitude: 'latitude',
  plainPassword: 'plainPassword',
  age: 'age',
  minister: 'minister',
  mobilePhone: 'mobilePhone',
  homePhone: 'homePhone',
  picture: 'picture',
  city: 'city',
  etatCivil: 'etatCivil',
  country: 'country',
  birthCountry: 'birthCountry',
  birthCity: 'birthCity',
  birthDate: 'birthDate',
  sex: 'sex',
  addressLine: 'addressLine',
  envelopeNumber: 'envelopeNumber',
  baptismLocation: 'baptismLocation',
  baptismDate: 'baptismDate',
  churchRole: 'churchRole',
  facebook: 'facebook',
  instagram: 'instagram',
  profession: 'profession',
  sundayClass: 'sundayClass',
  timotheeId: 'timotheeId',
  churchId: 'churchId'
};

exports.Prisma.GroupeOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  minister: 'minister',
  description: 'description',
  picture: 'picture',
  meetingDays: 'meetingDays',
  meetingTime: 'meetingTime',
  meetingLocation: 'meetingLocation',
  meetingFrequency: 'meetingFrequency',
  ageGroup: 'ageGroup',
  maxMembers: 'maxMembers',
  churchId: 'churchId'
};

exports.Prisma.EventOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  location: 'location',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  startPeriode: 'startPeriode',
  endPeriode: 'endPeriode',
  churchId: 'churchId'
};

exports.Prisma.MariageOrderByRelevanceFieldEnum = {
  id: 'id',
  brideFullname: 'brideFullname',
  groomFullname: 'groomFullname',
  witnessSignature: 'witnessSignature',
  civilStateStateOfficer: 'civilStateStateOfficer',
  weddingLocation: 'weddingLocation',
  civilStateOfficer: 'civilStateOfficer',
  witness: 'witness',
  grooomCertificate: 'grooomCertificate',
  brideCertificate: 'brideCertificate',
  weddingCertificate: 'weddingCertificate',
  officiantName: 'officiantName',
  churchId: 'churchId'
};

exports.Prisma.FuneralOrderByRelevanceFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  funeralTime: 'funeralTime',
  relationShip: 'relationShip',
  telephone: 'telephone',
  email: 'email',
  deathCertificate: 'deathCertificate',
  nextOfKin: 'nextOfKin',
  officiantName: 'officiantName',
  description: 'description',
  funeralLocation: 'funeralLocation',
  status: 'status',
  churchId: 'churchId'
};

exports.Prisma.PresentationOrderByRelevanceFieldEnum = {
  id: 'id',
  childName: 'childName',
  placeOfBirth: 'placeOfBirth',
  birthCertificate: 'birthCertificate',
  fatherName: 'fatherName',
  motherName: 'motherName',
  phone: 'phone',
  address: 'address',
  officiantName: 'officiantName',
  witness: 'witness',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.BaptismOrderByRelevanceFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  placeOfBirth: 'placeOfBirth',
  baptismLocation: 'baptismLocation',
  baptismCertificate: 'baptismCertificate',
  officiantName: 'officiantName',
  startDate: 'startDate',
  endDate: 'endDate',
  withness: 'withness',
  previousChurch: 'previousChurch',
  status: 'status',
  testimony: 'testimony',
  churchId: 'churchId'
};

exports.Prisma.deathOrderByRelevanceFieldEnum = {
  id: 'id',
  deathPlace: 'deathPlace',
  deathTime: 'deathTime',
  deathCause: 'deathCause',
  deathCertificate: 'deathCertificate',
  location: 'location',
  nextOfKin: 'nextOfKin',
  relationShip: 'relationShip',
  officiantName: 'officiantName',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.sundayClassOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom',
  teacher: 'teacher',
  ageGroup: 'ageGroup',
  startTime: 'startTime',
  book: 'book',
  endTime: 'endTime',
  maxStudents: 'maxStudents',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.expenseOrderByRelevanceFieldEnum = {
  id: 'id',
  category: 'category',
  paymentMethod: 'paymentMethod',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.offeringOrderByRelevanceFieldEnum = {
  id: 'id',
  status: 'status',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.tithingOrderByRelevanceFieldEnum = {
  id: 'id',
  contributorName: 'contributorName',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.donationOrderByRelevanceFieldEnum = {
  id: 'id',
  contributorName: 'contributorName',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.moissonOrderByRelevanceFieldEnum = {
  id: 'id',
  contributorName: 'contributorName',
  paymentMethod: 'paymentMethod',
  note: 'note',
  churchId: 'churchId'
};

exports.Prisma.comiteeOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  meetingDay: 'meetingDay',
  meetingTime: 'meetingTime',
  churchId: 'churchId'
};

exports.Prisma.appointmentOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  visibility: 'visibility',
  description: 'description',
  time: 'time',
  duration: 'duration',
  notes: 'notes',
  churchId: 'churchId'
};

exports.Prisma.transfertOrderByRelevanceFieldEnum = {
  id: 'id',
  fromChurchId: 'fromChurchId',
  userId: 'userId',
  toChurchId: 'toChurchId'
};

exports.Prisma.MissionOrderByRelevanceFieldEnum = {
  id: 'id',
  missionName: 'missionName',
  description: 'description',
  presidentName: 'presidentName',
  status: 'status',
  location: 'location'
};

exports.Prisma.sanctionOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  churchId: 'churchId'
};

exports.Prisma.ministryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  churchId: 'churchId'
};

exports.Prisma.pasteurOrderByRelevanceFieldEnum = {
  id: 'id',
  pasteurName: 'pasteurName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  status: 'status',
  churchId: 'churchId'
};

exports.Prisma.DepartementOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CommuneOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  departementId: 'departementId'
};

exports.Prisma.SectionCommunaleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  communeId: 'communeId'
};
exports.StatutPresence = exports.$Enums.StatutPresence = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  EN_RETARD: 'EN_RETARD',
  MOTIVE: 'MOTIVE'
};

exports.Role = exports.$Enums.Role = {
  Admin: 'Admin',
  Membre: 'Membre',
  SuperAdmin: 'SuperAdmin',
  Directeur: 'Directeur'
};

exports.Prisma.ModelName = {
  Service: 'Service',
  Presence: 'Presence',
  Tti: 'Tti',
  Address: 'Address',
  Church: 'Church',
  User: 'User',
  Groupe: 'Groupe',
  Event: 'Event',
  Mariage: 'Mariage',
  Funeral: 'Funeral',
  Presentation: 'Presentation',
  Baptism: 'Baptism',
  death: 'death',
  sundayClass: 'sundayClass',
  expense: 'expense',
  offering: 'offering',
  tithing: 'tithing',
  donation: 'donation',
  moisson: 'moisson',
  comitee: 'comitee',
  appointment: 'appointment',
  transfert: 'transfert',
  Mission: 'Mission',
  sanction: 'sanction',
  ministry: 'ministry',
  pasteur: 'pasteur',
  Departement: 'Departement',
  Commune: 'Commune',
  SectionCommunale: 'SectionCommunale'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
