
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model Presence
 * 
 */
export type Presence = $Result.DefaultSelection<Prisma.$PresencePayload>
/**
 * Model Tti
 * 
 */
export type Tti = $Result.DefaultSelection<Prisma.$TtiPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Church
 * 
 */
export type Church = $Result.DefaultSelection<Prisma.$ChurchPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Groupe
 * 
 */
export type Groupe = $Result.DefaultSelection<Prisma.$GroupePayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Mariage
 * 
 */
export type Mariage = $Result.DefaultSelection<Prisma.$MariagePayload>
/**
 * Model Funeral
 * 
 */
export type Funeral = $Result.DefaultSelection<Prisma.$FuneralPayload>
/**
 * Model Presentation
 * 
 */
export type Presentation = $Result.DefaultSelection<Prisma.$PresentationPayload>
/**
 * Model Baptism
 * 
 */
export type Baptism = $Result.DefaultSelection<Prisma.$BaptismPayload>
/**
 * Model death
 * 
 */
export type death = $Result.DefaultSelection<Prisma.$deathPayload>
/**
 * Model sundayClass
 * 
 */
export type sundayClass = $Result.DefaultSelection<Prisma.$sundayClassPayload>
/**
 * Model expense
 * 
 */
export type expense = $Result.DefaultSelection<Prisma.$expensePayload>
/**
 * Model offering
 * 
 */
export type offering = $Result.DefaultSelection<Prisma.$offeringPayload>
/**
 * Model tithing
 * 
 */
export type tithing = $Result.DefaultSelection<Prisma.$tithingPayload>
/**
 * Model donation
 * 
 */
export type donation = $Result.DefaultSelection<Prisma.$donationPayload>
/**
 * Model moisson
 * 
 */
export type moisson = $Result.DefaultSelection<Prisma.$moissonPayload>
/**
 * Model comitee
 * 
 */
export type comitee = $Result.DefaultSelection<Prisma.$comiteePayload>
/**
 * Model appointment
 * 
 */
export type appointment = $Result.DefaultSelection<Prisma.$appointmentPayload>
/**
 * Model transfert
 * 
 */
export type transfert = $Result.DefaultSelection<Prisma.$transfertPayload>
/**
 * Model Mission
 * 
 */
export type Mission = $Result.DefaultSelection<Prisma.$MissionPayload>
/**
 * Model sanction
 * 
 */
export type sanction = $Result.DefaultSelection<Prisma.$sanctionPayload>
/**
 * Model ministry
 * 
 */
export type ministry = $Result.DefaultSelection<Prisma.$ministryPayload>
/**
 * Model pasteur
 * 
 */
export type pasteur = $Result.DefaultSelection<Prisma.$pasteurPayload>
/**
 * Model Departement
 * 
 */
export type Departement = $Result.DefaultSelection<Prisma.$DepartementPayload>
/**
 * Model Commune
 * 
 */
export type Commune = $Result.DefaultSelection<Prisma.$CommunePayload>
/**
 * Model SectionCommunale
 * 
 */
export type SectionCommunale = $Result.DefaultSelection<Prisma.$SectionCommunalePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  Admin: 'Admin',
  Membre: 'Membre',
  SuperAdmin: 'SuperAdmin',
  Directeur: 'Directeur',
  Invite: 'Invite'
};

export type Role = (typeof Role)[keyof typeof Role]


export const StatutPresence: {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  EN_RETARD: 'EN_RETARD',
  MOTIVE: 'MOTIVE'
};

export type StatutPresence = (typeof StatutPresence)[keyof typeof StatutPresence]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type StatutPresence = $Enums.StatutPresence

export const StatutPresence: typeof $Enums.StatutPresence

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Services
 * const services = await prisma.service.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Services
   * const services = await prisma.service.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presence`: Exposes CRUD operations for the **Presence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presences
    * const presences = await prisma.presence.findMany()
    * ```
    */
  get presence(): Prisma.PresenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tti`: Exposes CRUD operations for the **Tti** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ttis
    * const ttis = await prisma.tti.findMany()
    * ```
    */
  get tti(): Prisma.TtiDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.church`: Exposes CRUD operations for the **Church** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Churches
    * const churches = await prisma.church.findMany()
    * ```
    */
  get church(): Prisma.ChurchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupe`: Exposes CRUD operations for the **Groupe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groupes
    * const groupes = await prisma.groupe.findMany()
    * ```
    */
  get groupe(): Prisma.GroupeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mariage`: Exposes CRUD operations for the **Mariage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mariages
    * const mariages = await prisma.mariage.findMany()
    * ```
    */
  get mariage(): Prisma.MariageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.funeral`: Exposes CRUD operations for the **Funeral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funerals
    * const funerals = await prisma.funeral.findMany()
    * ```
    */
  get funeral(): Prisma.FuneralDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presentation`: Exposes CRUD operations for the **Presentation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presentations
    * const presentations = await prisma.presentation.findMany()
    * ```
    */
  get presentation(): Prisma.PresentationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.baptism`: Exposes CRUD operations for the **Baptism** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baptisms
    * const baptisms = await prisma.baptism.findMany()
    * ```
    */
  get baptism(): Prisma.BaptismDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.death`: Exposes CRUD operations for the **death** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deaths
    * const deaths = await prisma.death.findMany()
    * ```
    */
  get death(): Prisma.deathDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sundayClass`: Exposes CRUD operations for the **sundayClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SundayClasses
    * const sundayClasses = await prisma.sundayClass.findMany()
    * ```
    */
  get sundayClass(): Prisma.sundayClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expense`: Exposes CRUD operations for the **expense** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expense.findMany()
    * ```
    */
  get expense(): Prisma.expenseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.offering`: Exposes CRUD operations for the **offering** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offerings
    * const offerings = await prisma.offering.findMany()
    * ```
    */
  get offering(): Prisma.offeringDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tithing`: Exposes CRUD operations for the **tithing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tithings
    * const tithings = await prisma.tithing.findMany()
    * ```
    */
  get tithing(): Prisma.tithingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.donation`: Exposes CRUD operations for the **donation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Donations
    * const donations = await prisma.donation.findMany()
    * ```
    */
  get donation(): Prisma.donationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.moisson`: Exposes CRUD operations for the **moisson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Moissons
    * const moissons = await prisma.moisson.findMany()
    * ```
    */
  get moisson(): Prisma.moissonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comitee`: Exposes CRUD operations for the **comitee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comitees
    * const comitees = await prisma.comitee.findMany()
    * ```
    */
  get comitee(): Prisma.comiteeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.appointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transfert`: Exposes CRUD operations for the **transfert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transferts
    * const transferts = await prisma.transfert.findMany()
    * ```
    */
  get transfert(): Prisma.transfertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mission`: Exposes CRUD operations for the **Mission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Missions
    * const missions = await prisma.mission.findMany()
    * ```
    */
  get mission(): Prisma.MissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sanction`: Exposes CRUD operations for the **sanction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sanctions
    * const sanctions = await prisma.sanction.findMany()
    * ```
    */
  get sanction(): Prisma.sanctionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministry`: Exposes CRUD operations for the **ministry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ministries
    * const ministries = await prisma.ministry.findMany()
    * ```
    */
  get ministry(): Prisma.ministryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pasteur`: Exposes CRUD operations for the **pasteur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pasteurs
    * const pasteurs = await prisma.pasteur.findMany()
    * ```
    */
  get pasteur(): Prisma.pasteurDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departement`: Exposes CRUD operations for the **Departement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departements
    * const departements = await prisma.departement.findMany()
    * ```
    */
  get departement(): Prisma.DepartementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commune`: Exposes CRUD operations for the **Commune** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communes
    * const communes = await prisma.commune.findMany()
    * ```
    */
  get commune(): Prisma.CommuneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sectionCommunale`: Exposes CRUD operations for the **SectionCommunale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SectionCommunales
    * const sectionCommunales = await prisma.sectionCommunale.findMany()
    * ```
    */
  get sectionCommunale(): Prisma.SectionCommunaleDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Service: 'Service',
    Presence: 'Presence',
    Tti: 'Tti',
    Address: 'Address',
    Church: 'Church',
    User: 'User',
    Groupe: 'Groupe',
    Event: 'Event',
    Mariage: 'Mariage',
    Funeral: 'Funeral',
    Presentation: 'Presentation',
    Baptism: 'Baptism',
    death: 'death',
    sundayClass: 'sundayClass',
    expense: 'expense',
    offering: 'offering',
    tithing: 'tithing',
    donation: 'donation',
    moisson: 'moisson',
    comitee: 'comitee',
    appointment: 'appointment',
    transfert: 'transfert',
    Mission: 'Mission',
    sanction: 'sanction',
    ministry: 'ministry',
    pasteur: 'pasteur',
    Departement: 'Departement',
    Commune: 'Commune',
    SectionCommunale: 'SectionCommunale'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "service" | "presence" | "tti" | "address" | "church" | "user" | "groupe" | "event" | "mariage" | "funeral" | "presentation" | "baptism" | "death" | "sundayClass" | "expense" | "offering" | "tithing" | "donation" | "moisson" | "comitee" | "appointment" | "transfert" | "mission" | "sanction" | "ministry" | "pasteur" | "departement" | "commune" | "sectionCommunale"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      Presence: {
        payload: Prisma.$PresencePayload<ExtArgs>
        fields: Prisma.PresenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          findFirst: {
            args: Prisma.PresenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          findMany: {
            args: Prisma.PresenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>[]
          }
          create: {
            args: Prisma.PresenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          createMany: {
            args: Prisma.PresenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PresenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          update: {
            args: Prisma.PresenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          deleteMany: {
            args: Prisma.PresenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PresenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          aggregate: {
            args: Prisma.PresenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresence>
          }
          groupBy: {
            args: Prisma.PresenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresenceCountArgs<ExtArgs>
            result: $Utils.Optional<PresenceCountAggregateOutputType> | number
          }
        }
      }
      Tti: {
        payload: Prisma.$TtiPayload<ExtArgs>
        fields: Prisma.TtiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TtiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TtiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload>
          }
          findFirst: {
            args: Prisma.TtiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TtiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload>
          }
          findMany: {
            args: Prisma.TtiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload>[]
          }
          create: {
            args: Prisma.TtiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload>
          }
          createMany: {
            args: Prisma.TtiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TtiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload>
          }
          update: {
            args: Prisma.TtiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload>
          }
          deleteMany: {
            args: Prisma.TtiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TtiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TtiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TtiPayload>
          }
          aggregate: {
            args: Prisma.TtiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTti>
          }
          groupBy: {
            args: Prisma.TtiGroupByArgs<ExtArgs>
            result: $Utils.Optional<TtiGroupByOutputType>[]
          }
          count: {
            args: Prisma.TtiCountArgs<ExtArgs>
            result: $Utils.Optional<TtiCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Church: {
        payload: Prisma.$ChurchPayload<ExtArgs>
        fields: Prisma.ChurchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          findFirst: {
            args: Prisma.ChurchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          findMany: {
            args: Prisma.ChurchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>[]
          }
          create: {
            args: Prisma.ChurchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          createMany: {
            args: Prisma.ChurchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChurchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          update: {
            args: Prisma.ChurchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          deleteMany: {
            args: Prisma.ChurchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChurchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          aggregate: {
            args: Prisma.ChurchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurch>
          }
          groupBy: {
            args: Prisma.ChurchGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Groupe: {
        payload: Prisma.$GroupePayload<ExtArgs>
        fields: Prisma.GroupeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload>
          }
          findFirst: {
            args: Prisma.GroupeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload>
          }
          findMany: {
            args: Prisma.GroupeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload>[]
          }
          create: {
            args: Prisma.GroupeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload>
          }
          createMany: {
            args: Prisma.GroupeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GroupeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload>
          }
          update: {
            args: Prisma.GroupeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload>
          }
          deleteMany: {
            args: Prisma.GroupeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GroupeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupePayload>
          }
          aggregate: {
            args: Prisma.GroupeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupe>
          }
          groupBy: {
            args: Prisma.GroupeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupeCountArgs<ExtArgs>
            result: $Utils.Optional<GroupeCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Mariage: {
        payload: Prisma.$MariagePayload<ExtArgs>
        fields: Prisma.MariageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MariageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MariageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload>
          }
          findFirst: {
            args: Prisma.MariageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MariageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload>
          }
          findMany: {
            args: Prisma.MariageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload>[]
          }
          create: {
            args: Prisma.MariageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload>
          }
          createMany: {
            args: Prisma.MariageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MariageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload>
          }
          update: {
            args: Prisma.MariageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload>
          }
          deleteMany: {
            args: Prisma.MariageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MariageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MariageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MariagePayload>
          }
          aggregate: {
            args: Prisma.MariageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMariage>
          }
          groupBy: {
            args: Prisma.MariageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MariageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MariageCountArgs<ExtArgs>
            result: $Utils.Optional<MariageCountAggregateOutputType> | number
          }
        }
      }
      Funeral: {
        payload: Prisma.$FuneralPayload<ExtArgs>
        fields: Prisma.FuneralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FuneralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FuneralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload>
          }
          findFirst: {
            args: Prisma.FuneralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FuneralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload>
          }
          findMany: {
            args: Prisma.FuneralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload>[]
          }
          create: {
            args: Prisma.FuneralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload>
          }
          createMany: {
            args: Prisma.FuneralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FuneralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload>
          }
          update: {
            args: Prisma.FuneralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload>
          }
          deleteMany: {
            args: Prisma.FuneralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FuneralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FuneralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuneralPayload>
          }
          aggregate: {
            args: Prisma.FuneralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFuneral>
          }
          groupBy: {
            args: Prisma.FuneralGroupByArgs<ExtArgs>
            result: $Utils.Optional<FuneralGroupByOutputType>[]
          }
          count: {
            args: Prisma.FuneralCountArgs<ExtArgs>
            result: $Utils.Optional<FuneralCountAggregateOutputType> | number
          }
        }
      }
      Presentation: {
        payload: Prisma.$PresentationPayload<ExtArgs>
        fields: Prisma.PresentationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresentationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresentationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          findFirst: {
            args: Prisma.PresentationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresentationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          findMany: {
            args: Prisma.PresentationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>[]
          }
          create: {
            args: Prisma.PresentationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          createMany: {
            args: Prisma.PresentationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PresentationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          update: {
            args: Prisma.PresentationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          deleteMany: {
            args: Prisma.PresentationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresentationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PresentationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresentationPayload>
          }
          aggregate: {
            args: Prisma.PresentationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresentation>
          }
          groupBy: {
            args: Prisma.PresentationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresentationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresentationCountArgs<ExtArgs>
            result: $Utils.Optional<PresentationCountAggregateOutputType> | number
          }
        }
      }
      Baptism: {
        payload: Prisma.$BaptismPayload<ExtArgs>
        fields: Prisma.BaptismFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BaptismFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BaptismFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload>
          }
          findFirst: {
            args: Prisma.BaptismFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BaptismFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload>
          }
          findMany: {
            args: Prisma.BaptismFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload>[]
          }
          create: {
            args: Prisma.BaptismCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload>
          }
          createMany: {
            args: Prisma.BaptismCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BaptismDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload>
          }
          update: {
            args: Prisma.BaptismUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload>
          }
          deleteMany: {
            args: Prisma.BaptismDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BaptismUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BaptismUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaptismPayload>
          }
          aggregate: {
            args: Prisma.BaptismAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBaptism>
          }
          groupBy: {
            args: Prisma.BaptismGroupByArgs<ExtArgs>
            result: $Utils.Optional<BaptismGroupByOutputType>[]
          }
          count: {
            args: Prisma.BaptismCountArgs<ExtArgs>
            result: $Utils.Optional<BaptismCountAggregateOutputType> | number
          }
        }
      }
      death: {
        payload: Prisma.$deathPayload<ExtArgs>
        fields: Prisma.deathFieldRefs
        operations: {
          findUnique: {
            args: Prisma.deathFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.deathFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload>
          }
          findFirst: {
            args: Prisma.deathFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.deathFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload>
          }
          findMany: {
            args: Prisma.deathFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload>[]
          }
          create: {
            args: Prisma.deathCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload>
          }
          createMany: {
            args: Prisma.deathCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.deathDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload>
          }
          update: {
            args: Prisma.deathUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload>
          }
          deleteMany: {
            args: Prisma.deathDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.deathUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.deathUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deathPayload>
          }
          aggregate: {
            args: Prisma.DeathAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeath>
          }
          groupBy: {
            args: Prisma.deathGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeathGroupByOutputType>[]
          }
          count: {
            args: Prisma.deathCountArgs<ExtArgs>
            result: $Utils.Optional<DeathCountAggregateOutputType> | number
          }
        }
      }
      sundayClass: {
        payload: Prisma.$sundayClassPayload<ExtArgs>
        fields: Prisma.sundayClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sundayClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sundayClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload>
          }
          findFirst: {
            args: Prisma.sundayClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sundayClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload>
          }
          findMany: {
            args: Prisma.sundayClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload>[]
          }
          create: {
            args: Prisma.sundayClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload>
          }
          createMany: {
            args: Prisma.sundayClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.sundayClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload>
          }
          update: {
            args: Prisma.sundayClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload>
          }
          deleteMany: {
            args: Prisma.sundayClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sundayClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.sundayClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sundayClassPayload>
          }
          aggregate: {
            args: Prisma.SundayClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSundayClass>
          }
          groupBy: {
            args: Prisma.sundayClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<SundayClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.sundayClassCountArgs<ExtArgs>
            result: $Utils.Optional<SundayClassCountAggregateOutputType> | number
          }
        }
      }
      expense: {
        payload: Prisma.$expensePayload<ExtArgs>
        fields: Prisma.expenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.expenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.expenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          findFirst: {
            args: Prisma.expenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.expenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          findMany: {
            args: Prisma.expenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>[]
          }
          create: {
            args: Prisma.expenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          createMany: {
            args: Prisma.expenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.expenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          update: {
            args: Prisma.expenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          deleteMany: {
            args: Prisma.expenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.expenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.expenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          aggregate: {
            args: Prisma.ExpenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpense>
          }
          groupBy: {
            args: Prisma.expenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.expenseCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseCountAggregateOutputType> | number
          }
        }
      }
      offering: {
        payload: Prisma.$offeringPayload<ExtArgs>
        fields: Prisma.offeringFieldRefs
        operations: {
          findUnique: {
            args: Prisma.offeringFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.offeringFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload>
          }
          findFirst: {
            args: Prisma.offeringFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.offeringFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload>
          }
          findMany: {
            args: Prisma.offeringFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload>[]
          }
          create: {
            args: Prisma.offeringCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload>
          }
          createMany: {
            args: Prisma.offeringCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.offeringDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload>
          }
          update: {
            args: Prisma.offeringUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload>
          }
          deleteMany: {
            args: Prisma.offeringDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.offeringUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.offeringUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$offeringPayload>
          }
          aggregate: {
            args: Prisma.OfferingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOffering>
          }
          groupBy: {
            args: Prisma.offeringGroupByArgs<ExtArgs>
            result: $Utils.Optional<OfferingGroupByOutputType>[]
          }
          count: {
            args: Prisma.offeringCountArgs<ExtArgs>
            result: $Utils.Optional<OfferingCountAggregateOutputType> | number
          }
        }
      }
      tithing: {
        payload: Prisma.$tithingPayload<ExtArgs>
        fields: Prisma.tithingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tithingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tithingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload>
          }
          findFirst: {
            args: Prisma.tithingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tithingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload>
          }
          findMany: {
            args: Prisma.tithingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload>[]
          }
          create: {
            args: Prisma.tithingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload>
          }
          createMany: {
            args: Prisma.tithingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tithingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload>
          }
          update: {
            args: Prisma.tithingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload>
          }
          deleteMany: {
            args: Prisma.tithingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tithingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tithingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tithingPayload>
          }
          aggregate: {
            args: Prisma.TithingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTithing>
          }
          groupBy: {
            args: Prisma.tithingGroupByArgs<ExtArgs>
            result: $Utils.Optional<TithingGroupByOutputType>[]
          }
          count: {
            args: Prisma.tithingCountArgs<ExtArgs>
            result: $Utils.Optional<TithingCountAggregateOutputType> | number
          }
        }
      }
      donation: {
        payload: Prisma.$donationPayload<ExtArgs>
        fields: Prisma.donationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.donationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.donationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload>
          }
          findFirst: {
            args: Prisma.donationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.donationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload>
          }
          findMany: {
            args: Prisma.donationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload>[]
          }
          create: {
            args: Prisma.donationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload>
          }
          createMany: {
            args: Prisma.donationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.donationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload>
          }
          update: {
            args: Prisma.donationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload>
          }
          deleteMany: {
            args: Prisma.donationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.donationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.donationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$donationPayload>
          }
          aggregate: {
            args: Prisma.DonationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDonation>
          }
          groupBy: {
            args: Prisma.donationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DonationGroupByOutputType>[]
          }
          count: {
            args: Prisma.donationCountArgs<ExtArgs>
            result: $Utils.Optional<DonationCountAggregateOutputType> | number
          }
        }
      }
      moisson: {
        payload: Prisma.$moissonPayload<ExtArgs>
        fields: Prisma.moissonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.moissonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.moissonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload>
          }
          findFirst: {
            args: Prisma.moissonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.moissonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload>
          }
          findMany: {
            args: Prisma.moissonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload>[]
          }
          create: {
            args: Prisma.moissonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload>
          }
          createMany: {
            args: Prisma.moissonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.moissonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload>
          }
          update: {
            args: Prisma.moissonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload>
          }
          deleteMany: {
            args: Prisma.moissonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.moissonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.moissonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$moissonPayload>
          }
          aggregate: {
            args: Prisma.MoissonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMoisson>
          }
          groupBy: {
            args: Prisma.moissonGroupByArgs<ExtArgs>
            result: $Utils.Optional<MoissonGroupByOutputType>[]
          }
          count: {
            args: Prisma.moissonCountArgs<ExtArgs>
            result: $Utils.Optional<MoissonCountAggregateOutputType> | number
          }
        }
      }
      comitee: {
        payload: Prisma.$comiteePayload<ExtArgs>
        fields: Prisma.comiteeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.comiteeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.comiteeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload>
          }
          findFirst: {
            args: Prisma.comiteeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.comiteeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload>
          }
          findMany: {
            args: Prisma.comiteeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload>[]
          }
          create: {
            args: Prisma.comiteeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload>
          }
          createMany: {
            args: Prisma.comiteeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.comiteeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload>
          }
          update: {
            args: Prisma.comiteeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload>
          }
          deleteMany: {
            args: Prisma.comiteeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.comiteeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.comiteeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$comiteePayload>
          }
          aggregate: {
            args: Prisma.ComiteeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComitee>
          }
          groupBy: {
            args: Prisma.comiteeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComiteeGroupByOutputType>[]
          }
          count: {
            args: Prisma.comiteeCountArgs<ExtArgs>
            result: $Utils.Optional<ComiteeCountAggregateOutputType> | number
          }
        }
      }
      appointment: {
        payload: Prisma.$appointmentPayload<ExtArgs>
        fields: Prisma.appointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.appointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.appointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload>
          }
          findFirst: {
            args: Prisma.appointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.appointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload>
          }
          findMany: {
            args: Prisma.appointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload>[]
          }
          create: {
            args: Prisma.appointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload>
          }
          createMany: {
            args: Prisma.appointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.appointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload>
          }
          update: {
            args: Prisma.appointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload>
          }
          deleteMany: {
            args: Prisma.appointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.appointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.appointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$appointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.appointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.appointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      transfert: {
        payload: Prisma.$transfertPayload<ExtArgs>
        fields: Prisma.transfertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transfertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transfertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload>
          }
          findFirst: {
            args: Prisma.transfertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transfertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload>
          }
          findMany: {
            args: Prisma.transfertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload>[]
          }
          create: {
            args: Prisma.transfertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload>
          }
          createMany: {
            args: Prisma.transfertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.transfertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload>
          }
          update: {
            args: Prisma.transfertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload>
          }
          deleteMany: {
            args: Prisma.transfertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transfertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.transfertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transfertPayload>
          }
          aggregate: {
            args: Prisma.TransfertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransfert>
          }
          groupBy: {
            args: Prisma.transfertGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransfertGroupByOutputType>[]
          }
          count: {
            args: Prisma.transfertCountArgs<ExtArgs>
            result: $Utils.Optional<TransfertCountAggregateOutputType> | number
          }
        }
      }
      Mission: {
        payload: Prisma.$MissionPayload<ExtArgs>
        fields: Prisma.MissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          findFirst: {
            args: Prisma.MissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          findMany: {
            args: Prisma.MissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>[]
          }
          create: {
            args: Prisma.MissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          createMany: {
            args: Prisma.MissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          update: {
            args: Prisma.MissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          deleteMany: {
            args: Prisma.MissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          aggregate: {
            args: Prisma.MissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMission>
          }
          groupBy: {
            args: Prisma.MissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MissionCountArgs<ExtArgs>
            result: $Utils.Optional<MissionCountAggregateOutputType> | number
          }
        }
      }
      sanction: {
        payload: Prisma.$sanctionPayload<ExtArgs>
        fields: Prisma.sanctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sanctionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sanctionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload>
          }
          findFirst: {
            args: Prisma.sanctionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sanctionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload>
          }
          findMany: {
            args: Prisma.sanctionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload>[]
          }
          create: {
            args: Prisma.sanctionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload>
          }
          createMany: {
            args: Prisma.sanctionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.sanctionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload>
          }
          update: {
            args: Prisma.sanctionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload>
          }
          deleteMany: {
            args: Prisma.sanctionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sanctionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.sanctionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sanctionPayload>
          }
          aggregate: {
            args: Prisma.SanctionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSanction>
          }
          groupBy: {
            args: Prisma.sanctionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SanctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.sanctionCountArgs<ExtArgs>
            result: $Utils.Optional<SanctionCountAggregateOutputType> | number
          }
        }
      }
      ministry: {
        payload: Prisma.$ministryPayload<ExtArgs>
        fields: Prisma.ministryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ministryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ministryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload>
          }
          findFirst: {
            args: Prisma.ministryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ministryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload>
          }
          findMany: {
            args: Prisma.ministryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload>[]
          }
          create: {
            args: Prisma.ministryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload>
          }
          createMany: {
            args: Prisma.ministryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ministryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload>
          }
          update: {
            args: Prisma.ministryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload>
          }
          deleteMany: {
            args: Prisma.ministryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ministryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ministryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ministryPayload>
          }
          aggregate: {
            args: Prisma.MinistryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistry>
          }
          groupBy: {
            args: Prisma.ministryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ministryCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryCountAggregateOutputType> | number
          }
        }
      }
      pasteur: {
        payload: Prisma.$pasteurPayload<ExtArgs>
        fields: Prisma.pasteurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pasteurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pasteurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload>
          }
          findFirst: {
            args: Prisma.pasteurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pasteurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload>
          }
          findMany: {
            args: Prisma.pasteurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload>[]
          }
          create: {
            args: Prisma.pasteurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload>
          }
          createMany: {
            args: Prisma.pasteurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.pasteurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload>
          }
          update: {
            args: Prisma.pasteurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload>
          }
          deleteMany: {
            args: Prisma.pasteurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.pasteurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.pasteurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pasteurPayload>
          }
          aggregate: {
            args: Prisma.PasteurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasteur>
          }
          groupBy: {
            args: Prisma.pasteurGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasteurGroupByOutputType>[]
          }
          count: {
            args: Prisma.pasteurCountArgs<ExtArgs>
            result: $Utils.Optional<PasteurCountAggregateOutputType> | number
          }
        }
      }
      Departement: {
        payload: Prisma.$DepartementPayload<ExtArgs>
        fields: Prisma.DepartementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          findFirst: {
            args: Prisma.DepartementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          findMany: {
            args: Prisma.DepartementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>[]
          }
          create: {
            args: Prisma.DepartementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          createMany: {
            args: Prisma.DepartementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DepartementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          update: {
            args: Prisma.DepartementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          deleteMany: {
            args: Prisma.DepartementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartementPayload>
          }
          aggregate: {
            args: Prisma.DepartementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartement>
          }
          groupBy: {
            args: Prisma.DepartementGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartementGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartementCountArgs<ExtArgs>
            result: $Utils.Optional<DepartementCountAggregateOutputType> | number
          }
        }
      }
      Commune: {
        payload: Prisma.$CommunePayload<ExtArgs>
        fields: Prisma.CommuneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommuneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommuneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload>
          }
          findFirst: {
            args: Prisma.CommuneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommuneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload>
          }
          findMany: {
            args: Prisma.CommuneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload>[]
          }
          create: {
            args: Prisma.CommuneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload>
          }
          createMany: {
            args: Prisma.CommuneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommuneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload>
          }
          update: {
            args: Prisma.CommuneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload>
          }
          deleteMany: {
            args: Prisma.CommuneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommuneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommuneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunePayload>
          }
          aggregate: {
            args: Prisma.CommuneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommune>
          }
          groupBy: {
            args: Prisma.CommuneGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommuneGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommuneCountArgs<ExtArgs>
            result: $Utils.Optional<CommuneCountAggregateOutputType> | number
          }
        }
      }
      SectionCommunale: {
        payload: Prisma.$SectionCommunalePayload<ExtArgs>
        fields: Prisma.SectionCommunaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionCommunaleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionCommunaleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload>
          }
          findFirst: {
            args: Prisma.SectionCommunaleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionCommunaleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload>
          }
          findMany: {
            args: Prisma.SectionCommunaleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload>[]
          }
          create: {
            args: Prisma.SectionCommunaleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload>
          }
          createMany: {
            args: Prisma.SectionCommunaleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SectionCommunaleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload>
          }
          update: {
            args: Prisma.SectionCommunaleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload>
          }
          deleteMany: {
            args: Prisma.SectionCommunaleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionCommunaleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SectionCommunaleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionCommunalePayload>
          }
          aggregate: {
            args: Prisma.SectionCommunaleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSectionCommunale>
          }
          groupBy: {
            args: Prisma.SectionCommunaleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionCommunaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCommunaleCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCommunaleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    service?: ServiceOmit
    presence?: PresenceOmit
    tti?: TtiOmit
    address?: AddressOmit
    church?: ChurchOmit
    user?: UserOmit
    groupe?: GroupeOmit
    event?: EventOmit
    mariage?: MariageOmit
    funeral?: FuneralOmit
    presentation?: PresentationOmit
    baptism?: BaptismOmit
    death?: deathOmit
    sundayClass?: sundayClassOmit
    expense?: expenseOmit
    offering?: offeringOmit
    tithing?: tithingOmit
    donation?: donationOmit
    moisson?: moissonOmit
    comitee?: comiteeOmit
    appointment?: appointmentOmit
    transfert?: transfertOmit
    mission?: MissionOmit
    sanction?: sanctionOmit
    ministry?: ministryOmit
    pasteur?: pasteurOmit
    departement?: DepartementOmit
    commune?: CommuneOmit
    sectionCommunale?: SectionCommunaleOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    presences: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presences?: boolean | ServiceCountOutputTypeCountPresencesArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountPresencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
  }


  /**
   * Count Type TtiCountOutputType
   */

  export type TtiCountOutputType = {
    church: number
  }

  export type TtiCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | TtiCountOutputTypeCountChurchArgs
  }

  // Custom InputTypes
  /**
   * TtiCountOutputType without action
   */
  export type TtiCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TtiCountOutputType
     */
    select?: TtiCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TtiCountOutputType without action
   */
  export type TtiCountOutputTypeCountChurchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchWhereInput
  }


  /**
   * Count Type ChurchCountOutputType
   */

  export type ChurchCountOutputType = {
    batism: number
    events: number
    funerals: number
    groups: number
    mariages: number
    presentations: number
    services: number
    users: number
    appointments: number
    comitees: number
    death: number
    donation: number
    expense: number
    ministry: number
    moisson: number
    offering: number
    pasteur: number
    sanction: number
    sundayClass: number
    tithing: number
    transfersFrom: number
    transfersTo: number
  }

  export type ChurchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batism?: boolean | ChurchCountOutputTypeCountBatismArgs
    events?: boolean | ChurchCountOutputTypeCountEventsArgs
    funerals?: boolean | ChurchCountOutputTypeCountFuneralsArgs
    groups?: boolean | ChurchCountOutputTypeCountGroupsArgs
    mariages?: boolean | ChurchCountOutputTypeCountMariagesArgs
    presentations?: boolean | ChurchCountOutputTypeCountPresentationsArgs
    services?: boolean | ChurchCountOutputTypeCountServicesArgs
    users?: boolean | ChurchCountOutputTypeCountUsersArgs
    appointments?: boolean | ChurchCountOutputTypeCountAppointmentsArgs
    comitees?: boolean | ChurchCountOutputTypeCountComiteesArgs
    death?: boolean | ChurchCountOutputTypeCountDeathArgs
    donation?: boolean | ChurchCountOutputTypeCountDonationArgs
    expense?: boolean | ChurchCountOutputTypeCountExpenseArgs
    ministry?: boolean | ChurchCountOutputTypeCountMinistryArgs
    moisson?: boolean | ChurchCountOutputTypeCountMoissonArgs
    offering?: boolean | ChurchCountOutputTypeCountOfferingArgs
    pasteur?: boolean | ChurchCountOutputTypeCountPasteurArgs
    sanction?: boolean | ChurchCountOutputTypeCountSanctionArgs
    sundayClass?: boolean | ChurchCountOutputTypeCountSundayClassArgs
    tithing?: boolean | ChurchCountOutputTypeCountTithingArgs
    transfersFrom?: boolean | ChurchCountOutputTypeCountTransfersFromArgs
    transfersTo?: boolean | ChurchCountOutputTypeCountTransfersToArgs
  }

  // Custom InputTypes
  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchCountOutputType
     */
    select?: ChurchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountBatismArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BaptismWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountFuneralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuneralWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupeWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountMariagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MariageWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountPresentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: appointmentWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountComiteesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: comiteeWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountDeathArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deathWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountDonationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: donationWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountExpenseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expenseWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountMinistryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ministryWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountMoissonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: moissonWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountOfferingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: offeringWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountPasteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pasteurWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountSanctionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sanctionWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountSundayClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sundayClassWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountTithingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tithingWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountTransfersFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transfertWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountTransfersToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transfertWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    presences: number
    tithes: number
    transfers: number
    leadingComittees: number
    memberComittees: number
    groups: number
    userAppointments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presences?: boolean | UserCountOutputTypeCountPresencesArgs
    tithes?: boolean | UserCountOutputTypeCountTithesArgs
    transfers?: boolean | UserCountOutputTypeCountTransfersArgs
    leadingComittees?: boolean | UserCountOutputTypeCountLeadingComitteesArgs
    memberComittees?: boolean | UserCountOutputTypeCountMemberComitteesArgs
    groups?: boolean | UserCountOutputTypeCountGroupsArgs
    userAppointments?: boolean | UserCountOutputTypeCountUserAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPresencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTithesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transfertWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLeadingComitteesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: comiteeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMemberComitteesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: comiteeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: appointmentWhereInput
  }


  /**
   * Count Type GroupeCountOutputType
   */

  export type GroupeCountOutputType = {
    users: number
  }

  export type GroupeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | GroupeCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * GroupeCountOutputType without action
   */
  export type GroupeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupeCountOutputType
     */
    select?: GroupeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupeCountOutputType without action
   */
  export type GroupeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ComiteeCountOutputType
   */

  export type ComiteeCountOutputType = {
    commiteeLeader: number
    commiteeMember: number
  }

  export type ComiteeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commiteeLeader?: boolean | ComiteeCountOutputTypeCountCommiteeLeaderArgs
    commiteeMember?: boolean | ComiteeCountOutputTypeCountCommiteeMemberArgs
  }

  // Custom InputTypes
  /**
   * ComiteeCountOutputType without action
   */
  export type ComiteeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComiteeCountOutputType
     */
    select?: ComiteeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComiteeCountOutputType without action
   */
  export type ComiteeCountOutputTypeCountCommiteeLeaderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ComiteeCountOutputType without action
   */
  export type ComiteeCountOutputTypeCountCommiteeMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type AppointmentCountOutputType
   */

  export type AppointmentCountOutputType = {
    assignedUsers: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedUsers?: boolean | AppointmentCountOutputTypeCountAssignedUsersArgs
  }

  // Custom InputTypes
  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountAssignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type MissionCountOutputType
   */

  export type MissionCountOutputType = {
    church: number
  }

  export type MissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | MissionCountOutputTypeCountChurchArgs
  }

  // Custom InputTypes
  /**
   * MissionCountOutputType without action
   */
  export type MissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissionCountOutputType
     */
    select?: MissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MissionCountOutputType without action
   */
  export type MissionCountOutputTypeCountChurchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchWhereInput
  }


  /**
   * Count Type DepartementCountOutputType
   */

  export type DepartementCountOutputType = {
    commune: number
  }

  export type DepartementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commune?: boolean | DepartementCountOutputTypeCountCommuneArgs
  }

  // Custom InputTypes
  /**
   * DepartementCountOutputType without action
   */
  export type DepartementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartementCountOutputType
     */
    select?: DepartementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartementCountOutputType without action
   */
  export type DepartementCountOutputTypeCountCommuneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommuneWhereInput
  }


  /**
   * Count Type CommuneCountOutputType
   */

  export type CommuneCountOutputType = {
    sectionCommunale: number
  }

  export type CommuneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sectionCommunale?: boolean | CommuneCountOutputTypeCountSectionCommunaleArgs
  }

  // Custom InputTypes
  /**
   * CommuneCountOutputType without action
   */
  export type CommuneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommuneCountOutputType
     */
    select?: CommuneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommuneCountOutputType without action
   */
  export type CommuneCountOutputTypeCountSectionCommunaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionCommunaleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceMinAggregateOutputType = {
    id: string | null
    nom: string | null
    createdAt: Date | null
    updatedAt: Date | null
    churchId: string | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: string | null
    nom: string | null
    createdAt: Date | null
    updatedAt: Date | null
    churchId: string | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    nom: number
    createdAt: number
    updatedAt: number
    churchId: number
    _all: number
  }


  export type ServiceMinAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
    churchId?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
    churchId?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
    churchId?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: string
    nom: string
    createdAt: Date
    updatedAt: Date
    churchId: string | null
    _count: ServiceCountAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    churchId?: boolean
    presences?: boolean | Service$presencesArgs<ExtArgs>
    church?: boolean | Service$churchArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>



  export type ServiceSelectScalar = {
    id?: boolean
    nom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    churchId?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "createdAt" | "updatedAt" | "churchId", ExtArgs["result"]["service"]>
  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presences?: boolean | Service$presencesArgs<ExtArgs>
    church?: boolean | Service$churchArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      presences: Prisma.$PresencePayload<ExtArgs>[]
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nom: string
      createdAt: Date
      updatedAt: Date
      churchId: string | null
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    presences<T extends Service$presencesArgs<ExtArgs> = {}>(args?: Subset<T, Service$presencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    church<T extends Service$churchArgs<ExtArgs> = {}>(args?: Subset<T, Service$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'String'>
    readonly nom: FieldRef<"Service", 'String'>
    readonly createdAt: FieldRef<"Service", 'DateTime'>
    readonly updatedAt: FieldRef<"Service", 'DateTime'>
    readonly churchId: FieldRef<"Service", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service.presences
   */
  export type Service$presencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    cursor?: PresenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Service.church
   */
  export type Service$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Model Presence
   */

  export type AggregatePresence = {
    _count: PresenceCountAggregateOutputType | null
    _min: PresenceMinAggregateOutputType | null
    _max: PresenceMaxAggregateOutputType | null
  }

  export type PresenceMinAggregateOutputType = {
    id: string | null
    statut: $Enums.StatutPresence | null
    utilisateurId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    serviceId: string | null
  }

  export type PresenceMaxAggregateOutputType = {
    id: string | null
    statut: $Enums.StatutPresence | null
    utilisateurId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    serviceId: string | null
  }

  export type PresenceCountAggregateOutputType = {
    id: number
    statut: number
    utilisateurId: number
    createdAt: number
    updatedAt: number
    serviceId: number
    _all: number
  }


  export type PresenceMinAggregateInputType = {
    id?: true
    statut?: true
    utilisateurId?: true
    createdAt?: true
    updatedAt?: true
    serviceId?: true
  }

  export type PresenceMaxAggregateInputType = {
    id?: true
    statut?: true
    utilisateurId?: true
    createdAt?: true
    updatedAt?: true
    serviceId?: true
  }

  export type PresenceCountAggregateInputType = {
    id?: true
    statut?: true
    utilisateurId?: true
    createdAt?: true
    updatedAt?: true
    serviceId?: true
    _all?: true
  }

  export type PresenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presence to aggregate.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Presences
    **/
    _count?: true | PresenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresenceMaxAggregateInputType
  }

  export type GetPresenceAggregateType<T extends PresenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePresence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresence[P]>
      : GetScalarType<T[P], AggregatePresence[P]>
  }




  export type PresenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithAggregationInput | PresenceOrderByWithAggregationInput[]
    by: PresenceScalarFieldEnum[] | PresenceScalarFieldEnum
    having?: PresenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresenceCountAggregateInputType | true
    _min?: PresenceMinAggregateInputType
    _max?: PresenceMaxAggregateInputType
  }

  export type PresenceGroupByOutputType = {
    id: string
    statut: $Enums.StatutPresence
    utilisateurId: string
    createdAt: Date
    updatedAt: Date
    serviceId: string
    _count: PresenceCountAggregateOutputType | null
    _min: PresenceMinAggregateOutputType | null
    _max: PresenceMaxAggregateOutputType | null
  }

  type GetPresenceGroupByPayload<T extends PresenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresenceGroupByOutputType[P]>
            : GetScalarType<T[P], PresenceGroupByOutputType[P]>
        }
      >
    >


  export type PresenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statut?: boolean
    utilisateurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceId?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presence"]>



  export type PresenceSelectScalar = {
    id?: boolean
    statut?: boolean
    utilisateurId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceId?: boolean
  }

  export type PresenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "statut" | "utilisateurId" | "createdAt" | "updatedAt" | "serviceId", ExtArgs["result"]["presence"]>
  export type PresenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PresencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Presence"
    objects: {
      service: Prisma.$ServicePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      statut: $Enums.StatutPresence
      utilisateurId: string
      createdAt: Date
      updatedAt: Date
      serviceId: string
    }, ExtArgs["result"]["presence"]>
    composites: {}
  }

  type PresenceGetPayload<S extends boolean | null | undefined | PresenceDefaultArgs> = $Result.GetResult<Prisma.$PresencePayload, S>

  type PresenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresenceCountAggregateInputType | true
    }

  export interface PresenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presence'], meta: { name: 'Presence' } }
    /**
     * Find zero or one Presence that matches the filter.
     * @param {PresenceFindUniqueArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresenceFindUniqueArgs>(args: SelectSubset<T, PresenceFindUniqueArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresenceFindUniqueOrThrowArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PresenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindFirstArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresenceFindFirstArgs>(args?: SelectSubset<T, PresenceFindFirstArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindFirstOrThrowArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PresenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presences
     * const presences = await prisma.presence.findMany()
     * 
     * // Get first 10 Presences
     * const presences = await prisma.presence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presenceWithIdOnly = await prisma.presence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresenceFindManyArgs>(args?: SelectSubset<T, PresenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presence.
     * @param {PresenceCreateArgs} args - Arguments to create a Presence.
     * @example
     * // Create one Presence
     * const Presence = await prisma.presence.create({
     *   data: {
     *     // ... data to create a Presence
     *   }
     * })
     * 
     */
    create<T extends PresenceCreateArgs>(args: SelectSubset<T, PresenceCreateArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presences.
     * @param {PresenceCreateManyArgs} args - Arguments to create many Presences.
     * @example
     * // Create many Presences
     * const presence = await prisma.presence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresenceCreateManyArgs>(args?: SelectSubset<T, PresenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Presence.
     * @param {PresenceDeleteArgs} args - Arguments to delete one Presence.
     * @example
     * // Delete one Presence
     * const Presence = await prisma.presence.delete({
     *   where: {
     *     // ... filter to delete one Presence
     *   }
     * })
     * 
     */
    delete<T extends PresenceDeleteArgs>(args: SelectSubset<T, PresenceDeleteArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presence.
     * @param {PresenceUpdateArgs} args - Arguments to update one Presence.
     * @example
     * // Update one Presence
     * const presence = await prisma.presence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresenceUpdateArgs>(args: SelectSubset<T, PresenceUpdateArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presences.
     * @param {PresenceDeleteManyArgs} args - Arguments to filter Presences to delete.
     * @example
     * // Delete a few Presences
     * const { count } = await prisma.presence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresenceDeleteManyArgs>(args?: SelectSubset<T, PresenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presences
     * const presence = await prisma.presence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresenceUpdateManyArgs>(args: SelectSubset<T, PresenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Presence.
     * @param {PresenceUpsertArgs} args - Arguments to update or create a Presence.
     * @example
     * // Update or create a Presence
     * const presence = await prisma.presence.upsert({
     *   create: {
     *     // ... data to create a Presence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presence we want to update
     *   }
     * })
     */
    upsert<T extends PresenceUpsertArgs>(args: SelectSubset<T, PresenceUpsertArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceCountArgs} args - Arguments to filter Presences to count.
     * @example
     * // Count the number of Presences
     * const count = await prisma.presence.count({
     *   where: {
     *     // ... the filter for the Presences we want to count
     *   }
     * })
    **/
    count<T extends PresenceCountArgs>(
      args?: Subset<T, PresenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresenceAggregateArgs>(args: Subset<T, PresenceAggregateArgs>): Prisma.PrismaPromise<GetPresenceAggregateType<T>>

    /**
     * Group by Presence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresenceGroupByArgs['orderBy'] }
        : { orderBy?: PresenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Presence model
   */
  readonly fields: PresenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Presence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Presence model
   */
  interface PresenceFieldRefs {
    readonly id: FieldRef<"Presence", 'String'>
    readonly statut: FieldRef<"Presence", 'StatutPresence'>
    readonly utilisateurId: FieldRef<"Presence", 'String'>
    readonly createdAt: FieldRef<"Presence", 'DateTime'>
    readonly updatedAt: FieldRef<"Presence", 'DateTime'>
    readonly serviceId: FieldRef<"Presence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Presence findUnique
   */
  export type PresenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence findUniqueOrThrow
   */
  export type PresenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence findFirst
   */
  export type PresenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presences.
     */
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence findFirstOrThrow
   */
  export type PresenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presences.
     */
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence findMany
   */
  export type PresenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presences to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence create
   */
  export type PresenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Presence.
     */
    data: XOR<PresenceCreateInput, PresenceUncheckedCreateInput>
  }

  /**
   * Presence createMany
   */
  export type PresenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Presences.
     */
    data: PresenceCreateManyInput | PresenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Presence update
   */
  export type PresenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Presence.
     */
    data: XOR<PresenceUpdateInput, PresenceUncheckedUpdateInput>
    /**
     * Choose, which Presence to update.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence updateMany
   */
  export type PresenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Presences.
     */
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyInput>
    /**
     * Filter which Presences to update
     */
    where?: PresenceWhereInput
    /**
     * Limit how many Presences to update.
     */
    limit?: number
  }

  /**
   * Presence upsert
   */
  export type PresenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Presence to update in case it exists.
     */
    where: PresenceWhereUniqueInput
    /**
     * In case the Presence found by the `where` argument doesn't exist, create a new Presence with this data.
     */
    create: XOR<PresenceCreateInput, PresenceUncheckedCreateInput>
    /**
     * In case the Presence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresenceUpdateInput, PresenceUncheckedUpdateInput>
  }

  /**
   * Presence delete
   */
  export type PresenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter which Presence to delete.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence deleteMany
   */
  export type PresenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presences to delete
     */
    where?: PresenceWhereInput
    /**
     * Limit how many Presences to delete.
     */
    limit?: number
  }

  /**
   * Presence without action
   */
  export type PresenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
  }


  /**
   * Model Tti
   */

  export type AggregateTti = {
    _count: TtiCountAggregateOutputType | null
    _min: TtiMinAggregateOutputType | null
    _max: TtiMaxAggregateOutputType | null
  }

  export type TtiMinAggregateOutputType = {
    id: string | null
    nom: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TtiMaxAggregateOutputType = {
    id: string | null
    nom: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TtiCountAggregateOutputType = {
    id: number
    nom: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TtiMinAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TtiMaxAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TtiCountAggregateInputType = {
    id?: true
    nom?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TtiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tti to aggregate.
     */
    where?: TtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ttis to fetch.
     */
    orderBy?: TtiOrderByWithRelationInput | TtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ttis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ttis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ttis
    **/
    _count?: true | TtiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TtiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TtiMaxAggregateInputType
  }

  export type GetTtiAggregateType<T extends TtiAggregateArgs> = {
        [P in keyof T & keyof AggregateTti]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTti[P]>
      : GetScalarType<T[P], AggregateTti[P]>
  }




  export type TtiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TtiWhereInput
    orderBy?: TtiOrderByWithAggregationInput | TtiOrderByWithAggregationInput[]
    by: TtiScalarFieldEnum[] | TtiScalarFieldEnum
    having?: TtiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TtiCountAggregateInputType | true
    _min?: TtiMinAggregateInputType
    _max?: TtiMaxAggregateInputType
  }

  export type TtiGroupByOutputType = {
    id: string
    nom: string
    createdAt: Date
    updatedAt: Date
    _count: TtiCountAggregateOutputType | null
    _min: TtiMinAggregateOutputType | null
    _max: TtiMaxAggregateOutputType | null
  }

  type GetTtiGroupByPayload<T extends TtiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TtiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TtiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TtiGroupByOutputType[P]>
            : GetScalarType<T[P], TtiGroupByOutputType[P]>
        }
      >
    >


  export type TtiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | Tti$churchArgs<ExtArgs>
    _count?: boolean | TtiCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tti"]>



  export type TtiSelectScalar = {
    id?: boolean
    nom?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TtiOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "createdAt" | "updatedAt", ExtArgs["result"]["tti"]>
  export type TtiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Tti$churchArgs<ExtArgs>
    _count?: boolean | TtiCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TtiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tti"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nom: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tti"]>
    composites: {}
  }

  type TtiGetPayload<S extends boolean | null | undefined | TtiDefaultArgs> = $Result.GetResult<Prisma.$TtiPayload, S>

  type TtiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TtiFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TtiCountAggregateInputType | true
    }

  export interface TtiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tti'], meta: { name: 'Tti' } }
    /**
     * Find zero or one Tti that matches the filter.
     * @param {TtiFindUniqueArgs} args - Arguments to find a Tti
     * @example
     * // Get one Tti
     * const tti = await prisma.tti.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TtiFindUniqueArgs>(args: SelectSubset<T, TtiFindUniqueArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tti that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TtiFindUniqueOrThrowArgs} args - Arguments to find a Tti
     * @example
     * // Get one Tti
     * const tti = await prisma.tti.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TtiFindUniqueOrThrowArgs>(args: SelectSubset<T, TtiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tti that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtiFindFirstArgs} args - Arguments to find a Tti
     * @example
     * // Get one Tti
     * const tti = await prisma.tti.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TtiFindFirstArgs>(args?: SelectSubset<T, TtiFindFirstArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tti that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtiFindFirstOrThrowArgs} args - Arguments to find a Tti
     * @example
     * // Get one Tti
     * const tti = await prisma.tti.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TtiFindFirstOrThrowArgs>(args?: SelectSubset<T, TtiFindFirstOrThrowArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ttis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ttis
     * const ttis = await prisma.tti.findMany()
     * 
     * // Get first 10 Ttis
     * const ttis = await prisma.tti.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ttiWithIdOnly = await prisma.tti.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TtiFindManyArgs>(args?: SelectSubset<T, TtiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tti.
     * @param {TtiCreateArgs} args - Arguments to create a Tti.
     * @example
     * // Create one Tti
     * const Tti = await prisma.tti.create({
     *   data: {
     *     // ... data to create a Tti
     *   }
     * })
     * 
     */
    create<T extends TtiCreateArgs>(args: SelectSubset<T, TtiCreateArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ttis.
     * @param {TtiCreateManyArgs} args - Arguments to create many Ttis.
     * @example
     * // Create many Ttis
     * const tti = await prisma.tti.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TtiCreateManyArgs>(args?: SelectSubset<T, TtiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tti.
     * @param {TtiDeleteArgs} args - Arguments to delete one Tti.
     * @example
     * // Delete one Tti
     * const Tti = await prisma.tti.delete({
     *   where: {
     *     // ... filter to delete one Tti
     *   }
     * })
     * 
     */
    delete<T extends TtiDeleteArgs>(args: SelectSubset<T, TtiDeleteArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tti.
     * @param {TtiUpdateArgs} args - Arguments to update one Tti.
     * @example
     * // Update one Tti
     * const tti = await prisma.tti.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TtiUpdateArgs>(args: SelectSubset<T, TtiUpdateArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ttis.
     * @param {TtiDeleteManyArgs} args - Arguments to filter Ttis to delete.
     * @example
     * // Delete a few Ttis
     * const { count } = await prisma.tti.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TtiDeleteManyArgs>(args?: SelectSubset<T, TtiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ttis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ttis
     * const tti = await prisma.tti.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TtiUpdateManyArgs>(args: SelectSubset<T, TtiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tti.
     * @param {TtiUpsertArgs} args - Arguments to update or create a Tti.
     * @example
     * // Update or create a Tti
     * const tti = await prisma.tti.upsert({
     *   create: {
     *     // ... data to create a Tti
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tti we want to update
     *   }
     * })
     */
    upsert<T extends TtiUpsertArgs>(args: SelectSubset<T, TtiUpsertArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ttis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtiCountArgs} args - Arguments to filter Ttis to count.
     * @example
     * // Count the number of Ttis
     * const count = await prisma.tti.count({
     *   where: {
     *     // ... the filter for the Ttis we want to count
     *   }
     * })
    **/
    count<T extends TtiCountArgs>(
      args?: Subset<T, TtiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TtiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tti.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TtiAggregateArgs>(args: Subset<T, TtiAggregateArgs>): Prisma.PrismaPromise<GetTtiAggregateType<T>>

    /**
     * Group by Tti.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TtiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TtiGroupByArgs['orderBy'] }
        : { orderBy?: TtiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TtiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTtiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tti model
   */
  readonly fields: TtiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tti.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TtiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Tti$churchArgs<ExtArgs> = {}>(args?: Subset<T, Tti$churchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tti model
   */
  interface TtiFieldRefs {
    readonly id: FieldRef<"Tti", 'String'>
    readonly nom: FieldRef<"Tti", 'String'>
    readonly createdAt: FieldRef<"Tti", 'DateTime'>
    readonly updatedAt: FieldRef<"Tti", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tti findUnique
   */
  export type TtiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * Filter, which Tti to fetch.
     */
    where: TtiWhereUniqueInput
  }

  /**
   * Tti findUniqueOrThrow
   */
  export type TtiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * Filter, which Tti to fetch.
     */
    where: TtiWhereUniqueInput
  }

  /**
   * Tti findFirst
   */
  export type TtiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * Filter, which Tti to fetch.
     */
    where?: TtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ttis to fetch.
     */
    orderBy?: TtiOrderByWithRelationInput | TtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ttis.
     */
    cursor?: TtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ttis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ttis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ttis.
     */
    distinct?: TtiScalarFieldEnum | TtiScalarFieldEnum[]
  }

  /**
   * Tti findFirstOrThrow
   */
  export type TtiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * Filter, which Tti to fetch.
     */
    where?: TtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ttis to fetch.
     */
    orderBy?: TtiOrderByWithRelationInput | TtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ttis.
     */
    cursor?: TtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ttis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ttis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ttis.
     */
    distinct?: TtiScalarFieldEnum | TtiScalarFieldEnum[]
  }

  /**
   * Tti findMany
   */
  export type TtiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * Filter, which Ttis to fetch.
     */
    where?: TtiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ttis to fetch.
     */
    orderBy?: TtiOrderByWithRelationInput | TtiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ttis.
     */
    cursor?: TtiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ttis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ttis.
     */
    skip?: number
    distinct?: TtiScalarFieldEnum | TtiScalarFieldEnum[]
  }

  /**
   * Tti create
   */
  export type TtiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * The data needed to create a Tti.
     */
    data: XOR<TtiCreateInput, TtiUncheckedCreateInput>
  }

  /**
   * Tti createMany
   */
  export type TtiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ttis.
     */
    data: TtiCreateManyInput | TtiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tti update
   */
  export type TtiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * The data needed to update a Tti.
     */
    data: XOR<TtiUpdateInput, TtiUncheckedUpdateInput>
    /**
     * Choose, which Tti to update.
     */
    where: TtiWhereUniqueInput
  }

  /**
   * Tti updateMany
   */
  export type TtiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ttis.
     */
    data: XOR<TtiUpdateManyMutationInput, TtiUncheckedUpdateManyInput>
    /**
     * Filter which Ttis to update
     */
    where?: TtiWhereInput
    /**
     * Limit how many Ttis to update.
     */
    limit?: number
  }

  /**
   * Tti upsert
   */
  export type TtiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * The filter to search for the Tti to update in case it exists.
     */
    where: TtiWhereUniqueInput
    /**
     * In case the Tti found by the `where` argument doesn't exist, create a new Tti with this data.
     */
    create: XOR<TtiCreateInput, TtiUncheckedCreateInput>
    /**
     * In case the Tti was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TtiUpdateInput, TtiUncheckedUpdateInput>
  }

  /**
   * Tti delete
   */
  export type TtiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    /**
     * Filter which Tti to delete.
     */
    where: TtiWhereUniqueInput
  }

  /**
   * Tti deleteMany
   */
  export type TtiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ttis to delete
     */
    where?: TtiWhereInput
    /**
     * Limit how many Ttis to delete.
     */
    limit?: number
  }

  /**
   * Tti.church
   */
  export type Tti$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    cursor?: ChurchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Tti without action
   */
  export type TtiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    country: string | null
    departement: string | null
    commune: string | null
    sectionCommunale: string | null
    telephone: string | null
    rue: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    country: string | null
    departement: string | null
    commune: string | null
    sectionCommunale: string | null
    telephone: string | null
    rue: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    country: number
    departement: number
    commune: number
    sectionCommunale: number
    telephone: number
    rue: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    country?: true
    departement?: true
    commune?: true
    sectionCommunale?: true
    telephone?: true
    rue?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    country?: true
    departement?: true
    commune?: true
    sectionCommunale?: true
    telephone?: true
    rue?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    country?: true
    departement?: true
    commune?: true
    sectionCommunale?: true
    telephone?: true
    rue?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    country: string | null
    departement: string | null
    commune: string | null
    sectionCommunale: string | null
    telephone: string | null
    rue: string | null
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    departement?: boolean
    commune?: boolean
    sectionCommunale?: boolean
    telephone?: boolean
    rue?: boolean
    church?: boolean | Address$churchArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>



  export type AddressSelectScalar = {
    id?: boolean
    country?: boolean
    departement?: boolean
    commune?: boolean
    sectionCommunale?: boolean
    telephone?: boolean
    rue?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "country" | "departement" | "commune" | "sectionCommunale" | "telephone" | "rue", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Address$churchArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      country: string | null
      departement: string | null
      commune: string | null
      sectionCommunale: string | null
      telephone: string | null
      rue: string | null
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Address$churchArgs<ExtArgs> = {}>(args?: Subset<T, Address$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly country: FieldRef<"Address", 'String'>
    readonly departement: FieldRef<"Address", 'String'>
    readonly commune: FieldRef<"Address", 'String'>
    readonly sectionCommunale: FieldRef<"Address", 'String'>
    readonly telephone: FieldRef<"Address", 'String'>
    readonly rue: FieldRef<"Address", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data?: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to delete.
     */
    limit?: number
  }

  /**
   * Address.church
   */
  export type Address$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Church
   */

  export type AggregateChurch = {
    _count: ChurchCountAggregateOutputType | null
    _min: ChurchMinAggregateOutputType | null
    _max: ChurchMaxAggregateOutputType | null
  }

  export type ChurchMinAggregateOutputType = {
    id: string | null
    name: string | null
    quantity: string | null
    address: string | null
    phone: string | null
    anthem: string | null
    facebook: string | null
    instagram: string | null
    createdAt: Date | null
    updatedAt: Date | null
    picture: string | null
    missionId: string | null
    email: string | null
    mainPasteur: string | null
    whatsapp: string | null
    latitude: string | null
    longitude: string | null
    ttiId: string | null
    addressId: string | null
  }

  export type ChurchMaxAggregateOutputType = {
    id: string | null
    name: string | null
    quantity: string | null
    address: string | null
    phone: string | null
    anthem: string | null
    facebook: string | null
    instagram: string | null
    createdAt: Date | null
    updatedAt: Date | null
    picture: string | null
    missionId: string | null
    email: string | null
    mainPasteur: string | null
    whatsapp: string | null
    latitude: string | null
    longitude: string | null
    ttiId: string | null
    addressId: string | null
  }

  export type ChurchCountAggregateOutputType = {
    id: number
    name: number
    quantity: number
    address: number
    phone: number
    anthem: number
    facebook: number
    instagram: number
    createdAt: number
    updatedAt: number
    picture: number
    missionId: number
    email: number
    mainPasteur: number
    whatsapp: number
    latitude: number
    longitude: number
    ttiId: number
    addressId: number
    _all: number
  }


  export type ChurchMinAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    address?: true
    phone?: true
    anthem?: true
    facebook?: true
    instagram?: true
    createdAt?: true
    updatedAt?: true
    picture?: true
    missionId?: true
    email?: true
    mainPasteur?: true
    whatsapp?: true
    latitude?: true
    longitude?: true
    ttiId?: true
    addressId?: true
  }

  export type ChurchMaxAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    address?: true
    phone?: true
    anthem?: true
    facebook?: true
    instagram?: true
    createdAt?: true
    updatedAt?: true
    picture?: true
    missionId?: true
    email?: true
    mainPasteur?: true
    whatsapp?: true
    latitude?: true
    longitude?: true
    ttiId?: true
    addressId?: true
  }

  export type ChurchCountAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    address?: true
    phone?: true
    anthem?: true
    facebook?: true
    instagram?: true
    createdAt?: true
    updatedAt?: true
    picture?: true
    missionId?: true
    email?: true
    mainPasteur?: true
    whatsapp?: true
    latitude?: true
    longitude?: true
    ttiId?: true
    addressId?: true
    _all?: true
  }

  export type ChurchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Church to aggregate.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Churches
    **/
    _count?: true | ChurchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchMaxAggregateInputType
  }

  export type GetChurchAggregateType<T extends ChurchAggregateArgs> = {
        [P in keyof T & keyof AggregateChurch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurch[P]>
      : GetScalarType<T[P], AggregateChurch[P]>
  }




  export type ChurchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchWhereInput
    orderBy?: ChurchOrderByWithAggregationInput | ChurchOrderByWithAggregationInput[]
    by: ChurchScalarFieldEnum[] | ChurchScalarFieldEnum
    having?: ChurchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchCountAggregateInputType | true
    _min?: ChurchMinAggregateInputType
    _max?: ChurchMaxAggregateInputType
  }

  export type ChurchGroupByOutputType = {
    id: string
    name: string
    quantity: string
    address: string | null
    phone: string | null
    anthem: string | null
    facebook: string | null
    instagram: string | null
    createdAt: Date
    updatedAt: Date
    picture: string | null
    missionId: string | null
    email: string | null
    mainPasteur: string | null
    whatsapp: string | null
    latitude: string | null
    longitude: string | null
    ttiId: string | null
    addressId: string | null
    _count: ChurchCountAggregateOutputType | null
    _min: ChurchMinAggregateOutputType | null
    _max: ChurchMaxAggregateOutputType | null
  }

  type GetChurchGroupByPayload<T extends ChurchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchGroupByOutputType[P]>
        }
      >
    >


  export type ChurchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    address?: boolean
    phone?: boolean
    anthem?: boolean
    facebook?: boolean
    instagram?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    picture?: boolean
    missionId?: boolean
    email?: boolean
    mainPasteur?: boolean
    whatsapp?: boolean
    latitude?: boolean
    longitude?: boolean
    ttiId?: boolean
    addressId?: boolean
    batism?: boolean | Church$batismArgs<ExtArgs>
    fullAddress?: boolean | Church$fullAddressArgs<ExtArgs>
    mission?: boolean | Church$missionArgs<ExtArgs>
    tti?: boolean | Church$ttiArgs<ExtArgs>
    events?: boolean | Church$eventsArgs<ExtArgs>
    funerals?: boolean | Church$funeralsArgs<ExtArgs>
    groups?: boolean | Church$groupsArgs<ExtArgs>
    mariages?: boolean | Church$mariagesArgs<ExtArgs>
    presentations?: boolean | Church$presentationsArgs<ExtArgs>
    services?: boolean | Church$servicesArgs<ExtArgs>
    users?: boolean | Church$usersArgs<ExtArgs>
    appointments?: boolean | Church$appointmentsArgs<ExtArgs>
    comitees?: boolean | Church$comiteesArgs<ExtArgs>
    death?: boolean | Church$deathArgs<ExtArgs>
    donation?: boolean | Church$donationArgs<ExtArgs>
    expense?: boolean | Church$expenseArgs<ExtArgs>
    ministry?: boolean | Church$ministryArgs<ExtArgs>
    moisson?: boolean | Church$moissonArgs<ExtArgs>
    offering?: boolean | Church$offeringArgs<ExtArgs>
    pasteur?: boolean | Church$pasteurArgs<ExtArgs>
    sanction?: boolean | Church$sanctionArgs<ExtArgs>
    sundayClass?: boolean | Church$sundayClassArgs<ExtArgs>
    tithing?: boolean | Church$tithingArgs<ExtArgs>
    transfersFrom?: boolean | Church$transfersFromArgs<ExtArgs>
    transfersTo?: boolean | Church$transfersToArgs<ExtArgs>
    _count?: boolean | ChurchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["church"]>



  export type ChurchSelectScalar = {
    id?: boolean
    name?: boolean
    quantity?: boolean
    address?: boolean
    phone?: boolean
    anthem?: boolean
    facebook?: boolean
    instagram?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    picture?: boolean
    missionId?: boolean
    email?: boolean
    mainPasteur?: boolean
    whatsapp?: boolean
    latitude?: boolean
    longitude?: boolean
    ttiId?: boolean
    addressId?: boolean
  }

  export type ChurchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "quantity" | "address" | "phone" | "anthem" | "facebook" | "instagram" | "createdAt" | "updatedAt" | "picture" | "missionId" | "email" | "mainPasteur" | "whatsapp" | "latitude" | "longitude" | "ttiId" | "addressId", ExtArgs["result"]["church"]>
  export type ChurchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batism?: boolean | Church$batismArgs<ExtArgs>
    fullAddress?: boolean | Church$fullAddressArgs<ExtArgs>
    mission?: boolean | Church$missionArgs<ExtArgs>
    tti?: boolean | Church$ttiArgs<ExtArgs>
    events?: boolean | Church$eventsArgs<ExtArgs>
    funerals?: boolean | Church$funeralsArgs<ExtArgs>
    groups?: boolean | Church$groupsArgs<ExtArgs>
    mariages?: boolean | Church$mariagesArgs<ExtArgs>
    presentations?: boolean | Church$presentationsArgs<ExtArgs>
    services?: boolean | Church$servicesArgs<ExtArgs>
    users?: boolean | Church$usersArgs<ExtArgs>
    appointments?: boolean | Church$appointmentsArgs<ExtArgs>
    comitees?: boolean | Church$comiteesArgs<ExtArgs>
    death?: boolean | Church$deathArgs<ExtArgs>
    donation?: boolean | Church$donationArgs<ExtArgs>
    expense?: boolean | Church$expenseArgs<ExtArgs>
    ministry?: boolean | Church$ministryArgs<ExtArgs>
    moisson?: boolean | Church$moissonArgs<ExtArgs>
    offering?: boolean | Church$offeringArgs<ExtArgs>
    pasteur?: boolean | Church$pasteurArgs<ExtArgs>
    sanction?: boolean | Church$sanctionArgs<ExtArgs>
    sundayClass?: boolean | Church$sundayClassArgs<ExtArgs>
    tithing?: boolean | Church$tithingArgs<ExtArgs>
    transfersFrom?: boolean | Church$transfersFromArgs<ExtArgs>
    transfersTo?: boolean | Church$transfersToArgs<ExtArgs>
    _count?: boolean | ChurchCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ChurchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Church"
    objects: {
      batism: Prisma.$BaptismPayload<ExtArgs>[]
      fullAddress: Prisma.$AddressPayload<ExtArgs> | null
      mission: Prisma.$MissionPayload<ExtArgs> | null
      tti: Prisma.$TtiPayload<ExtArgs> | null
      events: Prisma.$EventPayload<ExtArgs>[]
      funerals: Prisma.$FuneralPayload<ExtArgs>[]
      groups: Prisma.$GroupePayload<ExtArgs>[]
      mariages: Prisma.$MariagePayload<ExtArgs>[]
      presentations: Prisma.$PresentationPayload<ExtArgs>[]
      services: Prisma.$ServicePayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      appointments: Prisma.$appointmentPayload<ExtArgs>[]
      comitees: Prisma.$comiteePayload<ExtArgs>[]
      death: Prisma.$deathPayload<ExtArgs>[]
      donation: Prisma.$donationPayload<ExtArgs>[]
      expense: Prisma.$expensePayload<ExtArgs>[]
      ministry: Prisma.$ministryPayload<ExtArgs>[]
      moisson: Prisma.$moissonPayload<ExtArgs>[]
      offering: Prisma.$offeringPayload<ExtArgs>[]
      pasteur: Prisma.$pasteurPayload<ExtArgs>[]
      sanction: Prisma.$sanctionPayload<ExtArgs>[]
      sundayClass: Prisma.$sundayClassPayload<ExtArgs>[]
      tithing: Prisma.$tithingPayload<ExtArgs>[]
      transfersFrom: Prisma.$transfertPayload<ExtArgs>[]
      transfersTo: Prisma.$transfertPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      quantity: string
      address: string | null
      phone: string | null
      anthem: string | null
      facebook: string | null
      instagram: string | null
      createdAt: Date
      updatedAt: Date
      picture: string | null
      missionId: string | null
      email: string | null
      mainPasteur: string | null
      whatsapp: string | null
      latitude: string | null
      longitude: string | null
      ttiId: string | null
      addressId: string | null
    }, ExtArgs["result"]["church"]>
    composites: {}
  }

  type ChurchGetPayload<S extends boolean | null | undefined | ChurchDefaultArgs> = $Result.GetResult<Prisma.$ChurchPayload, S>

  type ChurchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchCountAggregateInputType | true
    }

  export interface ChurchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Church'], meta: { name: 'Church' } }
    /**
     * Find zero or one Church that matches the filter.
     * @param {ChurchFindUniqueArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchFindUniqueArgs>(args: SelectSubset<T, ChurchFindUniqueArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Church that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchFindUniqueOrThrowArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Church that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFindFirstArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchFindFirstArgs>(args?: SelectSubset<T, ChurchFindFirstArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Church that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFindFirstOrThrowArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Churches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Churches
     * const churches = await prisma.church.findMany()
     * 
     * // Get first 10 Churches
     * const churches = await prisma.church.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchWithIdOnly = await prisma.church.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchFindManyArgs>(args?: SelectSubset<T, ChurchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Church.
     * @param {ChurchCreateArgs} args - Arguments to create a Church.
     * @example
     * // Create one Church
     * const Church = await prisma.church.create({
     *   data: {
     *     // ... data to create a Church
     *   }
     * })
     * 
     */
    create<T extends ChurchCreateArgs>(args: SelectSubset<T, ChurchCreateArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Churches.
     * @param {ChurchCreateManyArgs} args - Arguments to create many Churches.
     * @example
     * // Create many Churches
     * const church = await prisma.church.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchCreateManyArgs>(args?: SelectSubset<T, ChurchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Church.
     * @param {ChurchDeleteArgs} args - Arguments to delete one Church.
     * @example
     * // Delete one Church
     * const Church = await prisma.church.delete({
     *   where: {
     *     // ... filter to delete one Church
     *   }
     * })
     * 
     */
    delete<T extends ChurchDeleteArgs>(args: SelectSubset<T, ChurchDeleteArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Church.
     * @param {ChurchUpdateArgs} args - Arguments to update one Church.
     * @example
     * // Update one Church
     * const church = await prisma.church.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchUpdateArgs>(args: SelectSubset<T, ChurchUpdateArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Churches.
     * @param {ChurchDeleteManyArgs} args - Arguments to filter Churches to delete.
     * @example
     * // Delete a few Churches
     * const { count } = await prisma.church.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchDeleteManyArgs>(args?: SelectSubset<T, ChurchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Churches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Churches
     * const church = await prisma.church.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchUpdateManyArgs>(args: SelectSubset<T, ChurchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Church.
     * @param {ChurchUpsertArgs} args - Arguments to update or create a Church.
     * @example
     * // Update or create a Church
     * const church = await prisma.church.upsert({
     *   create: {
     *     // ... data to create a Church
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Church we want to update
     *   }
     * })
     */
    upsert<T extends ChurchUpsertArgs>(args: SelectSubset<T, ChurchUpsertArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Churches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchCountArgs} args - Arguments to filter Churches to count.
     * @example
     * // Count the number of Churches
     * const count = await prisma.church.count({
     *   where: {
     *     // ... the filter for the Churches we want to count
     *   }
     * })
    **/
    count<T extends ChurchCountArgs>(
      args?: Subset<T, ChurchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Church.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchAggregateArgs>(args: Subset<T, ChurchAggregateArgs>): Prisma.PrismaPromise<GetChurchAggregateType<T>>

    /**
     * Group by Church.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchGroupByArgs['orderBy'] }
        : { orderBy?: ChurchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Church model
   */
  readonly fields: ChurchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Church.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batism<T extends Church$batismArgs<ExtArgs> = {}>(args?: Subset<T, Church$batismArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fullAddress<T extends Church$fullAddressArgs<ExtArgs> = {}>(args?: Subset<T, Church$fullAddressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    mission<T extends Church$missionArgs<ExtArgs> = {}>(args?: Subset<T, Church$missionArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tti<T extends Church$ttiArgs<ExtArgs> = {}>(args?: Subset<T, Church$ttiArgs<ExtArgs>>): Prisma__TtiClient<$Result.GetResult<Prisma.$TtiPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    events<T extends Church$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Church$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    funerals<T extends Church$funeralsArgs<ExtArgs> = {}>(args?: Subset<T, Church$funeralsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    groups<T extends Church$groupsArgs<ExtArgs> = {}>(args?: Subset<T, Church$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mariages<T extends Church$mariagesArgs<ExtArgs> = {}>(args?: Subset<T, Church$mariagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presentations<T extends Church$presentationsArgs<ExtArgs> = {}>(args?: Subset<T, Church$presentationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    services<T extends Church$servicesArgs<ExtArgs> = {}>(args?: Subset<T, Church$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Church$usersArgs<ExtArgs> = {}>(args?: Subset<T, Church$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends Church$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Church$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comitees<T extends Church$comiteesArgs<ExtArgs> = {}>(args?: Subset<T, Church$comiteesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    death<T extends Church$deathArgs<ExtArgs> = {}>(args?: Subset<T, Church$deathArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    donation<T extends Church$donationArgs<ExtArgs> = {}>(args?: Subset<T, Church$donationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expense<T extends Church$expenseArgs<ExtArgs> = {}>(args?: Subset<T, Church$expenseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ministry<T extends Church$ministryArgs<ExtArgs> = {}>(args?: Subset<T, Church$ministryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    moisson<T extends Church$moissonArgs<ExtArgs> = {}>(args?: Subset<T, Church$moissonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    offering<T extends Church$offeringArgs<ExtArgs> = {}>(args?: Subset<T, Church$offeringArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pasteur<T extends Church$pasteurArgs<ExtArgs> = {}>(args?: Subset<T, Church$pasteurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sanction<T extends Church$sanctionArgs<ExtArgs> = {}>(args?: Subset<T, Church$sanctionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sundayClass<T extends Church$sundayClassArgs<ExtArgs> = {}>(args?: Subset<T, Church$sundayClassArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tithing<T extends Church$tithingArgs<ExtArgs> = {}>(args?: Subset<T, Church$tithingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transfersFrom<T extends Church$transfersFromArgs<ExtArgs> = {}>(args?: Subset<T, Church$transfersFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transfersTo<T extends Church$transfersToArgs<ExtArgs> = {}>(args?: Subset<T, Church$transfersToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Church model
   */
  interface ChurchFieldRefs {
    readonly id: FieldRef<"Church", 'String'>
    readonly name: FieldRef<"Church", 'String'>
    readonly quantity: FieldRef<"Church", 'String'>
    readonly address: FieldRef<"Church", 'String'>
    readonly phone: FieldRef<"Church", 'String'>
    readonly anthem: FieldRef<"Church", 'String'>
    readonly facebook: FieldRef<"Church", 'String'>
    readonly instagram: FieldRef<"Church", 'String'>
    readonly createdAt: FieldRef<"Church", 'DateTime'>
    readonly updatedAt: FieldRef<"Church", 'DateTime'>
    readonly picture: FieldRef<"Church", 'String'>
    readonly missionId: FieldRef<"Church", 'String'>
    readonly email: FieldRef<"Church", 'String'>
    readonly mainPasteur: FieldRef<"Church", 'String'>
    readonly whatsapp: FieldRef<"Church", 'String'>
    readonly latitude: FieldRef<"Church", 'String'>
    readonly longitude: FieldRef<"Church", 'String'>
    readonly ttiId: FieldRef<"Church", 'String'>
    readonly addressId: FieldRef<"Church", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Church findUnique
   */
  export type ChurchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church findUniqueOrThrow
   */
  export type ChurchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church findFirst
   */
  export type ChurchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Churches.
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Churches.
     */
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Church findFirstOrThrow
   */
  export type ChurchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Churches.
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Churches.
     */
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Church findMany
   */
  export type ChurchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Churches to fetch.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Churches.
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Church create
   */
  export type ChurchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * The data needed to create a Church.
     */
    data: XOR<ChurchCreateInput, ChurchUncheckedCreateInput>
  }

  /**
   * Church createMany
   */
  export type ChurchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Churches.
     */
    data: ChurchCreateManyInput | ChurchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Church update
   */
  export type ChurchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * The data needed to update a Church.
     */
    data: XOR<ChurchUpdateInput, ChurchUncheckedUpdateInput>
    /**
     * Choose, which Church to update.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church updateMany
   */
  export type ChurchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Churches.
     */
    data: XOR<ChurchUpdateManyMutationInput, ChurchUncheckedUpdateManyInput>
    /**
     * Filter which Churches to update
     */
    where?: ChurchWhereInput
    /**
     * Limit how many Churches to update.
     */
    limit?: number
  }

  /**
   * Church upsert
   */
  export type ChurchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * The filter to search for the Church to update in case it exists.
     */
    where: ChurchWhereUniqueInput
    /**
     * In case the Church found by the `where` argument doesn't exist, create a new Church with this data.
     */
    create: XOR<ChurchCreateInput, ChurchUncheckedCreateInput>
    /**
     * In case the Church was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchUpdateInput, ChurchUncheckedUpdateInput>
  }

  /**
   * Church delete
   */
  export type ChurchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter which Church to delete.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church deleteMany
   */
  export type ChurchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Churches to delete
     */
    where?: ChurchWhereInput
    /**
     * Limit how many Churches to delete.
     */
    limit?: number
  }

  /**
   * Church.batism
   */
  export type Church$batismArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    where?: BaptismWhereInput
    orderBy?: BaptismOrderByWithRelationInput | BaptismOrderByWithRelationInput[]
    cursor?: BaptismWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BaptismScalarFieldEnum | BaptismScalarFieldEnum[]
  }

  /**
   * Church.fullAddress
   */
  export type Church$fullAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * Church.mission
   */
  export type Church$missionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    where?: MissionWhereInput
  }

  /**
   * Church.tti
   */
  export type Church$ttiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tti
     */
    select?: TtiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tti
     */
    omit?: TtiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TtiInclude<ExtArgs> | null
    where?: TtiWhereInput
  }

  /**
   * Church.events
   */
  export type Church$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Church.funerals
   */
  export type Church$funeralsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    where?: FuneralWhereInput
    orderBy?: FuneralOrderByWithRelationInput | FuneralOrderByWithRelationInput[]
    cursor?: FuneralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FuneralScalarFieldEnum | FuneralScalarFieldEnum[]
  }

  /**
   * Church.groups
   */
  export type Church$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    where?: GroupeWhereInput
    orderBy?: GroupeOrderByWithRelationInput | GroupeOrderByWithRelationInput[]
    cursor?: GroupeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }

  /**
   * Church.mariages
   */
  export type Church$mariagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    where?: MariageWhereInput
    orderBy?: MariageOrderByWithRelationInput | MariageOrderByWithRelationInput[]
    cursor?: MariageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MariageScalarFieldEnum | MariageScalarFieldEnum[]
  }

  /**
   * Church.presentations
   */
  export type Church$presentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    where?: PresentationWhereInput
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    cursor?: PresentationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Church.services
   */
  export type Church$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Church.users
   */
  export type Church$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Church.appointments
   */
  export type Church$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    where?: appointmentWhereInput
    orderBy?: appointmentOrderByWithRelationInput | appointmentOrderByWithRelationInput[]
    cursor?: appointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Church.comitees
   */
  export type Church$comiteesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    where?: comiteeWhereInput
    orderBy?: comiteeOrderByWithRelationInput | comiteeOrderByWithRelationInput[]
    cursor?: comiteeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComiteeScalarFieldEnum | ComiteeScalarFieldEnum[]
  }

  /**
   * Church.death
   */
  export type Church$deathArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    where?: deathWhereInput
    orderBy?: deathOrderByWithRelationInput | deathOrderByWithRelationInput[]
    cursor?: deathWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeathScalarFieldEnum | DeathScalarFieldEnum[]
  }

  /**
   * Church.donation
   */
  export type Church$donationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    where?: donationWhereInput
    orderBy?: donationOrderByWithRelationInput | donationOrderByWithRelationInput[]
    cursor?: donationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DonationScalarFieldEnum | DonationScalarFieldEnum[]
  }

  /**
   * Church.expense
   */
  export type Church$expenseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    where?: expenseWhereInput
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    cursor?: expenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * Church.ministry
   */
  export type Church$ministryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    where?: ministryWhereInput
    orderBy?: ministryOrderByWithRelationInput | ministryOrderByWithRelationInput[]
    cursor?: ministryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * Church.moisson
   */
  export type Church$moissonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    where?: moissonWhereInput
    orderBy?: moissonOrderByWithRelationInput | moissonOrderByWithRelationInput[]
    cursor?: moissonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MoissonScalarFieldEnum | MoissonScalarFieldEnum[]
  }

  /**
   * Church.offering
   */
  export type Church$offeringArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    where?: offeringWhereInput
    orderBy?: offeringOrderByWithRelationInput | offeringOrderByWithRelationInput[]
    cursor?: offeringWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OfferingScalarFieldEnum | OfferingScalarFieldEnum[]
  }

  /**
   * Church.pasteur
   */
  export type Church$pasteurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    where?: pasteurWhereInput
    orderBy?: pasteurOrderByWithRelationInput | pasteurOrderByWithRelationInput[]
    cursor?: pasteurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasteurScalarFieldEnum | PasteurScalarFieldEnum[]
  }

  /**
   * Church.sanction
   */
  export type Church$sanctionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    where?: sanctionWhereInput
    orderBy?: sanctionOrderByWithRelationInput | sanctionOrderByWithRelationInput[]
    cursor?: sanctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SanctionScalarFieldEnum | SanctionScalarFieldEnum[]
  }

  /**
   * Church.sundayClass
   */
  export type Church$sundayClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    where?: sundayClassWhereInput
    orderBy?: sundayClassOrderByWithRelationInput | sundayClassOrderByWithRelationInput[]
    cursor?: sundayClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SundayClassScalarFieldEnum | SundayClassScalarFieldEnum[]
  }

  /**
   * Church.tithing
   */
  export type Church$tithingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    where?: tithingWhereInput
    orderBy?: tithingOrderByWithRelationInput | tithingOrderByWithRelationInput[]
    cursor?: tithingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TithingScalarFieldEnum | TithingScalarFieldEnum[]
  }

  /**
   * Church.transfersFrom
   */
  export type Church$transfersFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    where?: transfertWhereInput
    orderBy?: transfertOrderByWithRelationInput | transfertOrderByWithRelationInput[]
    cursor?: transfertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransfertScalarFieldEnum | TransfertScalarFieldEnum[]
  }

  /**
   * Church.transfersTo
   */
  export type Church$transfersToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    where?: transfertWhereInput
    orderBy?: transfertOrderByWithRelationInput | transfertOrderByWithRelationInput[]
    cursor?: transfertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransfertScalarFieldEnum | TransfertScalarFieldEnum[]
  }

  /**
   * Church without action
   */
  export type ChurchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    baptismDate: string | null
    baptismLocation: string | null
    birthCity: string | null
    birthCountry: string | null
    birthDate: string | null
    churchId: string | null
    churchRole: string | null
    city: string | null
    country: string | null
    envelopeNumber: string | null
    etatCivil: string | null
    facebook: string | null
    firstname: string | null
    instagram: string | null
    password: string | null
    picture: string | null
    profession: string | null
    role: $Enums.Role | null
    sex: string | null
    sundayClass: string | null
    lastname: string | null
    membreActif: boolean | null
    addressLine: string | null
    homePhone: string | null
    joinDate: string | null
    mobilePhone: string | null
    age: string | null
    minister: string | null
    plainPassword: string | null
    personToContact: string | null
    spouseFullName: string | null
    latitude: string | null
    longitude: string | null
    nif: string | null
    groupeSanguin: string | null
    istimothee: boolean | null
    timotheeId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    baptismDate: string | null
    baptismLocation: string | null
    birthCity: string | null
    birthCountry: string | null
    birthDate: string | null
    churchId: string | null
    churchRole: string | null
    city: string | null
    country: string | null
    envelopeNumber: string | null
    etatCivil: string | null
    facebook: string | null
    firstname: string | null
    instagram: string | null
    password: string | null
    picture: string | null
    profession: string | null
    role: $Enums.Role | null
    sex: string | null
    sundayClass: string | null
    lastname: string | null
    membreActif: boolean | null
    addressLine: string | null
    homePhone: string | null
    joinDate: string | null
    mobilePhone: string | null
    age: string | null
    minister: string | null
    plainPassword: string | null
    personToContact: string | null
    spouseFullName: string | null
    latitude: string | null
    longitude: string | null
    nif: string | null
    groupeSanguin: string | null
    istimothee: boolean | null
    timotheeId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    baptismDate: number
    baptismLocation: number
    birthCity: number
    birthCountry: number
    birthDate: number
    churchId: number
    churchRole: number
    city: number
    country: number
    envelopeNumber: number
    etatCivil: number
    facebook: number
    firstname: number
    instagram: number
    password: number
    picture: number
    profession: number
    role: number
    sex: number
    sundayClass: number
    lastname: number
    membreActif: number
    addressLine: number
    homePhone: number
    joinDate: number
    mobilePhone: number
    age: number
    minister: number
    plainPassword: number
    personToContact: number
    spouseFullName: number
    latitude: number
    longitude: number
    nif: number
    groupeSanguin: number
    istimothee: number
    timotheeId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    baptismDate?: true
    baptismLocation?: true
    birthCity?: true
    birthCountry?: true
    birthDate?: true
    churchId?: true
    churchRole?: true
    city?: true
    country?: true
    envelopeNumber?: true
    etatCivil?: true
    facebook?: true
    firstname?: true
    instagram?: true
    password?: true
    picture?: true
    profession?: true
    role?: true
    sex?: true
    sundayClass?: true
    lastname?: true
    membreActif?: true
    addressLine?: true
    homePhone?: true
    joinDate?: true
    mobilePhone?: true
    age?: true
    minister?: true
    plainPassword?: true
    personToContact?: true
    spouseFullName?: true
    latitude?: true
    longitude?: true
    nif?: true
    groupeSanguin?: true
    istimothee?: true
    timotheeId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    baptismDate?: true
    baptismLocation?: true
    birthCity?: true
    birthCountry?: true
    birthDate?: true
    churchId?: true
    churchRole?: true
    city?: true
    country?: true
    envelopeNumber?: true
    etatCivil?: true
    facebook?: true
    firstname?: true
    instagram?: true
    password?: true
    picture?: true
    profession?: true
    role?: true
    sex?: true
    sundayClass?: true
    lastname?: true
    membreActif?: true
    addressLine?: true
    homePhone?: true
    joinDate?: true
    mobilePhone?: true
    age?: true
    minister?: true
    plainPassword?: true
    personToContact?: true
    spouseFullName?: true
    latitude?: true
    longitude?: true
    nif?: true
    groupeSanguin?: true
    istimothee?: true
    timotheeId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    baptismDate?: true
    baptismLocation?: true
    birthCity?: true
    birthCountry?: true
    birthDate?: true
    churchId?: true
    churchRole?: true
    city?: true
    country?: true
    envelopeNumber?: true
    etatCivil?: true
    facebook?: true
    firstname?: true
    instagram?: true
    password?: true
    picture?: true
    profession?: true
    role?: true
    sex?: true
    sundayClass?: true
    lastname?: true
    membreActif?: true
    addressLine?: true
    homePhone?: true
    joinDate?: true
    mobilePhone?: true
    age?: true
    minister?: true
    plainPassword?: true
    personToContact?: true
    spouseFullName?: true
    latitude?: true
    longitude?: true
    nif?: true
    groupeSanguin?: true
    istimothee?: true
    timotheeId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    email: string | null
    baptismDate: string | null
    baptismLocation: string | null
    birthCity: string | null
    birthCountry: string | null
    birthDate: string | null
    churchId: string | null
    churchRole: string | null
    city: string | null
    country: string | null
    envelopeNumber: string | null
    etatCivil: string | null
    facebook: string | null
    firstname: string
    instagram: string | null
    password: string | null
    picture: string | null
    profession: string | null
    role: $Enums.Role
    sex: string | null
    sundayClass: string | null
    lastname: string
    membreActif: boolean
    addressLine: string | null
    homePhone: string | null
    joinDate: string | null
    mobilePhone: string | null
    age: string | null
    minister: string | null
    plainPassword: string | null
    personToContact: string | null
    spouseFullName: string | null
    latitude: string | null
    longitude: string | null
    nif: string | null
    groupeSanguin: string | null
    istimothee: boolean | null
    timotheeId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    baptismDate?: boolean
    baptismLocation?: boolean
    birthCity?: boolean
    birthCountry?: boolean
    birthDate?: boolean
    churchId?: boolean
    churchRole?: boolean
    city?: boolean
    country?: boolean
    envelopeNumber?: boolean
    etatCivil?: boolean
    facebook?: boolean
    firstname?: boolean
    instagram?: boolean
    password?: boolean
    picture?: boolean
    profession?: boolean
    role?: boolean
    sex?: boolean
    sundayClass?: boolean
    lastname?: boolean
    membreActif?: boolean
    addressLine?: boolean
    homePhone?: boolean
    joinDate?: boolean
    mobilePhone?: boolean
    age?: boolean
    minister?: boolean
    plainPassword?: boolean
    personToContact?: boolean
    spouseFullName?: boolean
    latitude?: boolean
    longitude?: boolean
    nif?: boolean
    groupeSanguin?: boolean
    istimothee?: boolean
    timotheeId?: boolean
    presences?: boolean | User$presencesArgs<ExtArgs>
    church?: boolean | User$churchArgs<ExtArgs>
    timothee?: boolean | User$timotheeArgs<ExtArgs>
    tithes?: boolean | User$tithesArgs<ExtArgs>
    transfers?: boolean | User$transfersArgs<ExtArgs>
    leadingComittees?: boolean | User$leadingComitteesArgs<ExtArgs>
    memberComittees?: boolean | User$memberComitteesArgs<ExtArgs>
    groups?: boolean | User$groupsArgs<ExtArgs>
    userAppointments?: boolean | User$userAppointmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    baptismDate?: boolean
    baptismLocation?: boolean
    birthCity?: boolean
    birthCountry?: boolean
    birthDate?: boolean
    churchId?: boolean
    churchRole?: boolean
    city?: boolean
    country?: boolean
    envelopeNumber?: boolean
    etatCivil?: boolean
    facebook?: boolean
    firstname?: boolean
    instagram?: boolean
    password?: boolean
    picture?: boolean
    profession?: boolean
    role?: boolean
    sex?: boolean
    sundayClass?: boolean
    lastname?: boolean
    membreActif?: boolean
    addressLine?: boolean
    homePhone?: boolean
    joinDate?: boolean
    mobilePhone?: boolean
    age?: boolean
    minister?: boolean
    plainPassword?: boolean
    personToContact?: boolean
    spouseFullName?: boolean
    latitude?: boolean
    longitude?: boolean
    nif?: boolean
    groupeSanguin?: boolean
    istimothee?: boolean
    timotheeId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "email" | "baptismDate" | "baptismLocation" | "birthCity" | "birthCountry" | "birthDate" | "churchId" | "churchRole" | "city" | "country" | "envelopeNumber" | "etatCivil" | "facebook" | "firstname" | "instagram" | "password" | "picture" | "profession" | "role" | "sex" | "sundayClass" | "lastname" | "membreActif" | "addressLine" | "homePhone" | "joinDate" | "mobilePhone" | "age" | "minister" | "plainPassword" | "personToContact" | "spouseFullName" | "latitude" | "longitude" | "nif" | "groupeSanguin" | "istimothee" | "timotheeId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presences?: boolean | User$presencesArgs<ExtArgs>
    church?: boolean | User$churchArgs<ExtArgs>
    timothee?: boolean | User$timotheeArgs<ExtArgs>
    tithes?: boolean | User$tithesArgs<ExtArgs>
    transfers?: boolean | User$transfersArgs<ExtArgs>
    leadingComittees?: boolean | User$leadingComitteesArgs<ExtArgs>
    memberComittees?: boolean | User$memberComitteesArgs<ExtArgs>
    groups?: boolean | User$groupsArgs<ExtArgs>
    userAppointments?: boolean | User$userAppointmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      presences: Prisma.$PresencePayload<ExtArgs>[]
      church: Prisma.$ChurchPayload<ExtArgs> | null
      timothee: Prisma.$UserPayload<ExtArgs> | null
      tithes: Prisma.$UserPayload<ExtArgs>[]
      transfers: Prisma.$transfertPayload<ExtArgs>[]
      leadingComittees: Prisma.$comiteePayload<ExtArgs>[]
      memberComittees: Prisma.$comiteePayload<ExtArgs>[]
      groups: Prisma.$GroupePayload<ExtArgs>[]
      userAppointments: Prisma.$appointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      email: string | null
      baptismDate: string | null
      baptismLocation: string | null
      birthCity: string | null
      birthCountry: string | null
      birthDate: string | null
      churchId: string | null
      churchRole: string | null
      city: string | null
      country: string | null
      envelopeNumber: string | null
      etatCivil: string | null
      facebook: string | null
      firstname: string
      instagram: string | null
      password: string | null
      picture: string | null
      profession: string | null
      role: $Enums.Role
      sex: string | null
      sundayClass: string | null
      lastname: string
      membreActif: boolean
      addressLine: string | null
      homePhone: string | null
      joinDate: string | null
      mobilePhone: string | null
      age: string | null
      minister: string | null
      plainPassword: string | null
      personToContact: string | null
      spouseFullName: string | null
      latitude: string | null
      longitude: string | null
      nif: string | null
      groupeSanguin: string | null
      istimothee: boolean | null
      timotheeId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    presences<T extends User$presencesArgs<ExtArgs> = {}>(args?: Subset<T, User$presencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    church<T extends User$churchArgs<ExtArgs> = {}>(args?: Subset<T, User$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    timothee<T extends User$timotheeArgs<ExtArgs> = {}>(args?: Subset<T, User$timotheeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tithes<T extends User$tithesArgs<ExtArgs> = {}>(args?: Subset<T, User$tithesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transfers<T extends User$transfersArgs<ExtArgs> = {}>(args?: Subset<T, User$transfersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leadingComittees<T extends User$leadingComitteesArgs<ExtArgs> = {}>(args?: Subset<T, User$leadingComitteesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    memberComittees<T extends User$memberComitteesArgs<ExtArgs> = {}>(args?: Subset<T, User$memberComitteesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    groups<T extends User$groupsArgs<ExtArgs> = {}>(args?: Subset<T, User$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAppointments<T extends User$userAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$userAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
    readonly baptismDate: FieldRef<"User", 'String'>
    readonly baptismLocation: FieldRef<"User", 'String'>
    readonly birthCity: FieldRef<"User", 'String'>
    readonly birthCountry: FieldRef<"User", 'String'>
    readonly birthDate: FieldRef<"User", 'String'>
    readonly churchId: FieldRef<"User", 'String'>
    readonly churchRole: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly country: FieldRef<"User", 'String'>
    readonly envelopeNumber: FieldRef<"User", 'String'>
    readonly etatCivil: FieldRef<"User", 'String'>
    readonly facebook: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly instagram: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly picture: FieldRef<"User", 'String'>
    readonly profession: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly sex: FieldRef<"User", 'String'>
    readonly sundayClass: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly membreActif: FieldRef<"User", 'Boolean'>
    readonly addressLine: FieldRef<"User", 'String'>
    readonly homePhone: FieldRef<"User", 'String'>
    readonly joinDate: FieldRef<"User", 'String'>
    readonly mobilePhone: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'String'>
    readonly minister: FieldRef<"User", 'String'>
    readonly plainPassword: FieldRef<"User", 'String'>
    readonly personToContact: FieldRef<"User", 'String'>
    readonly spouseFullName: FieldRef<"User", 'String'>
    readonly latitude: FieldRef<"User", 'String'>
    readonly longitude: FieldRef<"User", 'String'>
    readonly nif: FieldRef<"User", 'String'>
    readonly groupeSanguin: FieldRef<"User", 'String'>
    readonly istimothee: FieldRef<"User", 'Boolean'>
    readonly timotheeId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.presences
   */
  export type User$presencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    cursor?: PresenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * User.church
   */
  export type User$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * User.timothee
   */
  export type User$timotheeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.tithes
   */
  export type User$tithesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.transfers
   */
  export type User$transfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    where?: transfertWhereInput
    orderBy?: transfertOrderByWithRelationInput | transfertOrderByWithRelationInput[]
    cursor?: transfertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransfertScalarFieldEnum | TransfertScalarFieldEnum[]
  }

  /**
   * User.leadingComittees
   */
  export type User$leadingComitteesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    where?: comiteeWhereInput
    orderBy?: comiteeOrderByWithRelationInput | comiteeOrderByWithRelationInput[]
    cursor?: comiteeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComiteeScalarFieldEnum | ComiteeScalarFieldEnum[]
  }

  /**
   * User.memberComittees
   */
  export type User$memberComitteesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    where?: comiteeWhereInput
    orderBy?: comiteeOrderByWithRelationInput | comiteeOrderByWithRelationInput[]
    cursor?: comiteeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComiteeScalarFieldEnum | ComiteeScalarFieldEnum[]
  }

  /**
   * User.groups
   */
  export type User$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    where?: GroupeWhereInput
    orderBy?: GroupeOrderByWithRelationInput | GroupeOrderByWithRelationInput[]
    cursor?: GroupeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }

  /**
   * User.userAppointments
   */
  export type User$userAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    where?: appointmentWhereInput
    orderBy?: appointmentOrderByWithRelationInput | appointmentOrderByWithRelationInput[]
    cursor?: appointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Groupe
   */

  export type AggregateGroupe = {
    _count: GroupeCountAggregateOutputType | null
    _min: GroupeMinAggregateOutputType | null
    _max: GroupeMaxAggregateOutputType | null
  }

  export type GroupeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    picture: string | null
    showToMembers: boolean | null
    showToNonMembers: boolean | null
    showMembers: boolean | null
    showLeaders: boolean | null
    meetingDays: string | null
    meetingTime: string | null
    meetingLocation: string | null
    meetingFrequency: string | null
    maxMembers: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ageGroup: string | null
    minister: string | null
  }

  export type GroupeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    picture: string | null
    showToMembers: boolean | null
    showToNonMembers: boolean | null
    showMembers: boolean | null
    showLeaders: boolean | null
    meetingDays: string | null
    meetingTime: string | null
    meetingLocation: string | null
    meetingFrequency: string | null
    maxMembers: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ageGroup: string | null
    minister: string | null
  }

  export type GroupeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    picture: number
    showToMembers: number
    showToNonMembers: number
    showMembers: number
    showLeaders: number
    meetingDays: number
    meetingTime: number
    meetingLocation: number
    meetingFrequency: number
    maxMembers: number
    churchId: number
    createdAt: number
    updatedAt: number
    ageGroup: number
    minister: number
    _all: number
  }


  export type GroupeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    picture?: true
    showToMembers?: true
    showToNonMembers?: true
    showMembers?: true
    showLeaders?: true
    meetingDays?: true
    meetingTime?: true
    meetingLocation?: true
    meetingFrequency?: true
    maxMembers?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    ageGroup?: true
    minister?: true
  }

  export type GroupeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    picture?: true
    showToMembers?: true
    showToNonMembers?: true
    showMembers?: true
    showLeaders?: true
    meetingDays?: true
    meetingTime?: true
    meetingLocation?: true
    meetingFrequency?: true
    maxMembers?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    ageGroup?: true
    minister?: true
  }

  export type GroupeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    picture?: true
    showToMembers?: true
    showToNonMembers?: true
    showMembers?: true
    showLeaders?: true
    meetingDays?: true
    meetingTime?: true
    meetingLocation?: true
    meetingFrequency?: true
    maxMembers?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    ageGroup?: true
    minister?: true
    _all?: true
  }

  export type GroupeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groupe to aggregate.
     */
    where?: GroupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groupes to fetch.
     */
    orderBy?: GroupeOrderByWithRelationInput | GroupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groupes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groupes
    **/
    _count?: true | GroupeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupeMaxAggregateInputType
  }

  export type GetGroupeAggregateType<T extends GroupeAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupe[P]>
      : GetScalarType<T[P], AggregateGroupe[P]>
  }




  export type GroupeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupeWhereInput
    orderBy?: GroupeOrderByWithAggregationInput | GroupeOrderByWithAggregationInput[]
    by: GroupeScalarFieldEnum[] | GroupeScalarFieldEnum
    having?: GroupeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupeCountAggregateInputType | true
    _min?: GroupeMinAggregateInputType
    _max?: GroupeMaxAggregateInputType
  }

  export type GroupeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    picture: string | null
    showToMembers: boolean | null
    showToNonMembers: boolean | null
    showMembers: boolean | null
    showLeaders: boolean | null
    meetingDays: string | null
    meetingTime: string | null
    meetingLocation: string | null
    meetingFrequency: string | null
    maxMembers: string | null
    churchId: string | null
    createdAt: Date
    updatedAt: Date
    ageGroup: string | null
    minister: string | null
    _count: GroupeCountAggregateOutputType | null
    _min: GroupeMinAggregateOutputType | null
    _max: GroupeMaxAggregateOutputType | null
  }

  type GetGroupeGroupByPayload<T extends GroupeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupeGroupByOutputType[P]>
            : GetScalarType<T[P], GroupeGroupByOutputType[P]>
        }
      >
    >


  export type GroupeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    picture?: boolean
    showToMembers?: boolean
    showToNonMembers?: boolean
    showMembers?: boolean
    showLeaders?: boolean
    meetingDays?: boolean
    meetingTime?: boolean
    meetingLocation?: boolean
    meetingFrequency?: boolean
    maxMembers?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ageGroup?: boolean
    minister?: boolean
    church?: boolean | Groupe$churchArgs<ExtArgs>
    users?: boolean | Groupe$usersArgs<ExtArgs>
    _count?: boolean | GroupeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupe"]>



  export type GroupeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    picture?: boolean
    showToMembers?: boolean
    showToNonMembers?: boolean
    showMembers?: boolean
    showLeaders?: boolean
    meetingDays?: boolean
    meetingTime?: boolean
    meetingLocation?: boolean
    meetingFrequency?: boolean
    maxMembers?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ageGroup?: boolean
    minister?: boolean
  }

  export type GroupeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "picture" | "showToMembers" | "showToNonMembers" | "showMembers" | "showLeaders" | "meetingDays" | "meetingTime" | "meetingLocation" | "meetingFrequency" | "maxMembers" | "churchId" | "createdAt" | "updatedAt" | "ageGroup" | "minister", ExtArgs["result"]["groupe"]>
  export type GroupeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Groupe$churchArgs<ExtArgs>
    users?: boolean | Groupe$usersArgs<ExtArgs>
    _count?: boolean | GroupeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GroupePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Groupe"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      picture: string | null
      showToMembers: boolean | null
      showToNonMembers: boolean | null
      showMembers: boolean | null
      showLeaders: boolean | null
      meetingDays: string | null
      meetingTime: string | null
      meetingLocation: string | null
      meetingFrequency: string | null
      maxMembers: string | null
      churchId: string | null
      createdAt: Date
      updatedAt: Date
      ageGroup: string | null
      minister: string | null
    }, ExtArgs["result"]["groupe"]>
    composites: {}
  }

  type GroupeGetPayload<S extends boolean | null | undefined | GroupeDefaultArgs> = $Result.GetResult<Prisma.$GroupePayload, S>

  type GroupeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupeCountAggregateInputType | true
    }

  export interface GroupeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Groupe'], meta: { name: 'Groupe' } }
    /**
     * Find zero or one Groupe that matches the filter.
     * @param {GroupeFindUniqueArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupeFindUniqueArgs>(args: SelectSubset<T, GroupeFindUniqueArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Groupe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupeFindUniqueOrThrowArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupeFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Groupe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeFindFirstArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupeFindFirstArgs>(args?: SelectSubset<T, GroupeFindFirstArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Groupe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeFindFirstOrThrowArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupeFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Groupes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groupes
     * const groupes = await prisma.groupe.findMany()
     * 
     * // Get first 10 Groupes
     * const groupes = await prisma.groupe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupeWithIdOnly = await prisma.groupe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupeFindManyArgs>(args?: SelectSubset<T, GroupeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Groupe.
     * @param {GroupeCreateArgs} args - Arguments to create a Groupe.
     * @example
     * // Create one Groupe
     * const Groupe = await prisma.groupe.create({
     *   data: {
     *     // ... data to create a Groupe
     *   }
     * })
     * 
     */
    create<T extends GroupeCreateArgs>(args: SelectSubset<T, GroupeCreateArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Groupes.
     * @param {GroupeCreateManyArgs} args - Arguments to create many Groupes.
     * @example
     * // Create many Groupes
     * const groupe = await prisma.groupe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupeCreateManyArgs>(args?: SelectSubset<T, GroupeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Groupe.
     * @param {GroupeDeleteArgs} args - Arguments to delete one Groupe.
     * @example
     * // Delete one Groupe
     * const Groupe = await prisma.groupe.delete({
     *   where: {
     *     // ... filter to delete one Groupe
     *   }
     * })
     * 
     */
    delete<T extends GroupeDeleteArgs>(args: SelectSubset<T, GroupeDeleteArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Groupe.
     * @param {GroupeUpdateArgs} args - Arguments to update one Groupe.
     * @example
     * // Update one Groupe
     * const groupe = await prisma.groupe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupeUpdateArgs>(args: SelectSubset<T, GroupeUpdateArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Groupes.
     * @param {GroupeDeleteManyArgs} args - Arguments to filter Groupes to delete.
     * @example
     * // Delete a few Groupes
     * const { count } = await prisma.groupe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupeDeleteManyArgs>(args?: SelectSubset<T, GroupeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groupes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groupes
     * const groupe = await prisma.groupe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupeUpdateManyArgs>(args: SelectSubset<T, GroupeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Groupe.
     * @param {GroupeUpsertArgs} args - Arguments to update or create a Groupe.
     * @example
     * // Update or create a Groupe
     * const groupe = await prisma.groupe.upsert({
     *   create: {
     *     // ... data to create a Groupe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groupe we want to update
     *   }
     * })
     */
    upsert<T extends GroupeUpsertArgs>(args: SelectSubset<T, GroupeUpsertArgs<ExtArgs>>): Prisma__GroupeClient<$Result.GetResult<Prisma.$GroupePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Groupes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeCountArgs} args - Arguments to filter Groupes to count.
     * @example
     * // Count the number of Groupes
     * const count = await prisma.groupe.count({
     *   where: {
     *     // ... the filter for the Groupes we want to count
     *   }
     * })
    **/
    count<T extends GroupeCountArgs>(
      args?: Subset<T, GroupeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groupe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupeAggregateArgs>(args: Subset<T, GroupeAggregateArgs>): Prisma.PrismaPromise<GetGroupeAggregateType<T>>

    /**
     * Group by Groupe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupeGroupByArgs['orderBy'] }
        : { orderBy?: GroupeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Groupe model
   */
  readonly fields: GroupeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Groupe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Groupe$churchArgs<ExtArgs> = {}>(args?: Subset<T, Groupe$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends Groupe$usersArgs<ExtArgs> = {}>(args?: Subset<T, Groupe$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Groupe model
   */
  interface GroupeFieldRefs {
    readonly id: FieldRef<"Groupe", 'String'>
    readonly name: FieldRef<"Groupe", 'String'>
    readonly description: FieldRef<"Groupe", 'String'>
    readonly picture: FieldRef<"Groupe", 'String'>
    readonly showToMembers: FieldRef<"Groupe", 'Boolean'>
    readonly showToNonMembers: FieldRef<"Groupe", 'Boolean'>
    readonly showMembers: FieldRef<"Groupe", 'Boolean'>
    readonly showLeaders: FieldRef<"Groupe", 'Boolean'>
    readonly meetingDays: FieldRef<"Groupe", 'String'>
    readonly meetingTime: FieldRef<"Groupe", 'String'>
    readonly meetingLocation: FieldRef<"Groupe", 'String'>
    readonly meetingFrequency: FieldRef<"Groupe", 'String'>
    readonly maxMembers: FieldRef<"Groupe", 'String'>
    readonly churchId: FieldRef<"Groupe", 'String'>
    readonly createdAt: FieldRef<"Groupe", 'DateTime'>
    readonly updatedAt: FieldRef<"Groupe", 'DateTime'>
    readonly ageGroup: FieldRef<"Groupe", 'String'>
    readonly minister: FieldRef<"Groupe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Groupe findUnique
   */
  export type GroupeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * Filter, which Groupe to fetch.
     */
    where: GroupeWhereUniqueInput
  }

  /**
   * Groupe findUniqueOrThrow
   */
  export type GroupeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * Filter, which Groupe to fetch.
     */
    where: GroupeWhereUniqueInput
  }

  /**
   * Groupe findFirst
   */
  export type GroupeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * Filter, which Groupe to fetch.
     */
    where?: GroupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groupes to fetch.
     */
    orderBy?: GroupeOrderByWithRelationInput | GroupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groupes.
     */
    cursor?: GroupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groupes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groupes.
     */
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }

  /**
   * Groupe findFirstOrThrow
   */
  export type GroupeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * Filter, which Groupe to fetch.
     */
    where?: GroupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groupes to fetch.
     */
    orderBy?: GroupeOrderByWithRelationInput | GroupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groupes.
     */
    cursor?: GroupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groupes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groupes.
     */
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }

  /**
   * Groupe findMany
   */
  export type GroupeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * Filter, which Groupes to fetch.
     */
    where?: GroupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groupes to fetch.
     */
    orderBy?: GroupeOrderByWithRelationInput | GroupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groupes.
     */
    cursor?: GroupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groupes.
     */
    skip?: number
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }

  /**
   * Groupe create
   */
  export type GroupeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * The data needed to create a Groupe.
     */
    data: XOR<GroupeCreateInput, GroupeUncheckedCreateInput>
  }

  /**
   * Groupe createMany
   */
  export type GroupeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groupes.
     */
    data: GroupeCreateManyInput | GroupeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Groupe update
   */
  export type GroupeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * The data needed to update a Groupe.
     */
    data: XOR<GroupeUpdateInput, GroupeUncheckedUpdateInput>
    /**
     * Choose, which Groupe to update.
     */
    where: GroupeWhereUniqueInput
  }

  /**
   * Groupe updateMany
   */
  export type GroupeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groupes.
     */
    data: XOR<GroupeUpdateManyMutationInput, GroupeUncheckedUpdateManyInput>
    /**
     * Filter which Groupes to update
     */
    where?: GroupeWhereInput
    /**
     * Limit how many Groupes to update.
     */
    limit?: number
  }

  /**
   * Groupe upsert
   */
  export type GroupeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * The filter to search for the Groupe to update in case it exists.
     */
    where: GroupeWhereUniqueInput
    /**
     * In case the Groupe found by the `where` argument doesn't exist, create a new Groupe with this data.
     */
    create: XOR<GroupeCreateInput, GroupeUncheckedCreateInput>
    /**
     * In case the Groupe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupeUpdateInput, GroupeUncheckedUpdateInput>
  }

  /**
   * Groupe delete
   */
  export type GroupeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
    /**
     * Filter which Groupe to delete.
     */
    where: GroupeWhereUniqueInput
  }

  /**
   * Groupe deleteMany
   */
  export type GroupeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groupes to delete
     */
    where?: GroupeWhereInput
    /**
     * Limit how many Groupes to delete.
     */
    limit?: number
  }

  /**
   * Groupe.church
   */
  export type Groupe$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Groupe.users
   */
  export type Groupe$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Groupe without action
   */
  export type GroupeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Groupe
     */
    select?: GroupeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Groupe
     */
    omit?: GroupeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupeInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    frequency: string | null
    startDate: string | null
    endDate: string | null
    churchId: string | null
    createAt: Date | null
    updateAt: Date | null
    isRecurring: boolean | null
    endPeriode: string | null
    startPeriode: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    frequency: string | null
    startDate: string | null
    endDate: string | null
    churchId: string | null
    createAt: Date | null
    updateAt: Date | null
    isRecurring: boolean | null
    endPeriode: string | null
    startPeriode: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    location: number
    frequency: number
    startDate: number
    endDate: number
    churchId: number
    createAt: number
    updateAt: number
    isRecurring: number
    endPeriode: number
    startPeriode: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    frequency?: true
    startDate?: true
    endDate?: true
    churchId?: true
    createAt?: true
    updateAt?: true
    isRecurring?: true
    endPeriode?: true
    startPeriode?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    frequency?: true
    startDate?: true
    endDate?: true
    churchId?: true
    createAt?: true
    updateAt?: true
    isRecurring?: true
    endPeriode?: true
    startPeriode?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    frequency?: true
    startDate?: true
    endDate?: true
    churchId?: true
    createAt?: true
    updateAt?: true
    isRecurring?: true
    endPeriode?: true
    startPeriode?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    description: string | null
    location: string | null
    frequency: string
    startDate: string
    endDate: string
    churchId: string | null
    createAt: Date
    updateAt: Date
    isRecurring: boolean
    endPeriode: string | null
    startPeriode: string | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    frequency?: boolean
    startDate?: boolean
    endDate?: boolean
    churchId?: boolean
    createAt?: boolean
    updateAt?: boolean
    isRecurring?: boolean
    endPeriode?: boolean
    startPeriode?: boolean
    church?: boolean | Event$churchArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>



  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    frequency?: boolean
    startDate?: boolean
    endDate?: boolean
    churchId?: boolean
    createAt?: boolean
    updateAt?: boolean
    isRecurring?: boolean
    endPeriode?: boolean
    startPeriode?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "location" | "frequency" | "startDate" | "endDate" | "churchId" | "createAt" | "updateAt" | "isRecurring" | "endPeriode" | "startPeriode", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Event$churchArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      location: string | null
      frequency: string
      startDate: string
      endDate: string
      churchId: string | null
      createAt: Date
      updateAt: Date
      isRecurring: boolean
      endPeriode: string | null
      startPeriode: string | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Event$churchArgs<ExtArgs> = {}>(args?: Subset<T, Event$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly location: FieldRef<"Event", 'String'>
    readonly frequency: FieldRef<"Event", 'String'>
    readonly startDate: FieldRef<"Event", 'String'>
    readonly endDate: FieldRef<"Event", 'String'>
    readonly churchId: FieldRef<"Event", 'String'>
    readonly createAt: FieldRef<"Event", 'DateTime'>
    readonly updateAt: FieldRef<"Event", 'DateTime'>
    readonly isRecurring: FieldRef<"Event", 'Boolean'>
    readonly endPeriode: FieldRef<"Event", 'String'>
    readonly startPeriode: FieldRef<"Event", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.church
   */
  export type Event$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Mariage
   */

  export type AggregateMariage = {
    _count: MariageCountAggregateOutputType | null
    _min: MariageMinAggregateOutputType | null
    _max: MariageMaxAggregateOutputType | null
  }

  export type MariageMinAggregateOutputType = {
    id: string | null
    brideFullname: string | null
    birthDate: Date | null
    groomFullname: string | null
    goomBirthDate: Date | null
    weddingDate: Date | null
    weddingLocation: string | null
    weddingCertificate: string | null
    officiantName: string | null
    churchId: string | null
    brideCertificate: string | null
    civilStateOfficer: string | null
    grooomCertificate: string | null
    witness: string | null
    civilStateStateOfficer: string | null
    witnessSignature: string | null
  }

  export type MariageMaxAggregateOutputType = {
    id: string | null
    brideFullname: string | null
    birthDate: Date | null
    groomFullname: string | null
    goomBirthDate: Date | null
    weddingDate: Date | null
    weddingLocation: string | null
    weddingCertificate: string | null
    officiantName: string | null
    churchId: string | null
    brideCertificate: string | null
    civilStateOfficer: string | null
    grooomCertificate: string | null
    witness: string | null
    civilStateStateOfficer: string | null
    witnessSignature: string | null
  }

  export type MariageCountAggregateOutputType = {
    id: number
    brideFullname: number
    birthDate: number
    groomFullname: number
    goomBirthDate: number
    weddingDate: number
    weddingLocation: number
    weddingCertificate: number
    officiantName: number
    churchId: number
    brideCertificate: number
    civilStateOfficer: number
    grooomCertificate: number
    witness: number
    civilStateStateOfficer: number
    witnessSignature: number
    _all: number
  }


  export type MariageMinAggregateInputType = {
    id?: true
    brideFullname?: true
    birthDate?: true
    groomFullname?: true
    goomBirthDate?: true
    weddingDate?: true
    weddingLocation?: true
    weddingCertificate?: true
    officiantName?: true
    churchId?: true
    brideCertificate?: true
    civilStateOfficer?: true
    grooomCertificate?: true
    witness?: true
    civilStateStateOfficer?: true
    witnessSignature?: true
  }

  export type MariageMaxAggregateInputType = {
    id?: true
    brideFullname?: true
    birthDate?: true
    groomFullname?: true
    goomBirthDate?: true
    weddingDate?: true
    weddingLocation?: true
    weddingCertificate?: true
    officiantName?: true
    churchId?: true
    brideCertificate?: true
    civilStateOfficer?: true
    grooomCertificate?: true
    witness?: true
    civilStateStateOfficer?: true
    witnessSignature?: true
  }

  export type MariageCountAggregateInputType = {
    id?: true
    brideFullname?: true
    birthDate?: true
    groomFullname?: true
    goomBirthDate?: true
    weddingDate?: true
    weddingLocation?: true
    weddingCertificate?: true
    officiantName?: true
    churchId?: true
    brideCertificate?: true
    civilStateOfficer?: true
    grooomCertificate?: true
    witness?: true
    civilStateStateOfficer?: true
    witnessSignature?: true
    _all?: true
  }

  export type MariageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mariage to aggregate.
     */
    where?: MariageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mariages to fetch.
     */
    orderBy?: MariageOrderByWithRelationInput | MariageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MariageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mariages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mariages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mariages
    **/
    _count?: true | MariageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MariageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MariageMaxAggregateInputType
  }

  export type GetMariageAggregateType<T extends MariageAggregateArgs> = {
        [P in keyof T & keyof AggregateMariage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMariage[P]>
      : GetScalarType<T[P], AggregateMariage[P]>
  }




  export type MariageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MariageWhereInput
    orderBy?: MariageOrderByWithAggregationInput | MariageOrderByWithAggregationInput[]
    by: MariageScalarFieldEnum[] | MariageScalarFieldEnum
    having?: MariageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MariageCountAggregateInputType | true
    _min?: MariageMinAggregateInputType
    _max?: MariageMaxAggregateInputType
  }

  export type MariageGroupByOutputType = {
    id: string
    brideFullname: string
    birthDate: Date
    groomFullname: string
    goomBirthDate: Date
    weddingDate: Date
    weddingLocation: string
    weddingCertificate: string | null
    officiantName: string
    churchId: string | null
    brideCertificate: string | null
    civilStateOfficer: string | null
    grooomCertificate: string | null
    witness: string | null
    civilStateStateOfficer: string | null
    witnessSignature: string | null
    _count: MariageCountAggregateOutputType | null
    _min: MariageMinAggregateOutputType | null
    _max: MariageMaxAggregateOutputType | null
  }

  type GetMariageGroupByPayload<T extends MariageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MariageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MariageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MariageGroupByOutputType[P]>
            : GetScalarType<T[P], MariageGroupByOutputType[P]>
        }
      >
    >


  export type MariageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brideFullname?: boolean
    birthDate?: boolean
    groomFullname?: boolean
    goomBirthDate?: boolean
    weddingDate?: boolean
    weddingLocation?: boolean
    weddingCertificate?: boolean
    officiantName?: boolean
    churchId?: boolean
    brideCertificate?: boolean
    civilStateOfficer?: boolean
    grooomCertificate?: boolean
    witness?: boolean
    civilStateStateOfficer?: boolean
    witnessSignature?: boolean
    church?: boolean | Mariage$churchArgs<ExtArgs>
  }, ExtArgs["result"]["mariage"]>



  export type MariageSelectScalar = {
    id?: boolean
    brideFullname?: boolean
    birthDate?: boolean
    groomFullname?: boolean
    goomBirthDate?: boolean
    weddingDate?: boolean
    weddingLocation?: boolean
    weddingCertificate?: boolean
    officiantName?: boolean
    churchId?: boolean
    brideCertificate?: boolean
    civilStateOfficer?: boolean
    grooomCertificate?: boolean
    witness?: boolean
    civilStateStateOfficer?: boolean
    witnessSignature?: boolean
  }

  export type MariageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "brideFullname" | "birthDate" | "groomFullname" | "goomBirthDate" | "weddingDate" | "weddingLocation" | "weddingCertificate" | "officiantName" | "churchId" | "brideCertificate" | "civilStateOfficer" | "grooomCertificate" | "witness" | "civilStateStateOfficer" | "witnessSignature", ExtArgs["result"]["mariage"]>
  export type MariageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Mariage$churchArgs<ExtArgs>
  }

  export type $MariagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mariage"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      brideFullname: string
      birthDate: Date
      groomFullname: string
      goomBirthDate: Date
      weddingDate: Date
      weddingLocation: string
      weddingCertificate: string | null
      officiantName: string
      churchId: string | null
      brideCertificate: string | null
      civilStateOfficer: string | null
      grooomCertificate: string | null
      witness: string | null
      civilStateStateOfficer: string | null
      witnessSignature: string | null
    }, ExtArgs["result"]["mariage"]>
    composites: {}
  }

  type MariageGetPayload<S extends boolean | null | undefined | MariageDefaultArgs> = $Result.GetResult<Prisma.$MariagePayload, S>

  type MariageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MariageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MariageCountAggregateInputType | true
    }

  export interface MariageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mariage'], meta: { name: 'Mariage' } }
    /**
     * Find zero or one Mariage that matches the filter.
     * @param {MariageFindUniqueArgs} args - Arguments to find a Mariage
     * @example
     * // Get one Mariage
     * const mariage = await prisma.mariage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MariageFindUniqueArgs>(args: SelectSubset<T, MariageFindUniqueArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mariage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MariageFindUniqueOrThrowArgs} args - Arguments to find a Mariage
     * @example
     * // Get one Mariage
     * const mariage = await prisma.mariage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MariageFindUniqueOrThrowArgs>(args: SelectSubset<T, MariageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mariage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MariageFindFirstArgs} args - Arguments to find a Mariage
     * @example
     * // Get one Mariage
     * const mariage = await prisma.mariage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MariageFindFirstArgs>(args?: SelectSubset<T, MariageFindFirstArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mariage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MariageFindFirstOrThrowArgs} args - Arguments to find a Mariage
     * @example
     * // Get one Mariage
     * const mariage = await prisma.mariage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MariageFindFirstOrThrowArgs>(args?: SelectSubset<T, MariageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Mariages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MariageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mariages
     * const mariages = await prisma.mariage.findMany()
     * 
     * // Get first 10 Mariages
     * const mariages = await prisma.mariage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mariageWithIdOnly = await prisma.mariage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MariageFindManyArgs>(args?: SelectSubset<T, MariageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mariage.
     * @param {MariageCreateArgs} args - Arguments to create a Mariage.
     * @example
     * // Create one Mariage
     * const Mariage = await prisma.mariage.create({
     *   data: {
     *     // ... data to create a Mariage
     *   }
     * })
     * 
     */
    create<T extends MariageCreateArgs>(args: SelectSubset<T, MariageCreateArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Mariages.
     * @param {MariageCreateManyArgs} args - Arguments to create many Mariages.
     * @example
     * // Create many Mariages
     * const mariage = await prisma.mariage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MariageCreateManyArgs>(args?: SelectSubset<T, MariageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mariage.
     * @param {MariageDeleteArgs} args - Arguments to delete one Mariage.
     * @example
     * // Delete one Mariage
     * const Mariage = await prisma.mariage.delete({
     *   where: {
     *     // ... filter to delete one Mariage
     *   }
     * })
     * 
     */
    delete<T extends MariageDeleteArgs>(args: SelectSubset<T, MariageDeleteArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mariage.
     * @param {MariageUpdateArgs} args - Arguments to update one Mariage.
     * @example
     * // Update one Mariage
     * const mariage = await prisma.mariage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MariageUpdateArgs>(args: SelectSubset<T, MariageUpdateArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Mariages.
     * @param {MariageDeleteManyArgs} args - Arguments to filter Mariages to delete.
     * @example
     * // Delete a few Mariages
     * const { count } = await prisma.mariage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MariageDeleteManyArgs>(args?: SelectSubset<T, MariageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mariages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MariageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mariages
     * const mariage = await prisma.mariage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MariageUpdateManyArgs>(args: SelectSubset<T, MariageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mariage.
     * @param {MariageUpsertArgs} args - Arguments to update or create a Mariage.
     * @example
     * // Update or create a Mariage
     * const mariage = await prisma.mariage.upsert({
     *   create: {
     *     // ... data to create a Mariage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mariage we want to update
     *   }
     * })
     */
    upsert<T extends MariageUpsertArgs>(args: SelectSubset<T, MariageUpsertArgs<ExtArgs>>): Prisma__MariageClient<$Result.GetResult<Prisma.$MariagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Mariages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MariageCountArgs} args - Arguments to filter Mariages to count.
     * @example
     * // Count the number of Mariages
     * const count = await prisma.mariage.count({
     *   where: {
     *     // ... the filter for the Mariages we want to count
     *   }
     * })
    **/
    count<T extends MariageCountArgs>(
      args?: Subset<T, MariageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MariageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mariage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MariageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MariageAggregateArgs>(args: Subset<T, MariageAggregateArgs>): Prisma.PrismaPromise<GetMariageAggregateType<T>>

    /**
     * Group by Mariage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MariageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MariageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MariageGroupByArgs['orderBy'] }
        : { orderBy?: MariageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MariageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMariageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mariage model
   */
  readonly fields: MariageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mariage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MariageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Mariage$churchArgs<ExtArgs> = {}>(args?: Subset<T, Mariage$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mariage model
   */
  interface MariageFieldRefs {
    readonly id: FieldRef<"Mariage", 'String'>
    readonly brideFullname: FieldRef<"Mariage", 'String'>
    readonly birthDate: FieldRef<"Mariage", 'DateTime'>
    readonly groomFullname: FieldRef<"Mariage", 'String'>
    readonly goomBirthDate: FieldRef<"Mariage", 'DateTime'>
    readonly weddingDate: FieldRef<"Mariage", 'DateTime'>
    readonly weddingLocation: FieldRef<"Mariage", 'String'>
    readonly weddingCertificate: FieldRef<"Mariage", 'String'>
    readonly officiantName: FieldRef<"Mariage", 'String'>
    readonly churchId: FieldRef<"Mariage", 'String'>
    readonly brideCertificate: FieldRef<"Mariage", 'String'>
    readonly civilStateOfficer: FieldRef<"Mariage", 'String'>
    readonly grooomCertificate: FieldRef<"Mariage", 'String'>
    readonly witness: FieldRef<"Mariage", 'String'>
    readonly civilStateStateOfficer: FieldRef<"Mariage", 'String'>
    readonly witnessSignature: FieldRef<"Mariage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Mariage findUnique
   */
  export type MariageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * Filter, which Mariage to fetch.
     */
    where: MariageWhereUniqueInput
  }

  /**
   * Mariage findUniqueOrThrow
   */
  export type MariageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * Filter, which Mariage to fetch.
     */
    where: MariageWhereUniqueInput
  }

  /**
   * Mariage findFirst
   */
  export type MariageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * Filter, which Mariage to fetch.
     */
    where?: MariageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mariages to fetch.
     */
    orderBy?: MariageOrderByWithRelationInput | MariageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mariages.
     */
    cursor?: MariageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mariages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mariages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mariages.
     */
    distinct?: MariageScalarFieldEnum | MariageScalarFieldEnum[]
  }

  /**
   * Mariage findFirstOrThrow
   */
  export type MariageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * Filter, which Mariage to fetch.
     */
    where?: MariageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mariages to fetch.
     */
    orderBy?: MariageOrderByWithRelationInput | MariageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mariages.
     */
    cursor?: MariageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mariages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mariages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mariages.
     */
    distinct?: MariageScalarFieldEnum | MariageScalarFieldEnum[]
  }

  /**
   * Mariage findMany
   */
  export type MariageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * Filter, which Mariages to fetch.
     */
    where?: MariageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mariages to fetch.
     */
    orderBy?: MariageOrderByWithRelationInput | MariageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mariages.
     */
    cursor?: MariageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mariages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mariages.
     */
    skip?: number
    distinct?: MariageScalarFieldEnum | MariageScalarFieldEnum[]
  }

  /**
   * Mariage create
   */
  export type MariageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * The data needed to create a Mariage.
     */
    data: XOR<MariageCreateInput, MariageUncheckedCreateInput>
  }

  /**
   * Mariage createMany
   */
  export type MariageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mariages.
     */
    data: MariageCreateManyInput | MariageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mariage update
   */
  export type MariageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * The data needed to update a Mariage.
     */
    data: XOR<MariageUpdateInput, MariageUncheckedUpdateInput>
    /**
     * Choose, which Mariage to update.
     */
    where: MariageWhereUniqueInput
  }

  /**
   * Mariage updateMany
   */
  export type MariageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mariages.
     */
    data: XOR<MariageUpdateManyMutationInput, MariageUncheckedUpdateManyInput>
    /**
     * Filter which Mariages to update
     */
    where?: MariageWhereInput
    /**
     * Limit how many Mariages to update.
     */
    limit?: number
  }

  /**
   * Mariage upsert
   */
  export type MariageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * The filter to search for the Mariage to update in case it exists.
     */
    where: MariageWhereUniqueInput
    /**
     * In case the Mariage found by the `where` argument doesn't exist, create a new Mariage with this data.
     */
    create: XOR<MariageCreateInput, MariageUncheckedCreateInput>
    /**
     * In case the Mariage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MariageUpdateInput, MariageUncheckedUpdateInput>
  }

  /**
   * Mariage delete
   */
  export type MariageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
    /**
     * Filter which Mariage to delete.
     */
    where: MariageWhereUniqueInput
  }

  /**
   * Mariage deleteMany
   */
  export type MariageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mariages to delete
     */
    where?: MariageWhereInput
    /**
     * Limit how many Mariages to delete.
     */
    limit?: number
  }

  /**
   * Mariage.church
   */
  export type Mariage$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Mariage without action
   */
  export type MariageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mariage
     */
    select?: MariageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mariage
     */
    omit?: MariageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MariageInclude<ExtArgs> | null
  }


  /**
   * Model Funeral
   */

  export type AggregateFuneral = {
    _count: FuneralCountAggregateOutputType | null
    _min: FuneralMinAggregateOutputType | null
    _max: FuneralMaxAggregateOutputType | null
  }

  export type FuneralMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    birthDate: Date | null
    funeralDate: Date | null
    funeralTime: string | null
    relationShip: string | null
    email: string | null
    deathCertificate: string | null
    nextOfKin: string | null
    officiantName: string | null
    description: string | null
    funeralLocation: string | null
    churchId: string | null
    createdAt: Date | null
    status: string | null
    updatedAt: Date | null
    telephone: string | null
  }

  export type FuneralMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    birthDate: Date | null
    funeralDate: Date | null
    funeralTime: string | null
    relationShip: string | null
    email: string | null
    deathCertificate: string | null
    nextOfKin: string | null
    officiantName: string | null
    description: string | null
    funeralLocation: string | null
    churchId: string | null
    createdAt: Date | null
    status: string | null
    updatedAt: Date | null
    telephone: string | null
  }

  export type FuneralCountAggregateOutputType = {
    id: number
    fullname: number
    birthDate: number
    funeralDate: number
    funeralTime: number
    relationShip: number
    email: number
    deathCertificate: number
    nextOfKin: number
    officiantName: number
    description: number
    funeralLocation: number
    churchId: number
    createdAt: number
    status: number
    updatedAt: number
    telephone: number
    _all: number
  }


  export type FuneralMinAggregateInputType = {
    id?: true
    fullname?: true
    birthDate?: true
    funeralDate?: true
    funeralTime?: true
    relationShip?: true
    email?: true
    deathCertificate?: true
    nextOfKin?: true
    officiantName?: true
    description?: true
    funeralLocation?: true
    churchId?: true
    createdAt?: true
    status?: true
    updatedAt?: true
    telephone?: true
  }

  export type FuneralMaxAggregateInputType = {
    id?: true
    fullname?: true
    birthDate?: true
    funeralDate?: true
    funeralTime?: true
    relationShip?: true
    email?: true
    deathCertificate?: true
    nextOfKin?: true
    officiantName?: true
    description?: true
    funeralLocation?: true
    churchId?: true
    createdAt?: true
    status?: true
    updatedAt?: true
    telephone?: true
  }

  export type FuneralCountAggregateInputType = {
    id?: true
    fullname?: true
    birthDate?: true
    funeralDate?: true
    funeralTime?: true
    relationShip?: true
    email?: true
    deathCertificate?: true
    nextOfKin?: true
    officiantName?: true
    description?: true
    funeralLocation?: true
    churchId?: true
    createdAt?: true
    status?: true
    updatedAt?: true
    telephone?: true
    _all?: true
  }

  export type FuneralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funeral to aggregate.
     */
    where?: FuneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funerals to fetch.
     */
    orderBy?: FuneralOrderByWithRelationInput | FuneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FuneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funerals
    **/
    _count?: true | FuneralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuneralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuneralMaxAggregateInputType
  }

  export type GetFuneralAggregateType<T extends FuneralAggregateArgs> = {
        [P in keyof T & keyof AggregateFuneral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuneral[P]>
      : GetScalarType<T[P], AggregateFuneral[P]>
  }




  export type FuneralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuneralWhereInput
    orderBy?: FuneralOrderByWithAggregationInput | FuneralOrderByWithAggregationInput[]
    by: FuneralScalarFieldEnum[] | FuneralScalarFieldEnum
    having?: FuneralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuneralCountAggregateInputType | true
    _min?: FuneralMinAggregateInputType
    _max?: FuneralMaxAggregateInputType
  }

  export type FuneralGroupByOutputType = {
    id: string
    fullname: string
    birthDate: Date
    funeralDate: Date
    funeralTime: string
    relationShip: string
    email: string
    deathCertificate: string | null
    nextOfKin: string
    officiantName: string
    description: string
    funeralLocation: string
    churchId: string | null
    createdAt: Date
    status: string
    updatedAt: Date
    telephone: string | null
    _count: FuneralCountAggregateOutputType | null
    _min: FuneralMinAggregateOutputType | null
    _max: FuneralMaxAggregateOutputType | null
  }

  type GetFuneralGroupByPayload<T extends FuneralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FuneralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuneralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuneralGroupByOutputType[P]>
            : GetScalarType<T[P], FuneralGroupByOutputType[P]>
        }
      >
    >


  export type FuneralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    birthDate?: boolean
    funeralDate?: boolean
    funeralTime?: boolean
    relationShip?: boolean
    email?: boolean
    deathCertificate?: boolean
    nextOfKin?: boolean
    officiantName?: boolean
    description?: boolean
    funeralLocation?: boolean
    churchId?: boolean
    createdAt?: boolean
    status?: boolean
    updatedAt?: boolean
    telephone?: boolean
    church?: boolean | Funeral$churchArgs<ExtArgs>
  }, ExtArgs["result"]["funeral"]>



  export type FuneralSelectScalar = {
    id?: boolean
    fullname?: boolean
    birthDate?: boolean
    funeralDate?: boolean
    funeralTime?: boolean
    relationShip?: boolean
    email?: boolean
    deathCertificate?: boolean
    nextOfKin?: boolean
    officiantName?: boolean
    description?: boolean
    funeralLocation?: boolean
    churchId?: boolean
    createdAt?: boolean
    status?: boolean
    updatedAt?: boolean
    telephone?: boolean
  }

  export type FuneralOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullname" | "birthDate" | "funeralDate" | "funeralTime" | "relationShip" | "email" | "deathCertificate" | "nextOfKin" | "officiantName" | "description" | "funeralLocation" | "churchId" | "createdAt" | "status" | "updatedAt" | "telephone", ExtArgs["result"]["funeral"]>
  export type FuneralInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Funeral$churchArgs<ExtArgs>
  }

  export type $FuneralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Funeral"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      birthDate: Date
      funeralDate: Date
      funeralTime: string
      relationShip: string
      email: string
      deathCertificate: string | null
      nextOfKin: string
      officiantName: string
      description: string
      funeralLocation: string
      churchId: string | null
      createdAt: Date
      status: string
      updatedAt: Date
      telephone: string | null
    }, ExtArgs["result"]["funeral"]>
    composites: {}
  }

  type FuneralGetPayload<S extends boolean | null | undefined | FuneralDefaultArgs> = $Result.GetResult<Prisma.$FuneralPayload, S>

  type FuneralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FuneralFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FuneralCountAggregateInputType | true
    }

  export interface FuneralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Funeral'], meta: { name: 'Funeral' } }
    /**
     * Find zero or one Funeral that matches the filter.
     * @param {FuneralFindUniqueArgs} args - Arguments to find a Funeral
     * @example
     * // Get one Funeral
     * const funeral = await prisma.funeral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FuneralFindUniqueArgs>(args: SelectSubset<T, FuneralFindUniqueArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Funeral that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FuneralFindUniqueOrThrowArgs} args - Arguments to find a Funeral
     * @example
     * // Get one Funeral
     * const funeral = await prisma.funeral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FuneralFindUniqueOrThrowArgs>(args: SelectSubset<T, FuneralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funeral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuneralFindFirstArgs} args - Arguments to find a Funeral
     * @example
     * // Get one Funeral
     * const funeral = await prisma.funeral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FuneralFindFirstArgs>(args?: SelectSubset<T, FuneralFindFirstArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funeral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuneralFindFirstOrThrowArgs} args - Arguments to find a Funeral
     * @example
     * // Get one Funeral
     * const funeral = await prisma.funeral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FuneralFindFirstOrThrowArgs>(args?: SelectSubset<T, FuneralFindFirstOrThrowArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Funerals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuneralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funerals
     * const funerals = await prisma.funeral.findMany()
     * 
     * // Get first 10 Funerals
     * const funerals = await prisma.funeral.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const funeralWithIdOnly = await prisma.funeral.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FuneralFindManyArgs>(args?: SelectSubset<T, FuneralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Funeral.
     * @param {FuneralCreateArgs} args - Arguments to create a Funeral.
     * @example
     * // Create one Funeral
     * const Funeral = await prisma.funeral.create({
     *   data: {
     *     // ... data to create a Funeral
     *   }
     * })
     * 
     */
    create<T extends FuneralCreateArgs>(args: SelectSubset<T, FuneralCreateArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Funerals.
     * @param {FuneralCreateManyArgs} args - Arguments to create many Funerals.
     * @example
     * // Create many Funerals
     * const funeral = await prisma.funeral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FuneralCreateManyArgs>(args?: SelectSubset<T, FuneralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Funeral.
     * @param {FuneralDeleteArgs} args - Arguments to delete one Funeral.
     * @example
     * // Delete one Funeral
     * const Funeral = await prisma.funeral.delete({
     *   where: {
     *     // ... filter to delete one Funeral
     *   }
     * })
     * 
     */
    delete<T extends FuneralDeleteArgs>(args: SelectSubset<T, FuneralDeleteArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Funeral.
     * @param {FuneralUpdateArgs} args - Arguments to update one Funeral.
     * @example
     * // Update one Funeral
     * const funeral = await prisma.funeral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FuneralUpdateArgs>(args: SelectSubset<T, FuneralUpdateArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Funerals.
     * @param {FuneralDeleteManyArgs} args - Arguments to filter Funerals to delete.
     * @example
     * // Delete a few Funerals
     * const { count } = await prisma.funeral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FuneralDeleteManyArgs>(args?: SelectSubset<T, FuneralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funerals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuneralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funerals
     * const funeral = await prisma.funeral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FuneralUpdateManyArgs>(args: SelectSubset<T, FuneralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Funeral.
     * @param {FuneralUpsertArgs} args - Arguments to update or create a Funeral.
     * @example
     * // Update or create a Funeral
     * const funeral = await prisma.funeral.upsert({
     *   create: {
     *     // ... data to create a Funeral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funeral we want to update
     *   }
     * })
     */
    upsert<T extends FuneralUpsertArgs>(args: SelectSubset<T, FuneralUpsertArgs<ExtArgs>>): Prisma__FuneralClient<$Result.GetResult<Prisma.$FuneralPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Funerals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuneralCountArgs} args - Arguments to filter Funerals to count.
     * @example
     * // Count the number of Funerals
     * const count = await prisma.funeral.count({
     *   where: {
     *     // ... the filter for the Funerals we want to count
     *   }
     * })
    **/
    count<T extends FuneralCountArgs>(
      args?: Subset<T, FuneralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuneralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funeral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuneralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuneralAggregateArgs>(args: Subset<T, FuneralAggregateArgs>): Prisma.PrismaPromise<GetFuneralAggregateType<T>>

    /**
     * Group by Funeral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuneralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuneralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuneralGroupByArgs['orderBy'] }
        : { orderBy?: FuneralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuneralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuneralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Funeral model
   */
  readonly fields: FuneralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Funeral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FuneralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Funeral$churchArgs<ExtArgs> = {}>(args?: Subset<T, Funeral$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Funeral model
   */
  interface FuneralFieldRefs {
    readonly id: FieldRef<"Funeral", 'String'>
    readonly fullname: FieldRef<"Funeral", 'String'>
    readonly birthDate: FieldRef<"Funeral", 'DateTime'>
    readonly funeralDate: FieldRef<"Funeral", 'DateTime'>
    readonly funeralTime: FieldRef<"Funeral", 'String'>
    readonly relationShip: FieldRef<"Funeral", 'String'>
    readonly email: FieldRef<"Funeral", 'String'>
    readonly deathCertificate: FieldRef<"Funeral", 'String'>
    readonly nextOfKin: FieldRef<"Funeral", 'String'>
    readonly officiantName: FieldRef<"Funeral", 'String'>
    readonly description: FieldRef<"Funeral", 'String'>
    readonly funeralLocation: FieldRef<"Funeral", 'String'>
    readonly churchId: FieldRef<"Funeral", 'String'>
    readonly createdAt: FieldRef<"Funeral", 'DateTime'>
    readonly status: FieldRef<"Funeral", 'String'>
    readonly updatedAt: FieldRef<"Funeral", 'DateTime'>
    readonly telephone: FieldRef<"Funeral", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Funeral findUnique
   */
  export type FuneralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * Filter, which Funeral to fetch.
     */
    where: FuneralWhereUniqueInput
  }

  /**
   * Funeral findUniqueOrThrow
   */
  export type FuneralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * Filter, which Funeral to fetch.
     */
    where: FuneralWhereUniqueInput
  }

  /**
   * Funeral findFirst
   */
  export type FuneralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * Filter, which Funeral to fetch.
     */
    where?: FuneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funerals to fetch.
     */
    orderBy?: FuneralOrderByWithRelationInput | FuneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funerals.
     */
    cursor?: FuneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funerals.
     */
    distinct?: FuneralScalarFieldEnum | FuneralScalarFieldEnum[]
  }

  /**
   * Funeral findFirstOrThrow
   */
  export type FuneralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * Filter, which Funeral to fetch.
     */
    where?: FuneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funerals to fetch.
     */
    orderBy?: FuneralOrderByWithRelationInput | FuneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funerals.
     */
    cursor?: FuneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funerals.
     */
    distinct?: FuneralScalarFieldEnum | FuneralScalarFieldEnum[]
  }

  /**
   * Funeral findMany
   */
  export type FuneralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * Filter, which Funerals to fetch.
     */
    where?: FuneralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funerals to fetch.
     */
    orderBy?: FuneralOrderByWithRelationInput | FuneralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funerals.
     */
    cursor?: FuneralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funerals.
     */
    skip?: number
    distinct?: FuneralScalarFieldEnum | FuneralScalarFieldEnum[]
  }

  /**
   * Funeral create
   */
  export type FuneralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * The data needed to create a Funeral.
     */
    data: XOR<FuneralCreateInput, FuneralUncheckedCreateInput>
  }

  /**
   * Funeral createMany
   */
  export type FuneralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funerals.
     */
    data: FuneralCreateManyInput | FuneralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Funeral update
   */
  export type FuneralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * The data needed to update a Funeral.
     */
    data: XOR<FuneralUpdateInput, FuneralUncheckedUpdateInput>
    /**
     * Choose, which Funeral to update.
     */
    where: FuneralWhereUniqueInput
  }

  /**
   * Funeral updateMany
   */
  export type FuneralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funerals.
     */
    data: XOR<FuneralUpdateManyMutationInput, FuneralUncheckedUpdateManyInput>
    /**
     * Filter which Funerals to update
     */
    where?: FuneralWhereInput
    /**
     * Limit how many Funerals to update.
     */
    limit?: number
  }

  /**
   * Funeral upsert
   */
  export type FuneralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * The filter to search for the Funeral to update in case it exists.
     */
    where: FuneralWhereUniqueInput
    /**
     * In case the Funeral found by the `where` argument doesn't exist, create a new Funeral with this data.
     */
    create: XOR<FuneralCreateInput, FuneralUncheckedCreateInput>
    /**
     * In case the Funeral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FuneralUpdateInput, FuneralUncheckedUpdateInput>
  }

  /**
   * Funeral delete
   */
  export type FuneralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
    /**
     * Filter which Funeral to delete.
     */
    where: FuneralWhereUniqueInput
  }

  /**
   * Funeral deleteMany
   */
  export type FuneralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funerals to delete
     */
    where?: FuneralWhereInput
    /**
     * Limit how many Funerals to delete.
     */
    limit?: number
  }

  /**
   * Funeral.church
   */
  export type Funeral$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Funeral without action
   */
  export type FuneralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funeral
     */
    select?: FuneralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funeral
     */
    omit?: FuneralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuneralInclude<ExtArgs> | null
  }


  /**
   * Model Presentation
   */

  export type AggregatePresentation = {
    _count: PresentationCountAggregateOutputType | null
    _min: PresentationMinAggregateOutputType | null
    _max: PresentationMaxAggregateOutputType | null
  }

  export type PresentationMinAggregateOutputType = {
    id: string | null
    placeOfBirth: string | null
    birthCertificate: string | null
    fatherName: string | null
    motherName: string | null
    phone: string | null
    address: string | null
    presentationDate: Date | null
    officiantName: string | null
    description: string | null
    churchId: string | null
    childName: string | null
    dateOfBirth: Date | null
    witness: string | null
  }

  export type PresentationMaxAggregateOutputType = {
    id: string | null
    placeOfBirth: string | null
    birthCertificate: string | null
    fatherName: string | null
    motherName: string | null
    phone: string | null
    address: string | null
    presentationDate: Date | null
    officiantName: string | null
    description: string | null
    churchId: string | null
    childName: string | null
    dateOfBirth: Date | null
    witness: string | null
  }

  export type PresentationCountAggregateOutputType = {
    id: number
    placeOfBirth: number
    birthCertificate: number
    fatherName: number
    motherName: number
    phone: number
    address: number
    presentationDate: number
    officiantName: number
    description: number
    churchId: number
    childName: number
    dateOfBirth: number
    witness: number
    _all: number
  }


  export type PresentationMinAggregateInputType = {
    id?: true
    placeOfBirth?: true
    birthCertificate?: true
    fatherName?: true
    motherName?: true
    phone?: true
    address?: true
    presentationDate?: true
    officiantName?: true
    description?: true
    churchId?: true
    childName?: true
    dateOfBirth?: true
    witness?: true
  }

  export type PresentationMaxAggregateInputType = {
    id?: true
    placeOfBirth?: true
    birthCertificate?: true
    fatherName?: true
    motherName?: true
    phone?: true
    address?: true
    presentationDate?: true
    officiantName?: true
    description?: true
    churchId?: true
    childName?: true
    dateOfBirth?: true
    witness?: true
  }

  export type PresentationCountAggregateInputType = {
    id?: true
    placeOfBirth?: true
    birthCertificate?: true
    fatherName?: true
    motherName?: true
    phone?: true
    address?: true
    presentationDate?: true
    officiantName?: true
    description?: true
    churchId?: true
    childName?: true
    dateOfBirth?: true
    witness?: true
    _all?: true
  }

  export type PresentationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presentation to aggregate.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Presentations
    **/
    _count?: true | PresentationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresentationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresentationMaxAggregateInputType
  }

  export type GetPresentationAggregateType<T extends PresentationAggregateArgs> = {
        [P in keyof T & keyof AggregatePresentation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresentation[P]>
      : GetScalarType<T[P], AggregatePresentation[P]>
  }




  export type PresentationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresentationWhereInput
    orderBy?: PresentationOrderByWithAggregationInput | PresentationOrderByWithAggregationInput[]
    by: PresentationScalarFieldEnum[] | PresentationScalarFieldEnum
    having?: PresentationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresentationCountAggregateInputType | true
    _min?: PresentationMinAggregateInputType
    _max?: PresentationMaxAggregateInputType
  }

  export type PresentationGroupByOutputType = {
    id: string
    placeOfBirth: string
    birthCertificate: string | null
    fatherName: string
    motherName: string
    phone: string
    address: string
    presentationDate: Date
    officiantName: string
    description: string | null
    churchId: string | null
    childName: string
    dateOfBirth: Date
    witness: string
    _count: PresentationCountAggregateOutputType | null
    _min: PresentationMinAggregateOutputType | null
    _max: PresentationMaxAggregateOutputType | null
  }

  type GetPresentationGroupByPayload<T extends PresentationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresentationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresentationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresentationGroupByOutputType[P]>
            : GetScalarType<T[P], PresentationGroupByOutputType[P]>
        }
      >
    >


  export type PresentationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    placeOfBirth?: boolean
    birthCertificate?: boolean
    fatherName?: boolean
    motherName?: boolean
    phone?: boolean
    address?: boolean
    presentationDate?: boolean
    officiantName?: boolean
    description?: boolean
    churchId?: boolean
    childName?: boolean
    dateOfBirth?: boolean
    witness?: boolean
    church?: boolean | Presentation$churchArgs<ExtArgs>
  }, ExtArgs["result"]["presentation"]>



  export type PresentationSelectScalar = {
    id?: boolean
    placeOfBirth?: boolean
    birthCertificate?: boolean
    fatherName?: boolean
    motherName?: boolean
    phone?: boolean
    address?: boolean
    presentationDate?: boolean
    officiantName?: boolean
    description?: boolean
    churchId?: boolean
    childName?: boolean
    dateOfBirth?: boolean
    witness?: boolean
  }

  export type PresentationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "placeOfBirth" | "birthCertificate" | "fatherName" | "motherName" | "phone" | "address" | "presentationDate" | "officiantName" | "description" | "churchId" | "childName" | "dateOfBirth" | "witness", ExtArgs["result"]["presentation"]>
  export type PresentationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Presentation$churchArgs<ExtArgs>
  }

  export type $PresentationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Presentation"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      placeOfBirth: string
      birthCertificate: string | null
      fatherName: string
      motherName: string
      phone: string
      address: string
      presentationDate: Date
      officiantName: string
      description: string | null
      churchId: string | null
      childName: string
      dateOfBirth: Date
      witness: string
    }, ExtArgs["result"]["presentation"]>
    composites: {}
  }

  type PresentationGetPayload<S extends boolean | null | undefined | PresentationDefaultArgs> = $Result.GetResult<Prisma.$PresentationPayload, S>

  type PresentationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresentationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresentationCountAggregateInputType | true
    }

  export interface PresentationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presentation'], meta: { name: 'Presentation' } }
    /**
     * Find zero or one Presentation that matches the filter.
     * @param {PresentationFindUniqueArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresentationFindUniqueArgs>(args: SelectSubset<T, PresentationFindUniqueArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presentation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresentationFindUniqueOrThrowArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresentationFindUniqueOrThrowArgs>(args: SelectSubset<T, PresentationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presentation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationFindFirstArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresentationFindFirstArgs>(args?: SelectSubset<T, PresentationFindFirstArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presentation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationFindFirstOrThrowArgs} args - Arguments to find a Presentation
     * @example
     * // Get one Presentation
     * const presentation = await prisma.presentation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresentationFindFirstOrThrowArgs>(args?: SelectSubset<T, PresentationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presentations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presentations
     * const presentations = await prisma.presentation.findMany()
     * 
     * // Get first 10 Presentations
     * const presentations = await prisma.presentation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presentationWithIdOnly = await prisma.presentation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresentationFindManyArgs>(args?: SelectSubset<T, PresentationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presentation.
     * @param {PresentationCreateArgs} args - Arguments to create a Presentation.
     * @example
     * // Create one Presentation
     * const Presentation = await prisma.presentation.create({
     *   data: {
     *     // ... data to create a Presentation
     *   }
     * })
     * 
     */
    create<T extends PresentationCreateArgs>(args: SelectSubset<T, PresentationCreateArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presentations.
     * @param {PresentationCreateManyArgs} args - Arguments to create many Presentations.
     * @example
     * // Create many Presentations
     * const presentation = await prisma.presentation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresentationCreateManyArgs>(args?: SelectSubset<T, PresentationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Presentation.
     * @param {PresentationDeleteArgs} args - Arguments to delete one Presentation.
     * @example
     * // Delete one Presentation
     * const Presentation = await prisma.presentation.delete({
     *   where: {
     *     // ... filter to delete one Presentation
     *   }
     * })
     * 
     */
    delete<T extends PresentationDeleteArgs>(args: SelectSubset<T, PresentationDeleteArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presentation.
     * @param {PresentationUpdateArgs} args - Arguments to update one Presentation.
     * @example
     * // Update one Presentation
     * const presentation = await prisma.presentation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresentationUpdateArgs>(args: SelectSubset<T, PresentationUpdateArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presentations.
     * @param {PresentationDeleteManyArgs} args - Arguments to filter Presentations to delete.
     * @example
     * // Delete a few Presentations
     * const { count } = await prisma.presentation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresentationDeleteManyArgs>(args?: SelectSubset<T, PresentationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presentations
     * const presentation = await prisma.presentation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresentationUpdateManyArgs>(args: SelectSubset<T, PresentationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Presentation.
     * @param {PresentationUpsertArgs} args - Arguments to update or create a Presentation.
     * @example
     * // Update or create a Presentation
     * const presentation = await prisma.presentation.upsert({
     *   create: {
     *     // ... data to create a Presentation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presentation we want to update
     *   }
     * })
     */
    upsert<T extends PresentationUpsertArgs>(args: SelectSubset<T, PresentationUpsertArgs<ExtArgs>>): Prisma__PresentationClient<$Result.GetResult<Prisma.$PresentationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationCountArgs} args - Arguments to filter Presentations to count.
     * @example
     * // Count the number of Presentations
     * const count = await prisma.presentation.count({
     *   where: {
     *     // ... the filter for the Presentations we want to count
     *   }
     * })
    **/
    count<T extends PresentationCountArgs>(
      args?: Subset<T, PresentationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresentationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresentationAggregateArgs>(args: Subset<T, PresentationAggregateArgs>): Prisma.PrismaPromise<GetPresentationAggregateType<T>>

    /**
     * Group by Presentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresentationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresentationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresentationGroupByArgs['orderBy'] }
        : { orderBy?: PresentationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresentationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresentationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Presentation model
   */
  readonly fields: PresentationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Presentation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresentationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Presentation$churchArgs<ExtArgs> = {}>(args?: Subset<T, Presentation$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Presentation model
   */
  interface PresentationFieldRefs {
    readonly id: FieldRef<"Presentation", 'String'>
    readonly placeOfBirth: FieldRef<"Presentation", 'String'>
    readonly birthCertificate: FieldRef<"Presentation", 'String'>
    readonly fatherName: FieldRef<"Presentation", 'String'>
    readonly motherName: FieldRef<"Presentation", 'String'>
    readonly phone: FieldRef<"Presentation", 'String'>
    readonly address: FieldRef<"Presentation", 'String'>
    readonly presentationDate: FieldRef<"Presentation", 'DateTime'>
    readonly officiantName: FieldRef<"Presentation", 'String'>
    readonly description: FieldRef<"Presentation", 'String'>
    readonly churchId: FieldRef<"Presentation", 'String'>
    readonly childName: FieldRef<"Presentation", 'String'>
    readonly dateOfBirth: FieldRef<"Presentation", 'DateTime'>
    readonly witness: FieldRef<"Presentation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Presentation findUnique
   */
  export type PresentationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation findUniqueOrThrow
   */
  export type PresentationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation findFirst
   */
  export type PresentationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presentations.
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presentations.
     */
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Presentation findFirstOrThrow
   */
  export type PresentationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentation to fetch.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presentations.
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presentations.
     */
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Presentation findMany
   */
  export type PresentationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter, which Presentations to fetch.
     */
    where?: PresentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presentations to fetch.
     */
    orderBy?: PresentationOrderByWithRelationInput | PresentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Presentations.
     */
    cursor?: PresentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presentations.
     */
    skip?: number
    distinct?: PresentationScalarFieldEnum | PresentationScalarFieldEnum[]
  }

  /**
   * Presentation create
   */
  export type PresentationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * The data needed to create a Presentation.
     */
    data: XOR<PresentationCreateInput, PresentationUncheckedCreateInput>
  }

  /**
   * Presentation createMany
   */
  export type PresentationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Presentations.
     */
    data: PresentationCreateManyInput | PresentationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Presentation update
   */
  export type PresentationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * The data needed to update a Presentation.
     */
    data: XOR<PresentationUpdateInput, PresentationUncheckedUpdateInput>
    /**
     * Choose, which Presentation to update.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation updateMany
   */
  export type PresentationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Presentations.
     */
    data: XOR<PresentationUpdateManyMutationInput, PresentationUncheckedUpdateManyInput>
    /**
     * Filter which Presentations to update
     */
    where?: PresentationWhereInput
    /**
     * Limit how many Presentations to update.
     */
    limit?: number
  }

  /**
   * Presentation upsert
   */
  export type PresentationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * The filter to search for the Presentation to update in case it exists.
     */
    where: PresentationWhereUniqueInput
    /**
     * In case the Presentation found by the `where` argument doesn't exist, create a new Presentation with this data.
     */
    create: XOR<PresentationCreateInput, PresentationUncheckedCreateInput>
    /**
     * In case the Presentation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresentationUpdateInput, PresentationUncheckedUpdateInput>
  }

  /**
   * Presentation delete
   */
  export type PresentationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
    /**
     * Filter which Presentation to delete.
     */
    where: PresentationWhereUniqueInput
  }

  /**
   * Presentation deleteMany
   */
  export type PresentationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presentations to delete
     */
    where?: PresentationWhereInput
    /**
     * Limit how many Presentations to delete.
     */
    limit?: number
  }

  /**
   * Presentation.church
   */
  export type Presentation$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Presentation without action
   */
  export type PresentationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presentation
     */
    select?: PresentationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presentation
     */
    omit?: PresentationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresentationInclude<ExtArgs> | null
  }


  /**
   * Model Baptism
   */

  export type AggregateBaptism = {
    _count: BaptismCountAggregateOutputType | null
    _min: BaptismMinAggregateOutputType | null
    _max: BaptismMaxAggregateOutputType | null
  }

  export type BaptismMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    birthDate: Date | null
    placeOfBirth: string | null
    baptismDate: Date | null
    baptismCertificate: string | null
    officiantName: string | null
    withness: string | null
    previousChurch: string | null
    testimony: string | null
    churchId: string | null
    conversionDate: Date | null
    status: string | null
    baptismLocation: string | null
    endDate: string | null
    startDate: string | null
  }

  export type BaptismMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    birthDate: Date | null
    placeOfBirth: string | null
    baptismDate: Date | null
    baptismCertificate: string | null
    officiantName: string | null
    withness: string | null
    previousChurch: string | null
    testimony: string | null
    churchId: string | null
    conversionDate: Date | null
    status: string | null
    baptismLocation: string | null
    endDate: string | null
    startDate: string | null
  }

  export type BaptismCountAggregateOutputType = {
    id: number
    fullName: number
    birthDate: number
    placeOfBirth: number
    baptismDate: number
    baptismCertificate: number
    officiantName: number
    withness: number
    previousChurch: number
    testimony: number
    churchId: number
    conversionDate: number
    status: number
    baptismLocation: number
    endDate: number
    startDate: number
    _all: number
  }


  export type BaptismMinAggregateInputType = {
    id?: true
    fullName?: true
    birthDate?: true
    placeOfBirth?: true
    baptismDate?: true
    baptismCertificate?: true
    officiantName?: true
    withness?: true
    previousChurch?: true
    testimony?: true
    churchId?: true
    conversionDate?: true
    status?: true
    baptismLocation?: true
    endDate?: true
    startDate?: true
  }

  export type BaptismMaxAggregateInputType = {
    id?: true
    fullName?: true
    birthDate?: true
    placeOfBirth?: true
    baptismDate?: true
    baptismCertificate?: true
    officiantName?: true
    withness?: true
    previousChurch?: true
    testimony?: true
    churchId?: true
    conversionDate?: true
    status?: true
    baptismLocation?: true
    endDate?: true
    startDate?: true
  }

  export type BaptismCountAggregateInputType = {
    id?: true
    fullName?: true
    birthDate?: true
    placeOfBirth?: true
    baptismDate?: true
    baptismCertificate?: true
    officiantName?: true
    withness?: true
    previousChurch?: true
    testimony?: true
    churchId?: true
    conversionDate?: true
    status?: true
    baptismLocation?: true
    endDate?: true
    startDate?: true
    _all?: true
  }

  export type BaptismAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baptism to aggregate.
     */
    where?: BaptismWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baptisms to fetch.
     */
    orderBy?: BaptismOrderByWithRelationInput | BaptismOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BaptismWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baptisms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baptisms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baptisms
    **/
    _count?: true | BaptismCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BaptismMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BaptismMaxAggregateInputType
  }

  export type GetBaptismAggregateType<T extends BaptismAggregateArgs> = {
        [P in keyof T & keyof AggregateBaptism]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBaptism[P]>
      : GetScalarType<T[P], AggregateBaptism[P]>
  }




  export type BaptismGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BaptismWhereInput
    orderBy?: BaptismOrderByWithAggregationInput | BaptismOrderByWithAggregationInput[]
    by: BaptismScalarFieldEnum[] | BaptismScalarFieldEnum
    having?: BaptismScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BaptismCountAggregateInputType | true
    _min?: BaptismMinAggregateInputType
    _max?: BaptismMaxAggregateInputType
  }

  export type BaptismGroupByOutputType = {
    id: string
    fullName: string
    birthDate: Date
    placeOfBirth: string
    baptismDate: Date
    baptismCertificate: string | null
    officiantName: string
    withness: string
    previousChurch: string
    testimony: string
    churchId: string | null
    conversionDate: Date
    status: string | null
    baptismLocation: string
    endDate: string | null
    startDate: string | null
    _count: BaptismCountAggregateOutputType | null
    _min: BaptismMinAggregateOutputType | null
    _max: BaptismMaxAggregateOutputType | null
  }

  type GetBaptismGroupByPayload<T extends BaptismGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BaptismGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BaptismGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BaptismGroupByOutputType[P]>
            : GetScalarType<T[P], BaptismGroupByOutputType[P]>
        }
      >
    >


  export type BaptismSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    birthDate?: boolean
    placeOfBirth?: boolean
    baptismDate?: boolean
    baptismCertificate?: boolean
    officiantName?: boolean
    withness?: boolean
    previousChurch?: boolean
    testimony?: boolean
    churchId?: boolean
    conversionDate?: boolean
    status?: boolean
    baptismLocation?: boolean
    endDate?: boolean
    startDate?: boolean
    church?: boolean | Baptism$churchArgs<ExtArgs>
  }, ExtArgs["result"]["baptism"]>



  export type BaptismSelectScalar = {
    id?: boolean
    fullName?: boolean
    birthDate?: boolean
    placeOfBirth?: boolean
    baptismDate?: boolean
    baptismCertificate?: boolean
    officiantName?: boolean
    withness?: boolean
    previousChurch?: boolean
    testimony?: boolean
    churchId?: boolean
    conversionDate?: boolean
    status?: boolean
    baptismLocation?: boolean
    endDate?: boolean
    startDate?: boolean
  }

  export type BaptismOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "birthDate" | "placeOfBirth" | "baptismDate" | "baptismCertificate" | "officiantName" | "withness" | "previousChurch" | "testimony" | "churchId" | "conversionDate" | "status" | "baptismLocation" | "endDate" | "startDate", ExtArgs["result"]["baptism"]>
  export type BaptismInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Baptism$churchArgs<ExtArgs>
  }

  export type $BaptismPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Baptism"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      birthDate: Date
      placeOfBirth: string
      baptismDate: Date
      baptismCertificate: string | null
      officiantName: string
      withness: string
      previousChurch: string
      testimony: string
      churchId: string | null
      conversionDate: Date
      status: string | null
      baptismLocation: string
      endDate: string | null
      startDate: string | null
    }, ExtArgs["result"]["baptism"]>
    composites: {}
  }

  type BaptismGetPayload<S extends boolean | null | undefined | BaptismDefaultArgs> = $Result.GetResult<Prisma.$BaptismPayload, S>

  type BaptismCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BaptismFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BaptismCountAggregateInputType | true
    }

  export interface BaptismDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Baptism'], meta: { name: 'Baptism' } }
    /**
     * Find zero or one Baptism that matches the filter.
     * @param {BaptismFindUniqueArgs} args - Arguments to find a Baptism
     * @example
     * // Get one Baptism
     * const baptism = await prisma.baptism.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BaptismFindUniqueArgs>(args: SelectSubset<T, BaptismFindUniqueArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Baptism that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BaptismFindUniqueOrThrowArgs} args - Arguments to find a Baptism
     * @example
     * // Get one Baptism
     * const baptism = await prisma.baptism.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BaptismFindUniqueOrThrowArgs>(args: SelectSubset<T, BaptismFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Baptism that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaptismFindFirstArgs} args - Arguments to find a Baptism
     * @example
     * // Get one Baptism
     * const baptism = await prisma.baptism.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BaptismFindFirstArgs>(args?: SelectSubset<T, BaptismFindFirstArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Baptism that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaptismFindFirstOrThrowArgs} args - Arguments to find a Baptism
     * @example
     * // Get one Baptism
     * const baptism = await prisma.baptism.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BaptismFindFirstOrThrowArgs>(args?: SelectSubset<T, BaptismFindFirstOrThrowArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Baptisms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaptismFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baptisms
     * const baptisms = await prisma.baptism.findMany()
     * 
     * // Get first 10 Baptisms
     * const baptisms = await prisma.baptism.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const baptismWithIdOnly = await prisma.baptism.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BaptismFindManyArgs>(args?: SelectSubset<T, BaptismFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Baptism.
     * @param {BaptismCreateArgs} args - Arguments to create a Baptism.
     * @example
     * // Create one Baptism
     * const Baptism = await prisma.baptism.create({
     *   data: {
     *     // ... data to create a Baptism
     *   }
     * })
     * 
     */
    create<T extends BaptismCreateArgs>(args: SelectSubset<T, BaptismCreateArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Baptisms.
     * @param {BaptismCreateManyArgs} args - Arguments to create many Baptisms.
     * @example
     * // Create many Baptisms
     * const baptism = await prisma.baptism.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BaptismCreateManyArgs>(args?: SelectSubset<T, BaptismCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Baptism.
     * @param {BaptismDeleteArgs} args - Arguments to delete one Baptism.
     * @example
     * // Delete one Baptism
     * const Baptism = await prisma.baptism.delete({
     *   where: {
     *     // ... filter to delete one Baptism
     *   }
     * })
     * 
     */
    delete<T extends BaptismDeleteArgs>(args: SelectSubset<T, BaptismDeleteArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Baptism.
     * @param {BaptismUpdateArgs} args - Arguments to update one Baptism.
     * @example
     * // Update one Baptism
     * const baptism = await prisma.baptism.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BaptismUpdateArgs>(args: SelectSubset<T, BaptismUpdateArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Baptisms.
     * @param {BaptismDeleteManyArgs} args - Arguments to filter Baptisms to delete.
     * @example
     * // Delete a few Baptisms
     * const { count } = await prisma.baptism.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BaptismDeleteManyArgs>(args?: SelectSubset<T, BaptismDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baptisms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaptismUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baptisms
     * const baptism = await prisma.baptism.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BaptismUpdateManyArgs>(args: SelectSubset<T, BaptismUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Baptism.
     * @param {BaptismUpsertArgs} args - Arguments to update or create a Baptism.
     * @example
     * // Update or create a Baptism
     * const baptism = await prisma.baptism.upsert({
     *   create: {
     *     // ... data to create a Baptism
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Baptism we want to update
     *   }
     * })
     */
    upsert<T extends BaptismUpsertArgs>(args: SelectSubset<T, BaptismUpsertArgs<ExtArgs>>): Prisma__BaptismClient<$Result.GetResult<Prisma.$BaptismPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Baptisms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaptismCountArgs} args - Arguments to filter Baptisms to count.
     * @example
     * // Count the number of Baptisms
     * const count = await prisma.baptism.count({
     *   where: {
     *     // ... the filter for the Baptisms we want to count
     *   }
     * })
    **/
    count<T extends BaptismCountArgs>(
      args?: Subset<T, BaptismCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BaptismCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Baptism.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaptismAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BaptismAggregateArgs>(args: Subset<T, BaptismAggregateArgs>): Prisma.PrismaPromise<GetBaptismAggregateType<T>>

    /**
     * Group by Baptism.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaptismGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BaptismGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BaptismGroupByArgs['orderBy'] }
        : { orderBy?: BaptismGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BaptismGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBaptismGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Baptism model
   */
  readonly fields: BaptismFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Baptism.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BaptismClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Baptism$churchArgs<ExtArgs> = {}>(args?: Subset<T, Baptism$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Baptism model
   */
  interface BaptismFieldRefs {
    readonly id: FieldRef<"Baptism", 'String'>
    readonly fullName: FieldRef<"Baptism", 'String'>
    readonly birthDate: FieldRef<"Baptism", 'DateTime'>
    readonly placeOfBirth: FieldRef<"Baptism", 'String'>
    readonly baptismDate: FieldRef<"Baptism", 'DateTime'>
    readonly baptismCertificate: FieldRef<"Baptism", 'String'>
    readonly officiantName: FieldRef<"Baptism", 'String'>
    readonly withness: FieldRef<"Baptism", 'String'>
    readonly previousChurch: FieldRef<"Baptism", 'String'>
    readonly testimony: FieldRef<"Baptism", 'String'>
    readonly churchId: FieldRef<"Baptism", 'String'>
    readonly conversionDate: FieldRef<"Baptism", 'DateTime'>
    readonly status: FieldRef<"Baptism", 'String'>
    readonly baptismLocation: FieldRef<"Baptism", 'String'>
    readonly endDate: FieldRef<"Baptism", 'String'>
    readonly startDate: FieldRef<"Baptism", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Baptism findUnique
   */
  export type BaptismFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * Filter, which Baptism to fetch.
     */
    where: BaptismWhereUniqueInput
  }

  /**
   * Baptism findUniqueOrThrow
   */
  export type BaptismFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * Filter, which Baptism to fetch.
     */
    where: BaptismWhereUniqueInput
  }

  /**
   * Baptism findFirst
   */
  export type BaptismFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * Filter, which Baptism to fetch.
     */
    where?: BaptismWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baptisms to fetch.
     */
    orderBy?: BaptismOrderByWithRelationInput | BaptismOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baptisms.
     */
    cursor?: BaptismWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baptisms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baptisms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baptisms.
     */
    distinct?: BaptismScalarFieldEnum | BaptismScalarFieldEnum[]
  }

  /**
   * Baptism findFirstOrThrow
   */
  export type BaptismFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * Filter, which Baptism to fetch.
     */
    where?: BaptismWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baptisms to fetch.
     */
    orderBy?: BaptismOrderByWithRelationInput | BaptismOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baptisms.
     */
    cursor?: BaptismWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baptisms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baptisms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baptisms.
     */
    distinct?: BaptismScalarFieldEnum | BaptismScalarFieldEnum[]
  }

  /**
   * Baptism findMany
   */
  export type BaptismFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * Filter, which Baptisms to fetch.
     */
    where?: BaptismWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baptisms to fetch.
     */
    orderBy?: BaptismOrderByWithRelationInput | BaptismOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baptisms.
     */
    cursor?: BaptismWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baptisms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baptisms.
     */
    skip?: number
    distinct?: BaptismScalarFieldEnum | BaptismScalarFieldEnum[]
  }

  /**
   * Baptism create
   */
  export type BaptismCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * The data needed to create a Baptism.
     */
    data: XOR<BaptismCreateInput, BaptismUncheckedCreateInput>
  }

  /**
   * Baptism createMany
   */
  export type BaptismCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Baptisms.
     */
    data: BaptismCreateManyInput | BaptismCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Baptism update
   */
  export type BaptismUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * The data needed to update a Baptism.
     */
    data: XOR<BaptismUpdateInput, BaptismUncheckedUpdateInput>
    /**
     * Choose, which Baptism to update.
     */
    where: BaptismWhereUniqueInput
  }

  /**
   * Baptism updateMany
   */
  export type BaptismUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Baptisms.
     */
    data: XOR<BaptismUpdateManyMutationInput, BaptismUncheckedUpdateManyInput>
    /**
     * Filter which Baptisms to update
     */
    where?: BaptismWhereInput
    /**
     * Limit how many Baptisms to update.
     */
    limit?: number
  }

  /**
   * Baptism upsert
   */
  export type BaptismUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * The filter to search for the Baptism to update in case it exists.
     */
    where: BaptismWhereUniqueInput
    /**
     * In case the Baptism found by the `where` argument doesn't exist, create a new Baptism with this data.
     */
    create: XOR<BaptismCreateInput, BaptismUncheckedCreateInput>
    /**
     * In case the Baptism was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BaptismUpdateInput, BaptismUncheckedUpdateInput>
  }

  /**
   * Baptism delete
   */
  export type BaptismDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
    /**
     * Filter which Baptism to delete.
     */
    where: BaptismWhereUniqueInput
  }

  /**
   * Baptism deleteMany
   */
  export type BaptismDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baptisms to delete
     */
    where?: BaptismWhereInput
    /**
     * Limit how many Baptisms to delete.
     */
    limit?: number
  }

  /**
   * Baptism.church
   */
  export type Baptism$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * Baptism without action
   */
  export type BaptismDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baptism
     */
    select?: BaptismSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Baptism
     */
    omit?: BaptismOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaptismInclude<ExtArgs> | null
  }


  /**
   * Model death
   */

  export type AggregateDeath = {
    _count: DeathCountAggregateOutputType | null
    _min: DeathMinAggregateOutputType | null
    _max: DeathMaxAggregateOutputType | null
  }

  export type DeathMinAggregateOutputType = {
    id: string | null
    deathDate: Date | null
    deathPlace: string | null
    deathCause: string | null
    deathCertificate: string | null
    churchId: string | null
    deathTime: string | null
    description: string | null
    location: string | null
    officiantName: string | null
    relationShip: string | null
    serviceDate: Date | null
    nextOfKin: string | null
  }

  export type DeathMaxAggregateOutputType = {
    id: string | null
    deathDate: Date | null
    deathPlace: string | null
    deathCause: string | null
    deathCertificate: string | null
    churchId: string | null
    deathTime: string | null
    description: string | null
    location: string | null
    officiantName: string | null
    relationShip: string | null
    serviceDate: Date | null
    nextOfKin: string | null
  }

  export type DeathCountAggregateOutputType = {
    id: number
    deathDate: number
    deathPlace: number
    deathCause: number
    deathCertificate: number
    churchId: number
    deathTime: number
    description: number
    location: number
    officiantName: number
    relationShip: number
    serviceDate: number
    nextOfKin: number
    _all: number
  }


  export type DeathMinAggregateInputType = {
    id?: true
    deathDate?: true
    deathPlace?: true
    deathCause?: true
    deathCertificate?: true
    churchId?: true
    deathTime?: true
    description?: true
    location?: true
    officiantName?: true
    relationShip?: true
    serviceDate?: true
    nextOfKin?: true
  }

  export type DeathMaxAggregateInputType = {
    id?: true
    deathDate?: true
    deathPlace?: true
    deathCause?: true
    deathCertificate?: true
    churchId?: true
    deathTime?: true
    description?: true
    location?: true
    officiantName?: true
    relationShip?: true
    serviceDate?: true
    nextOfKin?: true
  }

  export type DeathCountAggregateInputType = {
    id?: true
    deathDate?: true
    deathPlace?: true
    deathCause?: true
    deathCertificate?: true
    churchId?: true
    deathTime?: true
    description?: true
    location?: true
    officiantName?: true
    relationShip?: true
    serviceDate?: true
    nextOfKin?: true
    _all?: true
  }

  export type DeathAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which death to aggregate.
     */
    where?: deathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deaths to fetch.
     */
    orderBy?: deathOrderByWithRelationInput | deathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: deathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deaths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deaths
    **/
    _count?: true | DeathCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeathMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeathMaxAggregateInputType
  }

  export type GetDeathAggregateType<T extends DeathAggregateArgs> = {
        [P in keyof T & keyof AggregateDeath]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeath[P]>
      : GetScalarType<T[P], AggregateDeath[P]>
  }




  export type deathGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deathWhereInput
    orderBy?: deathOrderByWithAggregationInput | deathOrderByWithAggregationInput[]
    by: DeathScalarFieldEnum[] | DeathScalarFieldEnum
    having?: deathScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeathCountAggregateInputType | true
    _min?: DeathMinAggregateInputType
    _max?: DeathMaxAggregateInputType
  }

  export type DeathGroupByOutputType = {
    id: string
    deathDate: Date
    deathPlace: string
    deathCause: string
    deathCertificate: string | null
    churchId: string | null
    deathTime: string
    description: string | null
    location: string
    officiantName: string
    relationShip: string
    serviceDate: Date
    nextOfKin: string
    _count: DeathCountAggregateOutputType | null
    _min: DeathMinAggregateOutputType | null
    _max: DeathMaxAggregateOutputType | null
  }

  type GetDeathGroupByPayload<T extends deathGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeathGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeathGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeathGroupByOutputType[P]>
            : GetScalarType<T[P], DeathGroupByOutputType[P]>
        }
      >
    >


  export type deathSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deathDate?: boolean
    deathPlace?: boolean
    deathCause?: boolean
    deathCertificate?: boolean
    churchId?: boolean
    deathTime?: boolean
    description?: boolean
    location?: boolean
    officiantName?: boolean
    relationShip?: boolean
    serviceDate?: boolean
    nextOfKin?: boolean
    church?: boolean | death$churchArgs<ExtArgs>
  }, ExtArgs["result"]["death"]>



  export type deathSelectScalar = {
    id?: boolean
    deathDate?: boolean
    deathPlace?: boolean
    deathCause?: boolean
    deathCertificate?: boolean
    churchId?: boolean
    deathTime?: boolean
    description?: boolean
    location?: boolean
    officiantName?: boolean
    relationShip?: boolean
    serviceDate?: boolean
    nextOfKin?: boolean
  }

  export type deathOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "deathDate" | "deathPlace" | "deathCause" | "deathCertificate" | "churchId" | "deathTime" | "description" | "location" | "officiantName" | "relationShip" | "serviceDate" | "nextOfKin", ExtArgs["result"]["death"]>
  export type deathInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | death$churchArgs<ExtArgs>
  }

  export type $deathPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "death"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      deathDate: Date
      deathPlace: string
      deathCause: string
      deathCertificate: string | null
      churchId: string | null
      deathTime: string
      description: string | null
      location: string
      officiantName: string
      relationShip: string
      serviceDate: Date
      nextOfKin: string
    }, ExtArgs["result"]["death"]>
    composites: {}
  }

  type deathGetPayload<S extends boolean | null | undefined | deathDefaultArgs> = $Result.GetResult<Prisma.$deathPayload, S>

  type deathCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<deathFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeathCountAggregateInputType | true
    }

  export interface deathDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['death'], meta: { name: 'death' } }
    /**
     * Find zero or one Death that matches the filter.
     * @param {deathFindUniqueArgs} args - Arguments to find a Death
     * @example
     * // Get one Death
     * const death = await prisma.death.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends deathFindUniqueArgs>(args: SelectSubset<T, deathFindUniqueArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Death that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {deathFindUniqueOrThrowArgs} args - Arguments to find a Death
     * @example
     * // Get one Death
     * const death = await prisma.death.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends deathFindUniqueOrThrowArgs>(args: SelectSubset<T, deathFindUniqueOrThrowArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Death that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deathFindFirstArgs} args - Arguments to find a Death
     * @example
     * // Get one Death
     * const death = await prisma.death.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends deathFindFirstArgs>(args?: SelectSubset<T, deathFindFirstArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Death that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deathFindFirstOrThrowArgs} args - Arguments to find a Death
     * @example
     * // Get one Death
     * const death = await prisma.death.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends deathFindFirstOrThrowArgs>(args?: SelectSubset<T, deathFindFirstOrThrowArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Deaths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deathFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deaths
     * const deaths = await prisma.death.findMany()
     * 
     * // Get first 10 Deaths
     * const deaths = await prisma.death.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deathWithIdOnly = await prisma.death.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends deathFindManyArgs>(args?: SelectSubset<T, deathFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Death.
     * @param {deathCreateArgs} args - Arguments to create a Death.
     * @example
     * // Create one Death
     * const Death = await prisma.death.create({
     *   data: {
     *     // ... data to create a Death
     *   }
     * })
     * 
     */
    create<T extends deathCreateArgs>(args: SelectSubset<T, deathCreateArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Deaths.
     * @param {deathCreateManyArgs} args - Arguments to create many Deaths.
     * @example
     * // Create many Deaths
     * const death = await prisma.death.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends deathCreateManyArgs>(args?: SelectSubset<T, deathCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Death.
     * @param {deathDeleteArgs} args - Arguments to delete one Death.
     * @example
     * // Delete one Death
     * const Death = await prisma.death.delete({
     *   where: {
     *     // ... filter to delete one Death
     *   }
     * })
     * 
     */
    delete<T extends deathDeleteArgs>(args: SelectSubset<T, deathDeleteArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Death.
     * @param {deathUpdateArgs} args - Arguments to update one Death.
     * @example
     * // Update one Death
     * const death = await prisma.death.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends deathUpdateArgs>(args: SelectSubset<T, deathUpdateArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Deaths.
     * @param {deathDeleteManyArgs} args - Arguments to filter Deaths to delete.
     * @example
     * // Delete a few Deaths
     * const { count } = await prisma.death.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends deathDeleteManyArgs>(args?: SelectSubset<T, deathDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deaths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deathUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deaths
     * const death = await prisma.death.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends deathUpdateManyArgs>(args: SelectSubset<T, deathUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Death.
     * @param {deathUpsertArgs} args - Arguments to update or create a Death.
     * @example
     * // Update or create a Death
     * const death = await prisma.death.upsert({
     *   create: {
     *     // ... data to create a Death
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Death we want to update
     *   }
     * })
     */
    upsert<T extends deathUpsertArgs>(args: SelectSubset<T, deathUpsertArgs<ExtArgs>>): Prisma__deathClient<$Result.GetResult<Prisma.$deathPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Deaths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deathCountArgs} args - Arguments to filter Deaths to count.
     * @example
     * // Count the number of Deaths
     * const count = await prisma.death.count({
     *   where: {
     *     // ... the filter for the Deaths we want to count
     *   }
     * })
    **/
    count<T extends deathCountArgs>(
      args?: Subset<T, deathCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeathCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Death.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeathAggregateArgs>(args: Subset<T, DeathAggregateArgs>): Prisma.PrismaPromise<GetDeathAggregateType<T>>

    /**
     * Group by Death.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deathGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends deathGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: deathGroupByArgs['orderBy'] }
        : { orderBy?: deathGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, deathGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeathGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the death model
   */
  readonly fields: deathFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for death.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__deathClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends death$churchArgs<ExtArgs> = {}>(args?: Subset<T, death$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the death model
   */
  interface deathFieldRefs {
    readonly id: FieldRef<"death", 'String'>
    readonly deathDate: FieldRef<"death", 'DateTime'>
    readonly deathPlace: FieldRef<"death", 'String'>
    readonly deathCause: FieldRef<"death", 'String'>
    readonly deathCertificate: FieldRef<"death", 'String'>
    readonly churchId: FieldRef<"death", 'String'>
    readonly deathTime: FieldRef<"death", 'String'>
    readonly description: FieldRef<"death", 'String'>
    readonly location: FieldRef<"death", 'String'>
    readonly officiantName: FieldRef<"death", 'String'>
    readonly relationShip: FieldRef<"death", 'String'>
    readonly serviceDate: FieldRef<"death", 'DateTime'>
    readonly nextOfKin: FieldRef<"death", 'String'>
  }
    

  // Custom InputTypes
  /**
   * death findUnique
   */
  export type deathFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * Filter, which death to fetch.
     */
    where: deathWhereUniqueInput
  }

  /**
   * death findUniqueOrThrow
   */
  export type deathFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * Filter, which death to fetch.
     */
    where: deathWhereUniqueInput
  }

  /**
   * death findFirst
   */
  export type deathFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * Filter, which death to fetch.
     */
    where?: deathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deaths to fetch.
     */
    orderBy?: deathOrderByWithRelationInput | deathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deaths.
     */
    cursor?: deathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deaths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deaths.
     */
    distinct?: DeathScalarFieldEnum | DeathScalarFieldEnum[]
  }

  /**
   * death findFirstOrThrow
   */
  export type deathFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * Filter, which death to fetch.
     */
    where?: deathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deaths to fetch.
     */
    orderBy?: deathOrderByWithRelationInput | deathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deaths.
     */
    cursor?: deathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deaths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deaths.
     */
    distinct?: DeathScalarFieldEnum | DeathScalarFieldEnum[]
  }

  /**
   * death findMany
   */
  export type deathFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * Filter, which deaths to fetch.
     */
    where?: deathWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deaths to fetch.
     */
    orderBy?: deathOrderByWithRelationInput | deathOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deaths.
     */
    cursor?: deathWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deaths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deaths.
     */
    skip?: number
    distinct?: DeathScalarFieldEnum | DeathScalarFieldEnum[]
  }

  /**
   * death create
   */
  export type deathCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * The data needed to create a death.
     */
    data: XOR<deathCreateInput, deathUncheckedCreateInput>
  }

  /**
   * death createMany
   */
  export type deathCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many deaths.
     */
    data: deathCreateManyInput | deathCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * death update
   */
  export type deathUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * The data needed to update a death.
     */
    data: XOR<deathUpdateInput, deathUncheckedUpdateInput>
    /**
     * Choose, which death to update.
     */
    where: deathWhereUniqueInput
  }

  /**
   * death updateMany
   */
  export type deathUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update deaths.
     */
    data: XOR<deathUpdateManyMutationInput, deathUncheckedUpdateManyInput>
    /**
     * Filter which deaths to update
     */
    where?: deathWhereInput
    /**
     * Limit how many deaths to update.
     */
    limit?: number
  }

  /**
   * death upsert
   */
  export type deathUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * The filter to search for the death to update in case it exists.
     */
    where: deathWhereUniqueInput
    /**
     * In case the death found by the `where` argument doesn't exist, create a new death with this data.
     */
    create: XOR<deathCreateInput, deathUncheckedCreateInput>
    /**
     * In case the death was found with the provided `where` argument, update it with this data.
     */
    update: XOR<deathUpdateInput, deathUncheckedUpdateInput>
  }

  /**
   * death delete
   */
  export type deathDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
    /**
     * Filter which death to delete.
     */
    where: deathWhereUniqueInput
  }

  /**
   * death deleteMany
   */
  export type deathDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deaths to delete
     */
    where?: deathWhereInput
    /**
     * Limit how many deaths to delete.
     */
    limit?: number
  }

  /**
   * death.church
   */
  export type death$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * death without action
   */
  export type deathDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the death
     */
    select?: deathSelect<ExtArgs> | null
    /**
     * Omit specific fields from the death
     */
    omit?: deathOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deathInclude<ExtArgs> | null
  }


  /**
   * Model sundayClass
   */

  export type AggregateSundayClass = {
    _count: SundayClassCountAggregateOutputType | null
    _min: SundayClassMinAggregateOutputType | null
    _max: SundayClassMaxAggregateOutputType | null
  }

  export type SundayClassMinAggregateOutputType = {
    id: string | null
    nom: string | null
    teacher: string | null
    startTime: string | null
    endTime: string | null
    description: string | null
    churchId: string | null
    createdAt: Date | null
    maxStudents: string | null
    ageGroup: string | null
    book: string | null
  }

  export type SundayClassMaxAggregateOutputType = {
    id: string | null
    nom: string | null
    teacher: string | null
    startTime: string | null
    endTime: string | null
    description: string | null
    churchId: string | null
    createdAt: Date | null
    maxStudents: string | null
    ageGroup: string | null
    book: string | null
  }

  export type SundayClassCountAggregateOutputType = {
    id: number
    nom: number
    teacher: number
    startTime: number
    endTime: number
    description: number
    churchId: number
    createdAt: number
    maxStudents: number
    ageGroup: number
    book: number
    _all: number
  }


  export type SundayClassMinAggregateInputType = {
    id?: true
    nom?: true
    teacher?: true
    startTime?: true
    endTime?: true
    description?: true
    churchId?: true
    createdAt?: true
    maxStudents?: true
    ageGroup?: true
    book?: true
  }

  export type SundayClassMaxAggregateInputType = {
    id?: true
    nom?: true
    teacher?: true
    startTime?: true
    endTime?: true
    description?: true
    churchId?: true
    createdAt?: true
    maxStudents?: true
    ageGroup?: true
    book?: true
  }

  export type SundayClassCountAggregateInputType = {
    id?: true
    nom?: true
    teacher?: true
    startTime?: true
    endTime?: true
    description?: true
    churchId?: true
    createdAt?: true
    maxStudents?: true
    ageGroup?: true
    book?: true
    _all?: true
  }

  export type SundayClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sundayClass to aggregate.
     */
    where?: sundayClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sundayClasses to fetch.
     */
    orderBy?: sundayClassOrderByWithRelationInput | sundayClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sundayClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sundayClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sundayClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sundayClasses
    **/
    _count?: true | SundayClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SundayClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SundayClassMaxAggregateInputType
  }

  export type GetSundayClassAggregateType<T extends SundayClassAggregateArgs> = {
        [P in keyof T & keyof AggregateSundayClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSundayClass[P]>
      : GetScalarType<T[P], AggregateSundayClass[P]>
  }




  export type sundayClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sundayClassWhereInput
    orderBy?: sundayClassOrderByWithAggregationInput | sundayClassOrderByWithAggregationInput[]
    by: SundayClassScalarFieldEnum[] | SundayClassScalarFieldEnum
    having?: sundayClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SundayClassCountAggregateInputType | true
    _min?: SundayClassMinAggregateInputType
    _max?: SundayClassMaxAggregateInputType
  }

  export type SundayClassGroupByOutputType = {
    id: string
    nom: string
    teacher: string
    startTime: string
    endTime: string
    description: string
    churchId: string | null
    createdAt: Date
    maxStudents: string
    ageGroup: string
    book: string | null
    _count: SundayClassCountAggregateOutputType | null
    _min: SundayClassMinAggregateOutputType | null
    _max: SundayClassMaxAggregateOutputType | null
  }

  type GetSundayClassGroupByPayload<T extends sundayClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SundayClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SundayClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SundayClassGroupByOutputType[P]>
            : GetScalarType<T[P], SundayClassGroupByOutputType[P]>
        }
      >
    >


  export type sundayClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    teacher?: boolean
    startTime?: boolean
    endTime?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    maxStudents?: boolean
    ageGroup?: boolean
    book?: boolean
    church?: boolean | sundayClass$churchArgs<ExtArgs>
  }, ExtArgs["result"]["sundayClass"]>



  export type sundayClassSelectScalar = {
    id?: boolean
    nom?: boolean
    teacher?: boolean
    startTime?: boolean
    endTime?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    maxStudents?: boolean
    ageGroup?: boolean
    book?: boolean
  }

  export type sundayClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "teacher" | "startTime" | "endTime" | "description" | "churchId" | "createdAt" | "maxStudents" | "ageGroup" | "book", ExtArgs["result"]["sundayClass"]>
  export type sundayClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | sundayClass$churchArgs<ExtArgs>
  }

  export type $sundayClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sundayClass"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nom: string
      teacher: string
      startTime: string
      endTime: string
      description: string
      churchId: string | null
      createdAt: Date
      maxStudents: string
      ageGroup: string
      book: string | null
    }, ExtArgs["result"]["sundayClass"]>
    composites: {}
  }

  type sundayClassGetPayload<S extends boolean | null | undefined | sundayClassDefaultArgs> = $Result.GetResult<Prisma.$sundayClassPayload, S>

  type sundayClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sundayClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SundayClassCountAggregateInputType | true
    }

  export interface sundayClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sundayClass'], meta: { name: 'sundayClass' } }
    /**
     * Find zero or one SundayClass that matches the filter.
     * @param {sundayClassFindUniqueArgs} args - Arguments to find a SundayClass
     * @example
     * // Get one SundayClass
     * const sundayClass = await prisma.sundayClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sundayClassFindUniqueArgs>(args: SelectSubset<T, sundayClassFindUniqueArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SundayClass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sundayClassFindUniqueOrThrowArgs} args - Arguments to find a SundayClass
     * @example
     * // Get one SundayClass
     * const sundayClass = await prisma.sundayClass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sundayClassFindUniqueOrThrowArgs>(args: SelectSubset<T, sundayClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SundayClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sundayClassFindFirstArgs} args - Arguments to find a SundayClass
     * @example
     * // Get one SundayClass
     * const sundayClass = await prisma.sundayClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sundayClassFindFirstArgs>(args?: SelectSubset<T, sundayClassFindFirstArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SundayClass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sundayClassFindFirstOrThrowArgs} args - Arguments to find a SundayClass
     * @example
     * // Get one SundayClass
     * const sundayClass = await prisma.sundayClass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sundayClassFindFirstOrThrowArgs>(args?: SelectSubset<T, sundayClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SundayClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sundayClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SundayClasses
     * const sundayClasses = await prisma.sundayClass.findMany()
     * 
     * // Get first 10 SundayClasses
     * const sundayClasses = await prisma.sundayClass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sundayClassWithIdOnly = await prisma.sundayClass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sundayClassFindManyArgs>(args?: SelectSubset<T, sundayClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SundayClass.
     * @param {sundayClassCreateArgs} args - Arguments to create a SundayClass.
     * @example
     * // Create one SundayClass
     * const SundayClass = await prisma.sundayClass.create({
     *   data: {
     *     // ... data to create a SundayClass
     *   }
     * })
     * 
     */
    create<T extends sundayClassCreateArgs>(args: SelectSubset<T, sundayClassCreateArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SundayClasses.
     * @param {sundayClassCreateManyArgs} args - Arguments to create many SundayClasses.
     * @example
     * // Create many SundayClasses
     * const sundayClass = await prisma.sundayClass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sundayClassCreateManyArgs>(args?: SelectSubset<T, sundayClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SundayClass.
     * @param {sundayClassDeleteArgs} args - Arguments to delete one SundayClass.
     * @example
     * // Delete one SundayClass
     * const SundayClass = await prisma.sundayClass.delete({
     *   where: {
     *     // ... filter to delete one SundayClass
     *   }
     * })
     * 
     */
    delete<T extends sundayClassDeleteArgs>(args: SelectSubset<T, sundayClassDeleteArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SundayClass.
     * @param {sundayClassUpdateArgs} args - Arguments to update one SundayClass.
     * @example
     * // Update one SundayClass
     * const sundayClass = await prisma.sundayClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sundayClassUpdateArgs>(args: SelectSubset<T, sundayClassUpdateArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SundayClasses.
     * @param {sundayClassDeleteManyArgs} args - Arguments to filter SundayClasses to delete.
     * @example
     * // Delete a few SundayClasses
     * const { count } = await prisma.sundayClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sundayClassDeleteManyArgs>(args?: SelectSubset<T, sundayClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SundayClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sundayClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SundayClasses
     * const sundayClass = await prisma.sundayClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sundayClassUpdateManyArgs>(args: SelectSubset<T, sundayClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SundayClass.
     * @param {sundayClassUpsertArgs} args - Arguments to update or create a SundayClass.
     * @example
     * // Update or create a SundayClass
     * const sundayClass = await prisma.sundayClass.upsert({
     *   create: {
     *     // ... data to create a SundayClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SundayClass we want to update
     *   }
     * })
     */
    upsert<T extends sundayClassUpsertArgs>(args: SelectSubset<T, sundayClassUpsertArgs<ExtArgs>>): Prisma__sundayClassClient<$Result.GetResult<Prisma.$sundayClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SundayClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sundayClassCountArgs} args - Arguments to filter SundayClasses to count.
     * @example
     * // Count the number of SundayClasses
     * const count = await prisma.sundayClass.count({
     *   where: {
     *     // ... the filter for the SundayClasses we want to count
     *   }
     * })
    **/
    count<T extends sundayClassCountArgs>(
      args?: Subset<T, sundayClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SundayClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SundayClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SundayClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SundayClassAggregateArgs>(args: Subset<T, SundayClassAggregateArgs>): Prisma.PrismaPromise<GetSundayClassAggregateType<T>>

    /**
     * Group by SundayClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sundayClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sundayClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sundayClassGroupByArgs['orderBy'] }
        : { orderBy?: sundayClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sundayClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSundayClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sundayClass model
   */
  readonly fields: sundayClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sundayClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sundayClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends sundayClass$churchArgs<ExtArgs> = {}>(args?: Subset<T, sundayClass$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sundayClass model
   */
  interface sundayClassFieldRefs {
    readonly id: FieldRef<"sundayClass", 'String'>
    readonly nom: FieldRef<"sundayClass", 'String'>
    readonly teacher: FieldRef<"sundayClass", 'String'>
    readonly startTime: FieldRef<"sundayClass", 'String'>
    readonly endTime: FieldRef<"sundayClass", 'String'>
    readonly description: FieldRef<"sundayClass", 'String'>
    readonly churchId: FieldRef<"sundayClass", 'String'>
    readonly createdAt: FieldRef<"sundayClass", 'DateTime'>
    readonly maxStudents: FieldRef<"sundayClass", 'String'>
    readonly ageGroup: FieldRef<"sundayClass", 'String'>
    readonly book: FieldRef<"sundayClass", 'String'>
  }
    

  // Custom InputTypes
  /**
   * sundayClass findUnique
   */
  export type sundayClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * Filter, which sundayClass to fetch.
     */
    where: sundayClassWhereUniqueInput
  }

  /**
   * sundayClass findUniqueOrThrow
   */
  export type sundayClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * Filter, which sundayClass to fetch.
     */
    where: sundayClassWhereUniqueInput
  }

  /**
   * sundayClass findFirst
   */
  export type sundayClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * Filter, which sundayClass to fetch.
     */
    where?: sundayClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sundayClasses to fetch.
     */
    orderBy?: sundayClassOrderByWithRelationInput | sundayClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sundayClasses.
     */
    cursor?: sundayClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sundayClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sundayClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sundayClasses.
     */
    distinct?: SundayClassScalarFieldEnum | SundayClassScalarFieldEnum[]
  }

  /**
   * sundayClass findFirstOrThrow
   */
  export type sundayClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * Filter, which sundayClass to fetch.
     */
    where?: sundayClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sundayClasses to fetch.
     */
    orderBy?: sundayClassOrderByWithRelationInput | sundayClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sundayClasses.
     */
    cursor?: sundayClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sundayClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sundayClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sundayClasses.
     */
    distinct?: SundayClassScalarFieldEnum | SundayClassScalarFieldEnum[]
  }

  /**
   * sundayClass findMany
   */
  export type sundayClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * Filter, which sundayClasses to fetch.
     */
    where?: sundayClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sundayClasses to fetch.
     */
    orderBy?: sundayClassOrderByWithRelationInput | sundayClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sundayClasses.
     */
    cursor?: sundayClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sundayClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sundayClasses.
     */
    skip?: number
    distinct?: SundayClassScalarFieldEnum | SundayClassScalarFieldEnum[]
  }

  /**
   * sundayClass create
   */
  export type sundayClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * The data needed to create a sundayClass.
     */
    data: XOR<sundayClassCreateInput, sundayClassUncheckedCreateInput>
  }

  /**
   * sundayClass createMany
   */
  export type sundayClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sundayClasses.
     */
    data: sundayClassCreateManyInput | sundayClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sundayClass update
   */
  export type sundayClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * The data needed to update a sundayClass.
     */
    data: XOR<sundayClassUpdateInput, sundayClassUncheckedUpdateInput>
    /**
     * Choose, which sundayClass to update.
     */
    where: sundayClassWhereUniqueInput
  }

  /**
   * sundayClass updateMany
   */
  export type sundayClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sundayClasses.
     */
    data: XOR<sundayClassUpdateManyMutationInput, sundayClassUncheckedUpdateManyInput>
    /**
     * Filter which sundayClasses to update
     */
    where?: sundayClassWhereInput
    /**
     * Limit how many sundayClasses to update.
     */
    limit?: number
  }

  /**
   * sundayClass upsert
   */
  export type sundayClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * The filter to search for the sundayClass to update in case it exists.
     */
    where: sundayClassWhereUniqueInput
    /**
     * In case the sundayClass found by the `where` argument doesn't exist, create a new sundayClass with this data.
     */
    create: XOR<sundayClassCreateInput, sundayClassUncheckedCreateInput>
    /**
     * In case the sundayClass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sundayClassUpdateInput, sundayClassUncheckedUpdateInput>
  }

  /**
   * sundayClass delete
   */
  export type sundayClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
    /**
     * Filter which sundayClass to delete.
     */
    where: sundayClassWhereUniqueInput
  }

  /**
   * sundayClass deleteMany
   */
  export type sundayClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sundayClasses to delete
     */
    where?: sundayClassWhereInput
    /**
     * Limit how many sundayClasses to delete.
     */
    limit?: number
  }

  /**
   * sundayClass.church
   */
  export type sundayClass$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * sundayClass without action
   */
  export type sundayClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sundayClass
     */
    select?: sundayClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sundayClass
     */
    omit?: sundayClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sundayClassInclude<ExtArgs> | null
  }


  /**
   * Model expense
   */

  export type AggregateExpense = {
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  export type ExpenseAvgAggregateOutputType = {
    amount: number | null
  }

  export type ExpenseSumAggregateOutputType = {
    amount: number | null
  }

  export type ExpenseMinAggregateOutputType = {
    id: string | null
    amount: number | null
    category: string | null
    date: Date | null
    paymentMethod: string | null
    description: string | null
    churchId: string | null
  }

  export type ExpenseMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    category: string | null
    date: Date | null
    paymentMethod: string | null
    description: string | null
    churchId: string | null
  }

  export type ExpenseCountAggregateOutputType = {
    id: number
    amount: number
    category: number
    date: number
    paymentMethod: number
    description: number
    churchId: number
    _all: number
  }


  export type ExpenseAvgAggregateInputType = {
    amount?: true
  }

  export type ExpenseSumAggregateInputType = {
    amount?: true
  }

  export type ExpenseMinAggregateInputType = {
    id?: true
    amount?: true
    category?: true
    date?: true
    paymentMethod?: true
    description?: true
    churchId?: true
  }

  export type ExpenseMaxAggregateInputType = {
    id?: true
    amount?: true
    category?: true
    date?: true
    paymentMethod?: true
    description?: true
    churchId?: true
  }

  export type ExpenseCountAggregateInputType = {
    id?: true
    amount?: true
    category?: true
    date?: true
    paymentMethod?: true
    description?: true
    churchId?: true
    _all?: true
  }

  export type ExpenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expense to aggregate.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned expenses
    **/
    _count?: true | ExpenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseMaxAggregateInputType
  }

  export type GetExpenseAggregateType<T extends ExpenseAggregateArgs> = {
        [P in keyof T & keyof AggregateExpense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpense[P]>
      : GetScalarType<T[P], AggregateExpense[P]>
  }




  export type expenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expenseWhereInput
    orderBy?: expenseOrderByWithAggregationInput | expenseOrderByWithAggregationInput[]
    by: ExpenseScalarFieldEnum[] | ExpenseScalarFieldEnum
    having?: expenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseCountAggregateInputType | true
    _avg?: ExpenseAvgAggregateInputType
    _sum?: ExpenseSumAggregateInputType
    _min?: ExpenseMinAggregateInputType
    _max?: ExpenseMaxAggregateInputType
  }

  export type ExpenseGroupByOutputType = {
    id: string
    amount: number
    category: string
    date: Date
    paymentMethod: string
    description: string
    churchId: string | null
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  type GetExpenseGroupByPayload<T extends expenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
        }
      >
    >


  export type expenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    category?: boolean
    date?: boolean
    paymentMethod?: boolean
    description?: boolean
    churchId?: boolean
    church?: boolean | expense$churchArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>



  export type expenseSelectScalar = {
    id?: boolean
    amount?: boolean
    category?: boolean
    date?: boolean
    paymentMethod?: boolean
    description?: boolean
    churchId?: boolean
  }

  export type expenseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "category" | "date" | "paymentMethod" | "description" | "churchId", ExtArgs["result"]["expense"]>
  export type expenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | expense$churchArgs<ExtArgs>
  }

  export type $expensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "expense"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      category: string
      date: Date
      paymentMethod: string
      description: string
      churchId: string | null
    }, ExtArgs["result"]["expense"]>
    composites: {}
  }

  type expenseGetPayload<S extends boolean | null | undefined | expenseDefaultArgs> = $Result.GetResult<Prisma.$expensePayload, S>

  type expenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<expenseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseCountAggregateInputType | true
    }

  export interface expenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['expense'], meta: { name: 'expense' } }
    /**
     * Find zero or one Expense that matches the filter.
     * @param {expenseFindUniqueArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends expenseFindUniqueArgs>(args: SelectSubset<T, expenseFindUniqueArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expense that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {expenseFindUniqueOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends expenseFindUniqueOrThrowArgs>(args: SelectSubset<T, expenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseFindFirstArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends expenseFindFirstArgs>(args?: SelectSubset<T, expenseFindFirstArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseFindFirstOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends expenseFindFirstOrThrowArgs>(args?: SelectSubset<T, expenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expense.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expense.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseWithIdOnly = await prisma.expense.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends expenseFindManyArgs>(args?: SelectSubset<T, expenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expense.
     * @param {expenseCreateArgs} args - Arguments to create a Expense.
     * @example
     * // Create one Expense
     * const Expense = await prisma.expense.create({
     *   data: {
     *     // ... data to create a Expense
     *   }
     * })
     * 
     */
    create<T extends expenseCreateArgs>(args: SelectSubset<T, expenseCreateArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expenses.
     * @param {expenseCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expense = await prisma.expense.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends expenseCreateManyArgs>(args?: SelectSubset<T, expenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Expense.
     * @param {expenseDeleteArgs} args - Arguments to delete one Expense.
     * @example
     * // Delete one Expense
     * const Expense = await prisma.expense.delete({
     *   where: {
     *     // ... filter to delete one Expense
     *   }
     * })
     * 
     */
    delete<T extends expenseDeleteArgs>(args: SelectSubset<T, expenseDeleteArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expense.
     * @param {expenseUpdateArgs} args - Arguments to update one Expense.
     * @example
     * // Update one Expense
     * const expense = await prisma.expense.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends expenseUpdateArgs>(args: SelectSubset<T, expenseUpdateArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expenses.
     * @param {expenseDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expense.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends expenseDeleteManyArgs>(args?: SelectSubset<T, expenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends expenseUpdateManyArgs>(args: SelectSubset<T, expenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Expense.
     * @param {expenseUpsertArgs} args - Arguments to update or create a Expense.
     * @example
     * // Update or create a Expense
     * const expense = await prisma.expense.upsert({
     *   create: {
     *     // ... data to create a Expense
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expense we want to update
     *   }
     * })
     */
    upsert<T extends expenseUpsertArgs>(args: SelectSubset<T, expenseUpsertArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expense.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends expenseCountArgs>(
      args?: Subset<T, expenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseAggregateArgs>(args: Subset<T, ExpenseAggregateArgs>): Prisma.PrismaPromise<GetExpenseAggregateType<T>>

    /**
     * Group by Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends expenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: expenseGroupByArgs['orderBy'] }
        : { orderBy?: expenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, expenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the expense model
   */
  readonly fields: expenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for expense.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__expenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends expense$churchArgs<ExtArgs> = {}>(args?: Subset<T, expense$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the expense model
   */
  interface expenseFieldRefs {
    readonly id: FieldRef<"expense", 'String'>
    readonly amount: FieldRef<"expense", 'Int'>
    readonly category: FieldRef<"expense", 'String'>
    readonly date: FieldRef<"expense", 'DateTime'>
    readonly paymentMethod: FieldRef<"expense", 'String'>
    readonly description: FieldRef<"expense", 'String'>
    readonly churchId: FieldRef<"expense", 'String'>
  }
    

  // Custom InputTypes
  /**
   * expense findUnique
   */
  export type expenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense findUniqueOrThrow
   */
  export type expenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense findFirst
   */
  export type expenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expenses.
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * expense findFirstOrThrow
   */
  export type expenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expenses.
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * expense findMany
   */
  export type expenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expenses to fetch.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing expenses.
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * expense create
   */
  export type expenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * The data needed to create a expense.
     */
    data: XOR<expenseCreateInput, expenseUncheckedCreateInput>
  }

  /**
   * expense createMany
   */
  export type expenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many expenses.
     */
    data: expenseCreateManyInput | expenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * expense update
   */
  export type expenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * The data needed to update a expense.
     */
    data: XOR<expenseUpdateInput, expenseUncheckedUpdateInput>
    /**
     * Choose, which expense to update.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense updateMany
   */
  export type expenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update expenses.
     */
    data: XOR<expenseUpdateManyMutationInput, expenseUncheckedUpdateManyInput>
    /**
     * Filter which expenses to update
     */
    where?: expenseWhereInput
    /**
     * Limit how many expenses to update.
     */
    limit?: number
  }

  /**
   * expense upsert
   */
  export type expenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * The filter to search for the expense to update in case it exists.
     */
    where: expenseWhereUniqueInput
    /**
     * In case the expense found by the `where` argument doesn't exist, create a new expense with this data.
     */
    create: XOR<expenseCreateInput, expenseUncheckedCreateInput>
    /**
     * In case the expense was found with the provided `where` argument, update it with this data.
     */
    update: XOR<expenseUpdateInput, expenseUncheckedUpdateInput>
  }

  /**
   * expense delete
   */
  export type expenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter which expense to delete.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense deleteMany
   */
  export type expenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expenses to delete
     */
    where?: expenseWhereInput
    /**
     * Limit how many expenses to delete.
     */
    limit?: number
  }

  /**
   * expense.church
   */
  export type expense$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * expense without action
   */
  export type expenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
  }


  /**
   * Model offering
   */

  export type AggregateOffering = {
    _count: OfferingCountAggregateOutputType | null
    _avg: OfferingAvgAggregateOutputType | null
    _sum: OfferingSumAggregateOutputType | null
    _min: OfferingMinAggregateOutputType | null
    _max: OfferingMaxAggregateOutputType | null
  }

  export type OfferingAvgAggregateOutputType = {
    amount: number | null
  }

  export type OfferingSumAggregateOutputType = {
    amount: number | null
  }

  export type OfferingMinAggregateOutputType = {
    id: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
    status: string | null
  }

  export type OfferingMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
    status: string | null
  }

  export type OfferingCountAggregateOutputType = {
    id: number
    amount: number
    date: number
    paymentMethod: number
    note: number
    churchId: number
    status: number
    _all: number
  }


  export type OfferingAvgAggregateInputType = {
    amount?: true
  }

  export type OfferingSumAggregateInputType = {
    amount?: true
  }

  export type OfferingMinAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
    status?: true
  }

  export type OfferingMaxAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
    status?: true
  }

  export type OfferingCountAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
    status?: true
    _all?: true
  }

  export type OfferingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which offering to aggregate.
     */
    where?: offeringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offerings to fetch.
     */
    orderBy?: offeringOrderByWithRelationInput | offeringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: offeringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offerings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offerings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned offerings
    **/
    _count?: true | OfferingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfferingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfferingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfferingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfferingMaxAggregateInputType
  }

  export type GetOfferingAggregateType<T extends OfferingAggregateArgs> = {
        [P in keyof T & keyof AggregateOffering]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffering[P]>
      : GetScalarType<T[P], AggregateOffering[P]>
  }




  export type offeringGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: offeringWhereInput
    orderBy?: offeringOrderByWithAggregationInput | offeringOrderByWithAggregationInput[]
    by: OfferingScalarFieldEnum[] | OfferingScalarFieldEnum
    having?: offeringScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfferingCountAggregateInputType | true
    _avg?: OfferingAvgAggregateInputType
    _sum?: OfferingSumAggregateInputType
    _min?: OfferingMinAggregateInputType
    _max?: OfferingMaxAggregateInputType
  }

  export type OfferingGroupByOutputType = {
    id: string
    amount: number
    date: Date
    paymentMethod: string
    note: string
    churchId: string | null
    status: string | null
    _count: OfferingCountAggregateOutputType | null
    _avg: OfferingAvgAggregateOutputType | null
    _sum: OfferingSumAggregateOutputType | null
    _min: OfferingMinAggregateOutputType | null
    _max: OfferingMaxAggregateOutputType | null
  }

  type GetOfferingGroupByPayload<T extends offeringGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfferingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfferingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfferingGroupByOutputType[P]>
            : GetScalarType<T[P], OfferingGroupByOutputType[P]>
        }
      >
    >


  export type offeringSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
    status?: boolean
    church?: boolean | offering$churchArgs<ExtArgs>
  }, ExtArgs["result"]["offering"]>



  export type offeringSelectScalar = {
    id?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
    status?: boolean
  }

  export type offeringOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "date" | "paymentMethod" | "note" | "churchId" | "status", ExtArgs["result"]["offering"]>
  export type offeringInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | offering$churchArgs<ExtArgs>
  }

  export type $offeringPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "offering"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      date: Date
      paymentMethod: string
      note: string
      churchId: string | null
      status: string | null
    }, ExtArgs["result"]["offering"]>
    composites: {}
  }

  type offeringGetPayload<S extends boolean | null | undefined | offeringDefaultArgs> = $Result.GetResult<Prisma.$offeringPayload, S>

  type offeringCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<offeringFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OfferingCountAggregateInputType | true
    }

  export interface offeringDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['offering'], meta: { name: 'offering' } }
    /**
     * Find zero or one Offering that matches the filter.
     * @param {offeringFindUniqueArgs} args - Arguments to find a Offering
     * @example
     * // Get one Offering
     * const offering = await prisma.offering.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends offeringFindUniqueArgs>(args: SelectSubset<T, offeringFindUniqueArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Offering that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {offeringFindUniqueOrThrowArgs} args - Arguments to find a Offering
     * @example
     * // Get one Offering
     * const offering = await prisma.offering.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends offeringFindUniqueOrThrowArgs>(args: SelectSubset<T, offeringFindUniqueOrThrowArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Offering that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offeringFindFirstArgs} args - Arguments to find a Offering
     * @example
     * // Get one Offering
     * const offering = await prisma.offering.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends offeringFindFirstArgs>(args?: SelectSubset<T, offeringFindFirstArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Offering that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offeringFindFirstOrThrowArgs} args - Arguments to find a Offering
     * @example
     * // Get one Offering
     * const offering = await prisma.offering.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends offeringFindFirstOrThrowArgs>(args?: SelectSubset<T, offeringFindFirstOrThrowArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Offerings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offeringFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offerings
     * const offerings = await prisma.offering.findMany()
     * 
     * // Get first 10 Offerings
     * const offerings = await prisma.offering.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offeringWithIdOnly = await prisma.offering.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends offeringFindManyArgs>(args?: SelectSubset<T, offeringFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Offering.
     * @param {offeringCreateArgs} args - Arguments to create a Offering.
     * @example
     * // Create one Offering
     * const Offering = await prisma.offering.create({
     *   data: {
     *     // ... data to create a Offering
     *   }
     * })
     * 
     */
    create<T extends offeringCreateArgs>(args: SelectSubset<T, offeringCreateArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Offerings.
     * @param {offeringCreateManyArgs} args - Arguments to create many Offerings.
     * @example
     * // Create many Offerings
     * const offering = await prisma.offering.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends offeringCreateManyArgs>(args?: SelectSubset<T, offeringCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Offering.
     * @param {offeringDeleteArgs} args - Arguments to delete one Offering.
     * @example
     * // Delete one Offering
     * const Offering = await prisma.offering.delete({
     *   where: {
     *     // ... filter to delete one Offering
     *   }
     * })
     * 
     */
    delete<T extends offeringDeleteArgs>(args: SelectSubset<T, offeringDeleteArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Offering.
     * @param {offeringUpdateArgs} args - Arguments to update one Offering.
     * @example
     * // Update one Offering
     * const offering = await prisma.offering.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends offeringUpdateArgs>(args: SelectSubset<T, offeringUpdateArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Offerings.
     * @param {offeringDeleteManyArgs} args - Arguments to filter Offerings to delete.
     * @example
     * // Delete a few Offerings
     * const { count } = await prisma.offering.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends offeringDeleteManyArgs>(args?: SelectSubset<T, offeringDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offerings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offeringUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offerings
     * const offering = await prisma.offering.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends offeringUpdateManyArgs>(args: SelectSubset<T, offeringUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Offering.
     * @param {offeringUpsertArgs} args - Arguments to update or create a Offering.
     * @example
     * // Update or create a Offering
     * const offering = await prisma.offering.upsert({
     *   create: {
     *     // ... data to create a Offering
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offering we want to update
     *   }
     * })
     */
    upsert<T extends offeringUpsertArgs>(args: SelectSubset<T, offeringUpsertArgs<ExtArgs>>): Prisma__offeringClient<$Result.GetResult<Prisma.$offeringPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Offerings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offeringCountArgs} args - Arguments to filter Offerings to count.
     * @example
     * // Count the number of Offerings
     * const count = await prisma.offering.count({
     *   where: {
     *     // ... the filter for the Offerings we want to count
     *   }
     * })
    **/
    count<T extends offeringCountArgs>(
      args?: Subset<T, offeringCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfferingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offering.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfferingAggregateArgs>(args: Subset<T, OfferingAggregateArgs>): Prisma.PrismaPromise<GetOfferingAggregateType<T>>

    /**
     * Group by Offering.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {offeringGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends offeringGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: offeringGroupByArgs['orderBy'] }
        : { orderBy?: offeringGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, offeringGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfferingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the offering model
   */
  readonly fields: offeringFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for offering.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__offeringClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends offering$churchArgs<ExtArgs> = {}>(args?: Subset<T, offering$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the offering model
   */
  interface offeringFieldRefs {
    readonly id: FieldRef<"offering", 'String'>
    readonly amount: FieldRef<"offering", 'Int'>
    readonly date: FieldRef<"offering", 'DateTime'>
    readonly paymentMethod: FieldRef<"offering", 'String'>
    readonly note: FieldRef<"offering", 'String'>
    readonly churchId: FieldRef<"offering", 'String'>
    readonly status: FieldRef<"offering", 'String'>
  }
    

  // Custom InputTypes
  /**
   * offering findUnique
   */
  export type offeringFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * Filter, which offering to fetch.
     */
    where: offeringWhereUniqueInput
  }

  /**
   * offering findUniqueOrThrow
   */
  export type offeringFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * Filter, which offering to fetch.
     */
    where: offeringWhereUniqueInput
  }

  /**
   * offering findFirst
   */
  export type offeringFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * Filter, which offering to fetch.
     */
    where?: offeringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offerings to fetch.
     */
    orderBy?: offeringOrderByWithRelationInput | offeringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offerings.
     */
    cursor?: offeringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offerings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offerings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offerings.
     */
    distinct?: OfferingScalarFieldEnum | OfferingScalarFieldEnum[]
  }

  /**
   * offering findFirstOrThrow
   */
  export type offeringFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * Filter, which offering to fetch.
     */
    where?: offeringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offerings to fetch.
     */
    orderBy?: offeringOrderByWithRelationInput | offeringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offerings.
     */
    cursor?: offeringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offerings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offerings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offerings.
     */
    distinct?: OfferingScalarFieldEnum | OfferingScalarFieldEnum[]
  }

  /**
   * offering findMany
   */
  export type offeringFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * Filter, which offerings to fetch.
     */
    where?: offeringWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offerings to fetch.
     */
    orderBy?: offeringOrderByWithRelationInput | offeringOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing offerings.
     */
    cursor?: offeringWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offerings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offerings.
     */
    skip?: number
    distinct?: OfferingScalarFieldEnum | OfferingScalarFieldEnum[]
  }

  /**
   * offering create
   */
  export type offeringCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * The data needed to create a offering.
     */
    data: XOR<offeringCreateInput, offeringUncheckedCreateInput>
  }

  /**
   * offering createMany
   */
  export type offeringCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many offerings.
     */
    data: offeringCreateManyInput | offeringCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * offering update
   */
  export type offeringUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * The data needed to update a offering.
     */
    data: XOR<offeringUpdateInput, offeringUncheckedUpdateInput>
    /**
     * Choose, which offering to update.
     */
    where: offeringWhereUniqueInput
  }

  /**
   * offering updateMany
   */
  export type offeringUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update offerings.
     */
    data: XOR<offeringUpdateManyMutationInput, offeringUncheckedUpdateManyInput>
    /**
     * Filter which offerings to update
     */
    where?: offeringWhereInput
    /**
     * Limit how many offerings to update.
     */
    limit?: number
  }

  /**
   * offering upsert
   */
  export type offeringUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * The filter to search for the offering to update in case it exists.
     */
    where: offeringWhereUniqueInput
    /**
     * In case the offering found by the `where` argument doesn't exist, create a new offering with this data.
     */
    create: XOR<offeringCreateInput, offeringUncheckedCreateInput>
    /**
     * In case the offering was found with the provided `where` argument, update it with this data.
     */
    update: XOR<offeringUpdateInput, offeringUncheckedUpdateInput>
  }

  /**
   * offering delete
   */
  export type offeringDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
    /**
     * Filter which offering to delete.
     */
    where: offeringWhereUniqueInput
  }

  /**
   * offering deleteMany
   */
  export type offeringDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which offerings to delete
     */
    where?: offeringWhereInput
    /**
     * Limit how many offerings to delete.
     */
    limit?: number
  }

  /**
   * offering.church
   */
  export type offering$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * offering without action
   */
  export type offeringDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offering
     */
    select?: offeringSelect<ExtArgs> | null
    /**
     * Omit specific fields from the offering
     */
    omit?: offeringOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: offeringInclude<ExtArgs> | null
  }


  /**
   * Model tithing
   */

  export type AggregateTithing = {
    _count: TithingCountAggregateOutputType | null
    _avg: TithingAvgAggregateOutputType | null
    _sum: TithingSumAggregateOutputType | null
    _min: TithingMinAggregateOutputType | null
    _max: TithingMaxAggregateOutputType | null
  }

  export type TithingAvgAggregateOutputType = {
    amount: number | null
  }

  export type TithingSumAggregateOutputType = {
    amount: number | null
  }

  export type TithingMinAggregateOutputType = {
    id: string | null
    contributorName: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
  }

  export type TithingMaxAggregateOutputType = {
    id: string | null
    contributorName: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
  }

  export type TithingCountAggregateOutputType = {
    id: number
    contributorName: number
    amount: number
    date: number
    paymentMethod: number
    note: number
    churchId: number
    _all: number
  }


  export type TithingAvgAggregateInputType = {
    amount?: true
  }

  export type TithingSumAggregateInputType = {
    amount?: true
  }

  export type TithingMinAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
  }

  export type TithingMaxAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
  }

  export type TithingCountAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
    _all?: true
  }

  export type TithingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tithing to aggregate.
     */
    where?: tithingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tithings to fetch.
     */
    orderBy?: tithingOrderByWithRelationInput | tithingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tithingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tithings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tithings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tithings
    **/
    _count?: true | TithingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TithingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TithingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TithingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TithingMaxAggregateInputType
  }

  export type GetTithingAggregateType<T extends TithingAggregateArgs> = {
        [P in keyof T & keyof AggregateTithing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTithing[P]>
      : GetScalarType<T[P], AggregateTithing[P]>
  }




  export type tithingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tithingWhereInput
    orderBy?: tithingOrderByWithAggregationInput | tithingOrderByWithAggregationInput[]
    by: TithingScalarFieldEnum[] | TithingScalarFieldEnum
    having?: tithingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TithingCountAggregateInputType | true
    _avg?: TithingAvgAggregateInputType
    _sum?: TithingSumAggregateInputType
    _min?: TithingMinAggregateInputType
    _max?: TithingMaxAggregateInputType
  }

  export type TithingGroupByOutputType = {
    id: string
    contributorName: string
    amount: number
    date: Date
    paymentMethod: string
    note: string
    churchId: string | null
    _count: TithingCountAggregateOutputType | null
    _avg: TithingAvgAggregateOutputType | null
    _sum: TithingSumAggregateOutputType | null
    _min: TithingMinAggregateOutputType | null
    _max: TithingMaxAggregateOutputType | null
  }

  type GetTithingGroupByPayload<T extends tithingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TithingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TithingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TithingGroupByOutputType[P]>
            : GetScalarType<T[P], TithingGroupByOutputType[P]>
        }
      >
    >


  export type tithingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contributorName?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
    church?: boolean | tithing$churchArgs<ExtArgs>
  }, ExtArgs["result"]["tithing"]>



  export type tithingSelectScalar = {
    id?: boolean
    contributorName?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
  }

  export type tithingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contributorName" | "amount" | "date" | "paymentMethod" | "note" | "churchId", ExtArgs["result"]["tithing"]>
  export type tithingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | tithing$churchArgs<ExtArgs>
  }

  export type $tithingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tithing"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contributorName: string
      amount: number
      date: Date
      paymentMethod: string
      note: string
      churchId: string | null
    }, ExtArgs["result"]["tithing"]>
    composites: {}
  }

  type tithingGetPayload<S extends boolean | null | undefined | tithingDefaultArgs> = $Result.GetResult<Prisma.$tithingPayload, S>

  type tithingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tithingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TithingCountAggregateInputType | true
    }

  export interface tithingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tithing'], meta: { name: 'tithing' } }
    /**
     * Find zero or one Tithing that matches the filter.
     * @param {tithingFindUniqueArgs} args - Arguments to find a Tithing
     * @example
     * // Get one Tithing
     * const tithing = await prisma.tithing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tithingFindUniqueArgs>(args: SelectSubset<T, tithingFindUniqueArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tithing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tithingFindUniqueOrThrowArgs} args - Arguments to find a Tithing
     * @example
     * // Get one Tithing
     * const tithing = await prisma.tithing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tithingFindUniqueOrThrowArgs>(args: SelectSubset<T, tithingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tithing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tithingFindFirstArgs} args - Arguments to find a Tithing
     * @example
     * // Get one Tithing
     * const tithing = await prisma.tithing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tithingFindFirstArgs>(args?: SelectSubset<T, tithingFindFirstArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tithing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tithingFindFirstOrThrowArgs} args - Arguments to find a Tithing
     * @example
     * // Get one Tithing
     * const tithing = await prisma.tithing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tithingFindFirstOrThrowArgs>(args?: SelectSubset<T, tithingFindFirstOrThrowArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tithings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tithingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tithings
     * const tithings = await prisma.tithing.findMany()
     * 
     * // Get first 10 Tithings
     * const tithings = await prisma.tithing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tithingWithIdOnly = await prisma.tithing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends tithingFindManyArgs>(args?: SelectSubset<T, tithingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tithing.
     * @param {tithingCreateArgs} args - Arguments to create a Tithing.
     * @example
     * // Create one Tithing
     * const Tithing = await prisma.tithing.create({
     *   data: {
     *     // ... data to create a Tithing
     *   }
     * })
     * 
     */
    create<T extends tithingCreateArgs>(args: SelectSubset<T, tithingCreateArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tithings.
     * @param {tithingCreateManyArgs} args - Arguments to create many Tithings.
     * @example
     * // Create many Tithings
     * const tithing = await prisma.tithing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tithingCreateManyArgs>(args?: SelectSubset<T, tithingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tithing.
     * @param {tithingDeleteArgs} args - Arguments to delete one Tithing.
     * @example
     * // Delete one Tithing
     * const Tithing = await prisma.tithing.delete({
     *   where: {
     *     // ... filter to delete one Tithing
     *   }
     * })
     * 
     */
    delete<T extends tithingDeleteArgs>(args: SelectSubset<T, tithingDeleteArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tithing.
     * @param {tithingUpdateArgs} args - Arguments to update one Tithing.
     * @example
     * // Update one Tithing
     * const tithing = await prisma.tithing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tithingUpdateArgs>(args: SelectSubset<T, tithingUpdateArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tithings.
     * @param {tithingDeleteManyArgs} args - Arguments to filter Tithings to delete.
     * @example
     * // Delete a few Tithings
     * const { count } = await prisma.tithing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tithingDeleteManyArgs>(args?: SelectSubset<T, tithingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tithings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tithingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tithings
     * const tithing = await prisma.tithing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tithingUpdateManyArgs>(args: SelectSubset<T, tithingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tithing.
     * @param {tithingUpsertArgs} args - Arguments to update or create a Tithing.
     * @example
     * // Update or create a Tithing
     * const tithing = await prisma.tithing.upsert({
     *   create: {
     *     // ... data to create a Tithing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tithing we want to update
     *   }
     * })
     */
    upsert<T extends tithingUpsertArgs>(args: SelectSubset<T, tithingUpsertArgs<ExtArgs>>): Prisma__tithingClient<$Result.GetResult<Prisma.$tithingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tithings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tithingCountArgs} args - Arguments to filter Tithings to count.
     * @example
     * // Count the number of Tithings
     * const count = await prisma.tithing.count({
     *   where: {
     *     // ... the filter for the Tithings we want to count
     *   }
     * })
    **/
    count<T extends tithingCountArgs>(
      args?: Subset<T, tithingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TithingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tithing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TithingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TithingAggregateArgs>(args: Subset<T, TithingAggregateArgs>): Prisma.PrismaPromise<GetTithingAggregateType<T>>

    /**
     * Group by Tithing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tithingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tithingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tithingGroupByArgs['orderBy'] }
        : { orderBy?: tithingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tithingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTithingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tithing model
   */
  readonly fields: tithingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tithing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tithingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends tithing$churchArgs<ExtArgs> = {}>(args?: Subset<T, tithing$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tithing model
   */
  interface tithingFieldRefs {
    readonly id: FieldRef<"tithing", 'String'>
    readonly contributorName: FieldRef<"tithing", 'String'>
    readonly amount: FieldRef<"tithing", 'Int'>
    readonly date: FieldRef<"tithing", 'DateTime'>
    readonly paymentMethod: FieldRef<"tithing", 'String'>
    readonly note: FieldRef<"tithing", 'String'>
    readonly churchId: FieldRef<"tithing", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tithing findUnique
   */
  export type tithingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * Filter, which tithing to fetch.
     */
    where: tithingWhereUniqueInput
  }

  /**
   * tithing findUniqueOrThrow
   */
  export type tithingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * Filter, which tithing to fetch.
     */
    where: tithingWhereUniqueInput
  }

  /**
   * tithing findFirst
   */
  export type tithingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * Filter, which tithing to fetch.
     */
    where?: tithingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tithings to fetch.
     */
    orderBy?: tithingOrderByWithRelationInput | tithingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tithings.
     */
    cursor?: tithingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tithings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tithings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tithings.
     */
    distinct?: TithingScalarFieldEnum | TithingScalarFieldEnum[]
  }

  /**
   * tithing findFirstOrThrow
   */
  export type tithingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * Filter, which tithing to fetch.
     */
    where?: tithingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tithings to fetch.
     */
    orderBy?: tithingOrderByWithRelationInput | tithingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tithings.
     */
    cursor?: tithingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tithings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tithings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tithings.
     */
    distinct?: TithingScalarFieldEnum | TithingScalarFieldEnum[]
  }

  /**
   * tithing findMany
   */
  export type tithingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * Filter, which tithings to fetch.
     */
    where?: tithingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tithings to fetch.
     */
    orderBy?: tithingOrderByWithRelationInput | tithingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tithings.
     */
    cursor?: tithingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tithings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tithings.
     */
    skip?: number
    distinct?: TithingScalarFieldEnum | TithingScalarFieldEnum[]
  }

  /**
   * tithing create
   */
  export type tithingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * The data needed to create a tithing.
     */
    data: XOR<tithingCreateInput, tithingUncheckedCreateInput>
  }

  /**
   * tithing createMany
   */
  export type tithingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tithings.
     */
    data: tithingCreateManyInput | tithingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tithing update
   */
  export type tithingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * The data needed to update a tithing.
     */
    data: XOR<tithingUpdateInput, tithingUncheckedUpdateInput>
    /**
     * Choose, which tithing to update.
     */
    where: tithingWhereUniqueInput
  }

  /**
   * tithing updateMany
   */
  export type tithingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tithings.
     */
    data: XOR<tithingUpdateManyMutationInput, tithingUncheckedUpdateManyInput>
    /**
     * Filter which tithings to update
     */
    where?: tithingWhereInput
    /**
     * Limit how many tithings to update.
     */
    limit?: number
  }

  /**
   * tithing upsert
   */
  export type tithingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * The filter to search for the tithing to update in case it exists.
     */
    where: tithingWhereUniqueInput
    /**
     * In case the tithing found by the `where` argument doesn't exist, create a new tithing with this data.
     */
    create: XOR<tithingCreateInput, tithingUncheckedCreateInput>
    /**
     * In case the tithing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tithingUpdateInput, tithingUncheckedUpdateInput>
  }

  /**
   * tithing delete
   */
  export type tithingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
    /**
     * Filter which tithing to delete.
     */
    where: tithingWhereUniqueInput
  }

  /**
   * tithing deleteMany
   */
  export type tithingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tithings to delete
     */
    where?: tithingWhereInput
    /**
     * Limit how many tithings to delete.
     */
    limit?: number
  }

  /**
   * tithing.church
   */
  export type tithing$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * tithing without action
   */
  export type tithingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tithing
     */
    select?: tithingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tithing
     */
    omit?: tithingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tithingInclude<ExtArgs> | null
  }


  /**
   * Model donation
   */

  export type AggregateDonation = {
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  export type DonationAvgAggregateOutputType = {
    amount: number | null
  }

  export type DonationSumAggregateOutputType = {
    amount: number | null
  }

  export type DonationMinAggregateOutputType = {
    id: string | null
    contributorName: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
  }

  export type DonationMaxAggregateOutputType = {
    id: string | null
    contributorName: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
  }

  export type DonationCountAggregateOutputType = {
    id: number
    contributorName: number
    amount: number
    date: number
    paymentMethod: number
    note: number
    churchId: number
    _all: number
  }


  export type DonationAvgAggregateInputType = {
    amount?: true
  }

  export type DonationSumAggregateInputType = {
    amount?: true
  }

  export type DonationMinAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
  }

  export type DonationMaxAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
  }

  export type DonationCountAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
    _all?: true
  }

  export type DonationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which donation to aggregate.
     */
    where?: donationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donations to fetch.
     */
    orderBy?: donationOrderByWithRelationInput | donationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: donationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned donations
    **/
    _count?: true | DonationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationMaxAggregateInputType
  }

  export type GetDonationAggregateType<T extends DonationAggregateArgs> = {
        [P in keyof T & keyof AggregateDonation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonation[P]>
      : GetScalarType<T[P], AggregateDonation[P]>
  }




  export type donationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: donationWhereInput
    orderBy?: donationOrderByWithAggregationInput | donationOrderByWithAggregationInput[]
    by: DonationScalarFieldEnum[] | DonationScalarFieldEnum
    having?: donationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationCountAggregateInputType | true
    _avg?: DonationAvgAggregateInputType
    _sum?: DonationSumAggregateInputType
    _min?: DonationMinAggregateInputType
    _max?: DonationMaxAggregateInputType
  }

  export type DonationGroupByOutputType = {
    id: string
    contributorName: string
    amount: number
    date: Date
    paymentMethod: string
    note: string
    churchId: string | null
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  type GetDonationGroupByPayload<T extends donationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationGroupByOutputType[P]>
            : GetScalarType<T[P], DonationGroupByOutputType[P]>
        }
      >
    >


  export type donationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contributorName?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
    church?: boolean | donation$churchArgs<ExtArgs>
  }, ExtArgs["result"]["donation"]>



  export type donationSelectScalar = {
    id?: boolean
    contributorName?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
  }

  export type donationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contributorName" | "amount" | "date" | "paymentMethod" | "note" | "churchId", ExtArgs["result"]["donation"]>
  export type donationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | donation$churchArgs<ExtArgs>
  }

  export type $donationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "donation"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contributorName: string
      amount: number
      date: Date
      paymentMethod: string
      note: string
      churchId: string | null
    }, ExtArgs["result"]["donation"]>
    composites: {}
  }

  type donationGetPayload<S extends boolean | null | undefined | donationDefaultArgs> = $Result.GetResult<Prisma.$donationPayload, S>

  type donationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<donationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DonationCountAggregateInputType | true
    }

  export interface donationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['donation'], meta: { name: 'donation' } }
    /**
     * Find zero or one Donation that matches the filter.
     * @param {donationFindUniqueArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends donationFindUniqueArgs>(args: SelectSubset<T, donationFindUniqueArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Donation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {donationFindUniqueOrThrowArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends donationFindUniqueOrThrowArgs>(args: SelectSubset<T, donationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Donation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationFindFirstArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends donationFindFirstArgs>(args?: SelectSubset<T, donationFindFirstArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Donation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationFindFirstOrThrowArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends donationFindFirstOrThrowArgs>(args?: SelectSubset<T, donationFindFirstOrThrowArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Donations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Donations
     * const donations = await prisma.donation.findMany()
     * 
     * // Get first 10 Donations
     * const donations = await prisma.donation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donationWithIdOnly = await prisma.donation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends donationFindManyArgs>(args?: SelectSubset<T, donationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Donation.
     * @param {donationCreateArgs} args - Arguments to create a Donation.
     * @example
     * // Create one Donation
     * const Donation = await prisma.donation.create({
     *   data: {
     *     // ... data to create a Donation
     *   }
     * })
     * 
     */
    create<T extends donationCreateArgs>(args: SelectSubset<T, donationCreateArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Donations.
     * @param {donationCreateManyArgs} args - Arguments to create many Donations.
     * @example
     * // Create many Donations
     * const donation = await prisma.donation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends donationCreateManyArgs>(args?: SelectSubset<T, donationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Donation.
     * @param {donationDeleteArgs} args - Arguments to delete one Donation.
     * @example
     * // Delete one Donation
     * const Donation = await prisma.donation.delete({
     *   where: {
     *     // ... filter to delete one Donation
     *   }
     * })
     * 
     */
    delete<T extends donationDeleteArgs>(args: SelectSubset<T, donationDeleteArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Donation.
     * @param {donationUpdateArgs} args - Arguments to update one Donation.
     * @example
     * // Update one Donation
     * const donation = await prisma.donation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends donationUpdateArgs>(args: SelectSubset<T, donationUpdateArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Donations.
     * @param {donationDeleteManyArgs} args - Arguments to filter Donations to delete.
     * @example
     * // Delete a few Donations
     * const { count } = await prisma.donation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends donationDeleteManyArgs>(args?: SelectSubset<T, donationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Donations
     * const donation = await prisma.donation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends donationUpdateManyArgs>(args: SelectSubset<T, donationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Donation.
     * @param {donationUpsertArgs} args - Arguments to update or create a Donation.
     * @example
     * // Update or create a Donation
     * const donation = await prisma.donation.upsert({
     *   create: {
     *     // ... data to create a Donation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Donation we want to update
     *   }
     * })
     */
    upsert<T extends donationUpsertArgs>(args: SelectSubset<T, donationUpsertArgs<ExtArgs>>): Prisma__donationClient<$Result.GetResult<Prisma.$donationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationCountArgs} args - Arguments to filter Donations to count.
     * @example
     * // Count the number of Donations
     * const count = await prisma.donation.count({
     *   where: {
     *     // ... the filter for the Donations we want to count
     *   }
     * })
    **/
    count<T extends donationCountArgs>(
      args?: Subset<T, donationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationAggregateArgs>(args: Subset<T, DonationAggregateArgs>): Prisma.PrismaPromise<GetDonationAggregateType<T>>

    /**
     * Group by Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends donationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: donationGroupByArgs['orderBy'] }
        : { orderBy?: donationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, donationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the donation model
   */
  readonly fields: donationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for donation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__donationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends donation$churchArgs<ExtArgs> = {}>(args?: Subset<T, donation$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the donation model
   */
  interface donationFieldRefs {
    readonly id: FieldRef<"donation", 'String'>
    readonly contributorName: FieldRef<"donation", 'String'>
    readonly amount: FieldRef<"donation", 'Int'>
    readonly date: FieldRef<"donation", 'DateTime'>
    readonly paymentMethod: FieldRef<"donation", 'String'>
    readonly note: FieldRef<"donation", 'String'>
    readonly churchId: FieldRef<"donation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * donation findUnique
   */
  export type donationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * Filter, which donation to fetch.
     */
    where: donationWhereUniqueInput
  }

  /**
   * donation findUniqueOrThrow
   */
  export type donationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * Filter, which donation to fetch.
     */
    where: donationWhereUniqueInput
  }

  /**
   * donation findFirst
   */
  export type donationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * Filter, which donation to fetch.
     */
    where?: donationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donations to fetch.
     */
    orderBy?: donationOrderByWithRelationInput | donationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for donations.
     */
    cursor?: donationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of donations.
     */
    distinct?: DonationScalarFieldEnum | DonationScalarFieldEnum[]
  }

  /**
   * donation findFirstOrThrow
   */
  export type donationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * Filter, which donation to fetch.
     */
    where?: donationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donations to fetch.
     */
    orderBy?: donationOrderByWithRelationInput | donationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for donations.
     */
    cursor?: donationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of donations.
     */
    distinct?: DonationScalarFieldEnum | DonationScalarFieldEnum[]
  }

  /**
   * donation findMany
   */
  export type donationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * Filter, which donations to fetch.
     */
    where?: donationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donations to fetch.
     */
    orderBy?: donationOrderByWithRelationInput | donationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing donations.
     */
    cursor?: donationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donations.
     */
    skip?: number
    distinct?: DonationScalarFieldEnum | DonationScalarFieldEnum[]
  }

  /**
   * donation create
   */
  export type donationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * The data needed to create a donation.
     */
    data: XOR<donationCreateInput, donationUncheckedCreateInput>
  }

  /**
   * donation createMany
   */
  export type donationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many donations.
     */
    data: donationCreateManyInput | donationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * donation update
   */
  export type donationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * The data needed to update a donation.
     */
    data: XOR<donationUpdateInput, donationUncheckedUpdateInput>
    /**
     * Choose, which donation to update.
     */
    where: donationWhereUniqueInput
  }

  /**
   * donation updateMany
   */
  export type donationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update donations.
     */
    data: XOR<donationUpdateManyMutationInput, donationUncheckedUpdateManyInput>
    /**
     * Filter which donations to update
     */
    where?: donationWhereInput
    /**
     * Limit how many donations to update.
     */
    limit?: number
  }

  /**
   * donation upsert
   */
  export type donationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * The filter to search for the donation to update in case it exists.
     */
    where: donationWhereUniqueInput
    /**
     * In case the donation found by the `where` argument doesn't exist, create a new donation with this data.
     */
    create: XOR<donationCreateInput, donationUncheckedCreateInput>
    /**
     * In case the donation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<donationUpdateInput, donationUncheckedUpdateInput>
  }

  /**
   * donation delete
   */
  export type donationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
    /**
     * Filter which donation to delete.
     */
    where: donationWhereUniqueInput
  }

  /**
   * donation deleteMany
   */
  export type donationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which donations to delete
     */
    where?: donationWhereInput
    /**
     * Limit how many donations to delete.
     */
    limit?: number
  }

  /**
   * donation.church
   */
  export type donation$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * donation without action
   */
  export type donationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the donation
     */
    select?: donationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the donation
     */
    omit?: donationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: donationInclude<ExtArgs> | null
  }


  /**
   * Model moisson
   */

  export type AggregateMoisson = {
    _count: MoissonCountAggregateOutputType | null
    _avg: MoissonAvgAggregateOutputType | null
    _sum: MoissonSumAggregateOutputType | null
    _min: MoissonMinAggregateOutputType | null
    _max: MoissonMaxAggregateOutputType | null
  }

  export type MoissonAvgAggregateOutputType = {
    amount: number | null
  }

  export type MoissonSumAggregateOutputType = {
    amount: number | null
  }

  export type MoissonMinAggregateOutputType = {
    id: string | null
    contributorName: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
  }

  export type MoissonMaxAggregateOutputType = {
    id: string | null
    contributorName: string | null
    amount: number | null
    date: Date | null
    paymentMethod: string | null
    note: string | null
    churchId: string | null
  }

  export type MoissonCountAggregateOutputType = {
    id: number
    contributorName: number
    amount: number
    date: number
    paymentMethod: number
    note: number
    churchId: number
    _all: number
  }


  export type MoissonAvgAggregateInputType = {
    amount?: true
  }

  export type MoissonSumAggregateInputType = {
    amount?: true
  }

  export type MoissonMinAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
  }

  export type MoissonMaxAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
  }

  export type MoissonCountAggregateInputType = {
    id?: true
    contributorName?: true
    amount?: true
    date?: true
    paymentMethod?: true
    note?: true
    churchId?: true
    _all?: true
  }

  export type MoissonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which moisson to aggregate.
     */
    where?: moissonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moissons to fetch.
     */
    orderBy?: moissonOrderByWithRelationInput | moissonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: moissonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moissons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moissons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned moissons
    **/
    _count?: true | MoissonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MoissonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MoissonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MoissonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MoissonMaxAggregateInputType
  }

  export type GetMoissonAggregateType<T extends MoissonAggregateArgs> = {
        [P in keyof T & keyof AggregateMoisson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMoisson[P]>
      : GetScalarType<T[P], AggregateMoisson[P]>
  }




  export type moissonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: moissonWhereInput
    orderBy?: moissonOrderByWithAggregationInput | moissonOrderByWithAggregationInput[]
    by: MoissonScalarFieldEnum[] | MoissonScalarFieldEnum
    having?: moissonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MoissonCountAggregateInputType | true
    _avg?: MoissonAvgAggregateInputType
    _sum?: MoissonSumAggregateInputType
    _min?: MoissonMinAggregateInputType
    _max?: MoissonMaxAggregateInputType
  }

  export type MoissonGroupByOutputType = {
    id: string
    contributorName: string
    amount: number
    date: Date
    paymentMethod: string
    note: string
    churchId: string | null
    _count: MoissonCountAggregateOutputType | null
    _avg: MoissonAvgAggregateOutputType | null
    _sum: MoissonSumAggregateOutputType | null
    _min: MoissonMinAggregateOutputType | null
    _max: MoissonMaxAggregateOutputType | null
  }

  type GetMoissonGroupByPayload<T extends moissonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MoissonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MoissonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MoissonGroupByOutputType[P]>
            : GetScalarType<T[P], MoissonGroupByOutputType[P]>
        }
      >
    >


  export type moissonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contributorName?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
    church?: boolean | moisson$churchArgs<ExtArgs>
  }, ExtArgs["result"]["moisson"]>



  export type moissonSelectScalar = {
    id?: boolean
    contributorName?: boolean
    amount?: boolean
    date?: boolean
    paymentMethod?: boolean
    note?: boolean
    churchId?: boolean
  }

  export type moissonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contributorName" | "amount" | "date" | "paymentMethod" | "note" | "churchId", ExtArgs["result"]["moisson"]>
  export type moissonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | moisson$churchArgs<ExtArgs>
  }

  export type $moissonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "moisson"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contributorName: string
      amount: number
      date: Date
      paymentMethod: string
      note: string
      churchId: string | null
    }, ExtArgs["result"]["moisson"]>
    composites: {}
  }

  type moissonGetPayload<S extends boolean | null | undefined | moissonDefaultArgs> = $Result.GetResult<Prisma.$moissonPayload, S>

  type moissonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<moissonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MoissonCountAggregateInputType | true
    }

  export interface moissonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['moisson'], meta: { name: 'moisson' } }
    /**
     * Find zero or one Moisson that matches the filter.
     * @param {moissonFindUniqueArgs} args - Arguments to find a Moisson
     * @example
     * // Get one Moisson
     * const moisson = await prisma.moisson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends moissonFindUniqueArgs>(args: SelectSubset<T, moissonFindUniqueArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Moisson that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {moissonFindUniqueOrThrowArgs} args - Arguments to find a Moisson
     * @example
     * // Get one Moisson
     * const moisson = await prisma.moisson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends moissonFindUniqueOrThrowArgs>(args: SelectSubset<T, moissonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Moisson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moissonFindFirstArgs} args - Arguments to find a Moisson
     * @example
     * // Get one Moisson
     * const moisson = await prisma.moisson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends moissonFindFirstArgs>(args?: SelectSubset<T, moissonFindFirstArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Moisson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moissonFindFirstOrThrowArgs} args - Arguments to find a Moisson
     * @example
     * // Get one Moisson
     * const moisson = await prisma.moisson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends moissonFindFirstOrThrowArgs>(args?: SelectSubset<T, moissonFindFirstOrThrowArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Moissons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moissonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Moissons
     * const moissons = await prisma.moisson.findMany()
     * 
     * // Get first 10 Moissons
     * const moissons = await prisma.moisson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moissonWithIdOnly = await prisma.moisson.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends moissonFindManyArgs>(args?: SelectSubset<T, moissonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Moisson.
     * @param {moissonCreateArgs} args - Arguments to create a Moisson.
     * @example
     * // Create one Moisson
     * const Moisson = await prisma.moisson.create({
     *   data: {
     *     // ... data to create a Moisson
     *   }
     * })
     * 
     */
    create<T extends moissonCreateArgs>(args: SelectSubset<T, moissonCreateArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Moissons.
     * @param {moissonCreateManyArgs} args - Arguments to create many Moissons.
     * @example
     * // Create many Moissons
     * const moisson = await prisma.moisson.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends moissonCreateManyArgs>(args?: SelectSubset<T, moissonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Moisson.
     * @param {moissonDeleteArgs} args - Arguments to delete one Moisson.
     * @example
     * // Delete one Moisson
     * const Moisson = await prisma.moisson.delete({
     *   where: {
     *     // ... filter to delete one Moisson
     *   }
     * })
     * 
     */
    delete<T extends moissonDeleteArgs>(args: SelectSubset<T, moissonDeleteArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Moisson.
     * @param {moissonUpdateArgs} args - Arguments to update one Moisson.
     * @example
     * // Update one Moisson
     * const moisson = await prisma.moisson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends moissonUpdateArgs>(args: SelectSubset<T, moissonUpdateArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Moissons.
     * @param {moissonDeleteManyArgs} args - Arguments to filter Moissons to delete.
     * @example
     * // Delete a few Moissons
     * const { count } = await prisma.moisson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends moissonDeleteManyArgs>(args?: SelectSubset<T, moissonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Moissons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moissonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Moissons
     * const moisson = await prisma.moisson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends moissonUpdateManyArgs>(args: SelectSubset<T, moissonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Moisson.
     * @param {moissonUpsertArgs} args - Arguments to update or create a Moisson.
     * @example
     * // Update or create a Moisson
     * const moisson = await prisma.moisson.upsert({
     *   create: {
     *     // ... data to create a Moisson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Moisson we want to update
     *   }
     * })
     */
    upsert<T extends moissonUpsertArgs>(args: SelectSubset<T, moissonUpsertArgs<ExtArgs>>): Prisma__moissonClient<$Result.GetResult<Prisma.$moissonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Moissons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moissonCountArgs} args - Arguments to filter Moissons to count.
     * @example
     * // Count the number of Moissons
     * const count = await prisma.moisson.count({
     *   where: {
     *     // ... the filter for the Moissons we want to count
     *   }
     * })
    **/
    count<T extends moissonCountArgs>(
      args?: Subset<T, moissonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MoissonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Moisson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoissonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MoissonAggregateArgs>(args: Subset<T, MoissonAggregateArgs>): Prisma.PrismaPromise<GetMoissonAggregateType<T>>

    /**
     * Group by Moisson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moissonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends moissonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: moissonGroupByArgs['orderBy'] }
        : { orderBy?: moissonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, moissonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMoissonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the moisson model
   */
  readonly fields: moissonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for moisson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__moissonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends moisson$churchArgs<ExtArgs> = {}>(args?: Subset<T, moisson$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the moisson model
   */
  interface moissonFieldRefs {
    readonly id: FieldRef<"moisson", 'String'>
    readonly contributorName: FieldRef<"moisson", 'String'>
    readonly amount: FieldRef<"moisson", 'Int'>
    readonly date: FieldRef<"moisson", 'DateTime'>
    readonly paymentMethod: FieldRef<"moisson", 'String'>
    readonly note: FieldRef<"moisson", 'String'>
    readonly churchId: FieldRef<"moisson", 'String'>
  }
    

  // Custom InputTypes
  /**
   * moisson findUnique
   */
  export type moissonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * Filter, which moisson to fetch.
     */
    where: moissonWhereUniqueInput
  }

  /**
   * moisson findUniqueOrThrow
   */
  export type moissonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * Filter, which moisson to fetch.
     */
    where: moissonWhereUniqueInput
  }

  /**
   * moisson findFirst
   */
  export type moissonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * Filter, which moisson to fetch.
     */
    where?: moissonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moissons to fetch.
     */
    orderBy?: moissonOrderByWithRelationInput | moissonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for moissons.
     */
    cursor?: moissonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moissons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moissons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of moissons.
     */
    distinct?: MoissonScalarFieldEnum | MoissonScalarFieldEnum[]
  }

  /**
   * moisson findFirstOrThrow
   */
  export type moissonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * Filter, which moisson to fetch.
     */
    where?: moissonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moissons to fetch.
     */
    orderBy?: moissonOrderByWithRelationInput | moissonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for moissons.
     */
    cursor?: moissonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moissons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moissons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of moissons.
     */
    distinct?: MoissonScalarFieldEnum | MoissonScalarFieldEnum[]
  }

  /**
   * moisson findMany
   */
  export type moissonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * Filter, which moissons to fetch.
     */
    where?: moissonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of moissons to fetch.
     */
    orderBy?: moissonOrderByWithRelationInput | moissonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing moissons.
     */
    cursor?: moissonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` moissons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` moissons.
     */
    skip?: number
    distinct?: MoissonScalarFieldEnum | MoissonScalarFieldEnum[]
  }

  /**
   * moisson create
   */
  export type moissonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * The data needed to create a moisson.
     */
    data: XOR<moissonCreateInput, moissonUncheckedCreateInput>
  }

  /**
   * moisson createMany
   */
  export type moissonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many moissons.
     */
    data: moissonCreateManyInput | moissonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * moisson update
   */
  export type moissonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * The data needed to update a moisson.
     */
    data: XOR<moissonUpdateInput, moissonUncheckedUpdateInput>
    /**
     * Choose, which moisson to update.
     */
    where: moissonWhereUniqueInput
  }

  /**
   * moisson updateMany
   */
  export type moissonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update moissons.
     */
    data: XOR<moissonUpdateManyMutationInput, moissonUncheckedUpdateManyInput>
    /**
     * Filter which moissons to update
     */
    where?: moissonWhereInput
    /**
     * Limit how many moissons to update.
     */
    limit?: number
  }

  /**
   * moisson upsert
   */
  export type moissonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * The filter to search for the moisson to update in case it exists.
     */
    where: moissonWhereUniqueInput
    /**
     * In case the moisson found by the `where` argument doesn't exist, create a new moisson with this data.
     */
    create: XOR<moissonCreateInput, moissonUncheckedCreateInput>
    /**
     * In case the moisson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<moissonUpdateInput, moissonUncheckedUpdateInput>
  }

  /**
   * moisson delete
   */
  export type moissonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
    /**
     * Filter which moisson to delete.
     */
    where: moissonWhereUniqueInput
  }

  /**
   * moisson deleteMany
   */
  export type moissonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which moissons to delete
     */
    where?: moissonWhereInput
    /**
     * Limit how many moissons to delete.
     */
    limit?: number
  }

  /**
   * moisson.church
   */
  export type moisson$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * moisson without action
   */
  export type moissonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the moisson
     */
    select?: moissonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the moisson
     */
    omit?: moissonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moissonInclude<ExtArgs> | null
  }


  /**
   * Model comitee
   */

  export type AggregateComitee = {
    _count: ComiteeCountAggregateOutputType | null
    _min: ComiteeMinAggregateOutputType | null
    _max: ComiteeMaxAggregateOutputType | null
  }

  export type ComiteeMinAggregateOutputType = {
    id: string | null
    description: string | null
    meetingDay: string | null
    meetingTime: string | null
    name: string | null
    churchId: string | null
  }

  export type ComiteeMaxAggregateOutputType = {
    id: string | null
    description: string | null
    meetingDay: string | null
    meetingTime: string | null
    name: string | null
    churchId: string | null
  }

  export type ComiteeCountAggregateOutputType = {
    id: number
    description: number
    meetingDay: number
    meetingTime: number
    name: number
    churchId: number
    _all: number
  }


  export type ComiteeMinAggregateInputType = {
    id?: true
    description?: true
    meetingDay?: true
    meetingTime?: true
    name?: true
    churchId?: true
  }

  export type ComiteeMaxAggregateInputType = {
    id?: true
    description?: true
    meetingDay?: true
    meetingTime?: true
    name?: true
    churchId?: true
  }

  export type ComiteeCountAggregateInputType = {
    id?: true
    description?: true
    meetingDay?: true
    meetingTime?: true
    name?: true
    churchId?: true
    _all?: true
  }

  export type ComiteeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comitee to aggregate.
     */
    where?: comiteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comitees to fetch.
     */
    orderBy?: comiteeOrderByWithRelationInput | comiteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: comiteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comitees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comitees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comitees
    **/
    _count?: true | ComiteeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComiteeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComiteeMaxAggregateInputType
  }

  export type GetComiteeAggregateType<T extends ComiteeAggregateArgs> = {
        [P in keyof T & keyof AggregateComitee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComitee[P]>
      : GetScalarType<T[P], AggregateComitee[P]>
  }




  export type comiteeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: comiteeWhereInput
    orderBy?: comiteeOrderByWithAggregationInput | comiteeOrderByWithAggregationInput[]
    by: ComiteeScalarFieldEnum[] | ComiteeScalarFieldEnum
    having?: comiteeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComiteeCountAggregateInputType | true
    _min?: ComiteeMinAggregateInputType
    _max?: ComiteeMaxAggregateInputType
  }

  export type ComiteeGroupByOutputType = {
    id: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    churchId: string | null
    _count: ComiteeCountAggregateOutputType | null
    _min: ComiteeMinAggregateOutputType | null
    _max: ComiteeMaxAggregateOutputType | null
  }

  type GetComiteeGroupByPayload<T extends comiteeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComiteeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComiteeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComiteeGroupByOutputType[P]>
            : GetScalarType<T[P], ComiteeGroupByOutputType[P]>
        }
      >
    >


  export type comiteeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    meetingDay?: boolean
    meetingTime?: boolean
    name?: boolean
    churchId?: boolean
    church?: boolean | comitee$churchArgs<ExtArgs>
    commiteeLeader?: boolean | comitee$commiteeLeaderArgs<ExtArgs>
    commiteeMember?: boolean | comitee$commiteeMemberArgs<ExtArgs>
    _count?: boolean | ComiteeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comitee"]>



  export type comiteeSelectScalar = {
    id?: boolean
    description?: boolean
    meetingDay?: boolean
    meetingTime?: boolean
    name?: boolean
    churchId?: boolean
  }

  export type comiteeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "meetingDay" | "meetingTime" | "name" | "churchId", ExtArgs["result"]["comitee"]>
  export type comiteeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | comitee$churchArgs<ExtArgs>
    commiteeLeader?: boolean | comitee$commiteeLeaderArgs<ExtArgs>
    commiteeMember?: boolean | comitee$commiteeMemberArgs<ExtArgs>
    _count?: boolean | ComiteeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $comiteePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "comitee"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
      commiteeLeader: Prisma.$UserPayload<ExtArgs>[]
      commiteeMember: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      meetingDay: string
      meetingTime: string
      name: string
      churchId: string | null
    }, ExtArgs["result"]["comitee"]>
    composites: {}
  }

  type comiteeGetPayload<S extends boolean | null | undefined | comiteeDefaultArgs> = $Result.GetResult<Prisma.$comiteePayload, S>

  type comiteeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<comiteeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComiteeCountAggregateInputType | true
    }

  export interface comiteeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comitee'], meta: { name: 'comitee' } }
    /**
     * Find zero or one Comitee that matches the filter.
     * @param {comiteeFindUniqueArgs} args - Arguments to find a Comitee
     * @example
     * // Get one Comitee
     * const comitee = await prisma.comitee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends comiteeFindUniqueArgs>(args: SelectSubset<T, comiteeFindUniqueArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comitee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {comiteeFindUniqueOrThrowArgs} args - Arguments to find a Comitee
     * @example
     * // Get one Comitee
     * const comitee = await prisma.comitee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends comiteeFindUniqueOrThrowArgs>(args: SelectSubset<T, comiteeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comitee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comiteeFindFirstArgs} args - Arguments to find a Comitee
     * @example
     * // Get one Comitee
     * const comitee = await prisma.comitee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends comiteeFindFirstArgs>(args?: SelectSubset<T, comiteeFindFirstArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comitee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comiteeFindFirstOrThrowArgs} args - Arguments to find a Comitee
     * @example
     * // Get one Comitee
     * const comitee = await prisma.comitee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends comiteeFindFirstOrThrowArgs>(args?: SelectSubset<T, comiteeFindFirstOrThrowArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comitees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comiteeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comitees
     * const comitees = await prisma.comitee.findMany()
     * 
     * // Get first 10 Comitees
     * const comitees = await prisma.comitee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comiteeWithIdOnly = await prisma.comitee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends comiteeFindManyArgs>(args?: SelectSubset<T, comiteeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comitee.
     * @param {comiteeCreateArgs} args - Arguments to create a Comitee.
     * @example
     * // Create one Comitee
     * const Comitee = await prisma.comitee.create({
     *   data: {
     *     // ... data to create a Comitee
     *   }
     * })
     * 
     */
    create<T extends comiteeCreateArgs>(args: SelectSubset<T, comiteeCreateArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comitees.
     * @param {comiteeCreateManyArgs} args - Arguments to create many Comitees.
     * @example
     * // Create many Comitees
     * const comitee = await prisma.comitee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends comiteeCreateManyArgs>(args?: SelectSubset<T, comiteeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comitee.
     * @param {comiteeDeleteArgs} args - Arguments to delete one Comitee.
     * @example
     * // Delete one Comitee
     * const Comitee = await prisma.comitee.delete({
     *   where: {
     *     // ... filter to delete one Comitee
     *   }
     * })
     * 
     */
    delete<T extends comiteeDeleteArgs>(args: SelectSubset<T, comiteeDeleteArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comitee.
     * @param {comiteeUpdateArgs} args - Arguments to update one Comitee.
     * @example
     * // Update one Comitee
     * const comitee = await prisma.comitee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends comiteeUpdateArgs>(args: SelectSubset<T, comiteeUpdateArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comitees.
     * @param {comiteeDeleteManyArgs} args - Arguments to filter Comitees to delete.
     * @example
     * // Delete a few Comitees
     * const { count } = await prisma.comitee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends comiteeDeleteManyArgs>(args?: SelectSubset<T, comiteeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comitees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comiteeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comitees
     * const comitee = await prisma.comitee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends comiteeUpdateManyArgs>(args: SelectSubset<T, comiteeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comitee.
     * @param {comiteeUpsertArgs} args - Arguments to update or create a Comitee.
     * @example
     * // Update or create a Comitee
     * const comitee = await prisma.comitee.upsert({
     *   create: {
     *     // ... data to create a Comitee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comitee we want to update
     *   }
     * })
     */
    upsert<T extends comiteeUpsertArgs>(args: SelectSubset<T, comiteeUpsertArgs<ExtArgs>>): Prisma__comiteeClient<$Result.GetResult<Prisma.$comiteePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comitees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comiteeCountArgs} args - Arguments to filter Comitees to count.
     * @example
     * // Count the number of Comitees
     * const count = await prisma.comitee.count({
     *   where: {
     *     // ... the filter for the Comitees we want to count
     *   }
     * })
    **/
    count<T extends comiteeCountArgs>(
      args?: Subset<T, comiteeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComiteeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comitee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComiteeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComiteeAggregateArgs>(args: Subset<T, ComiteeAggregateArgs>): Prisma.PrismaPromise<GetComiteeAggregateType<T>>

    /**
     * Group by Comitee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comiteeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends comiteeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: comiteeGroupByArgs['orderBy'] }
        : { orderBy?: comiteeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, comiteeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComiteeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comitee model
   */
  readonly fields: comiteeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comitee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__comiteeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends comitee$churchArgs<ExtArgs> = {}>(args?: Subset<T, comitee$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    commiteeLeader<T extends comitee$commiteeLeaderArgs<ExtArgs> = {}>(args?: Subset<T, comitee$commiteeLeaderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commiteeMember<T extends comitee$commiteeMemberArgs<ExtArgs> = {}>(args?: Subset<T, comitee$commiteeMemberArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the comitee model
   */
  interface comiteeFieldRefs {
    readonly id: FieldRef<"comitee", 'String'>
    readonly description: FieldRef<"comitee", 'String'>
    readonly meetingDay: FieldRef<"comitee", 'String'>
    readonly meetingTime: FieldRef<"comitee", 'String'>
    readonly name: FieldRef<"comitee", 'String'>
    readonly churchId: FieldRef<"comitee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * comitee findUnique
   */
  export type comiteeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * Filter, which comitee to fetch.
     */
    where: comiteeWhereUniqueInput
  }

  /**
   * comitee findUniqueOrThrow
   */
  export type comiteeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * Filter, which comitee to fetch.
     */
    where: comiteeWhereUniqueInput
  }

  /**
   * comitee findFirst
   */
  export type comiteeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * Filter, which comitee to fetch.
     */
    where?: comiteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comitees to fetch.
     */
    orderBy?: comiteeOrderByWithRelationInput | comiteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comitees.
     */
    cursor?: comiteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comitees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comitees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comitees.
     */
    distinct?: ComiteeScalarFieldEnum | ComiteeScalarFieldEnum[]
  }

  /**
   * comitee findFirstOrThrow
   */
  export type comiteeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * Filter, which comitee to fetch.
     */
    where?: comiteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comitees to fetch.
     */
    orderBy?: comiteeOrderByWithRelationInput | comiteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comitees.
     */
    cursor?: comiteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comitees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comitees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comitees.
     */
    distinct?: ComiteeScalarFieldEnum | ComiteeScalarFieldEnum[]
  }

  /**
   * comitee findMany
   */
  export type comiteeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * Filter, which comitees to fetch.
     */
    where?: comiteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comitees to fetch.
     */
    orderBy?: comiteeOrderByWithRelationInput | comiteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comitees.
     */
    cursor?: comiteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comitees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comitees.
     */
    skip?: number
    distinct?: ComiteeScalarFieldEnum | ComiteeScalarFieldEnum[]
  }

  /**
   * comitee create
   */
  export type comiteeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * The data needed to create a comitee.
     */
    data: XOR<comiteeCreateInput, comiteeUncheckedCreateInput>
  }

  /**
   * comitee createMany
   */
  export type comiteeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many comitees.
     */
    data: comiteeCreateManyInput | comiteeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * comitee update
   */
  export type comiteeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * The data needed to update a comitee.
     */
    data: XOR<comiteeUpdateInput, comiteeUncheckedUpdateInput>
    /**
     * Choose, which comitee to update.
     */
    where: comiteeWhereUniqueInput
  }

  /**
   * comitee updateMany
   */
  export type comiteeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update comitees.
     */
    data: XOR<comiteeUpdateManyMutationInput, comiteeUncheckedUpdateManyInput>
    /**
     * Filter which comitees to update
     */
    where?: comiteeWhereInput
    /**
     * Limit how many comitees to update.
     */
    limit?: number
  }

  /**
   * comitee upsert
   */
  export type comiteeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * The filter to search for the comitee to update in case it exists.
     */
    where: comiteeWhereUniqueInput
    /**
     * In case the comitee found by the `where` argument doesn't exist, create a new comitee with this data.
     */
    create: XOR<comiteeCreateInput, comiteeUncheckedCreateInput>
    /**
     * In case the comitee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<comiteeUpdateInput, comiteeUncheckedUpdateInput>
  }

  /**
   * comitee delete
   */
  export type comiteeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
    /**
     * Filter which comitee to delete.
     */
    where: comiteeWhereUniqueInput
  }

  /**
   * comitee deleteMany
   */
  export type comiteeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comitees to delete
     */
    where?: comiteeWhereInput
    /**
     * Limit how many comitees to delete.
     */
    limit?: number
  }

  /**
   * comitee.church
   */
  export type comitee$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * comitee.commiteeLeader
   */
  export type comitee$commiteeLeaderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * comitee.commiteeMember
   */
  export type comitee$commiteeMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * comitee without action
   */
  export type comiteeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comitee
     */
    select?: comiteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the comitee
     */
    omit?: comiteeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: comiteeInclude<ExtArgs> | null
  }


  /**
   * Model appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    visibility: string | null
    description: string | null
    date: Date | null
    time: string | null
    duration: string | null
    notes: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    visibility: string | null
    description: string | null
    date: Date | null
    time: string | null
    duration: string | null
    notes: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    name: number
    visibility: number
    description: number
    date: number
    time: number
    duration: number
    notes: number
    churchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    name?: true
    visibility?: true
    description?: true
    date?: true
    time?: true
    duration?: true
    notes?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    name?: true
    visibility?: true
    description?: true
    date?: true
    time?: true
    duration?: true
    notes?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    name?: true
    visibility?: true
    description?: true
    date?: true
    time?: true
    duration?: true
    notes?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which appointment to aggregate.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: appointmentOrderByWithRelationInput | appointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type appointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: appointmentWhereInput
    orderBy?: appointmentOrderByWithAggregationInput | appointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: appointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    name: string
    visibility: string | null
    description: string
    date: Date
    time: string
    duration: string
    notes: string
    churchId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends appointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type appointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    visibility?: boolean
    description?: boolean
    date?: boolean
    time?: boolean
    duration?: boolean
    notes?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | appointment$churchArgs<ExtArgs>
    assignedUsers?: boolean | appointment$assignedUsersArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>



  export type appointmentSelectScalar = {
    id?: boolean
    name?: boolean
    visibility?: boolean
    description?: boolean
    date?: boolean
    time?: boolean
    duration?: boolean
    notes?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type appointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "visibility" | "description" | "date" | "time" | "duration" | "notes" | "churchId" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type appointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | appointment$churchArgs<ExtArgs>
    assignedUsers?: boolean | appointment$assignedUsersArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $appointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "appointment"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
      assignedUsers: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      visibility: string | null
      description: string
      date: Date
      time: string
      duration: string
      notes: string
      churchId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type appointmentGetPayload<S extends boolean | null | undefined | appointmentDefaultArgs> = $Result.GetResult<Prisma.$appointmentPayload, S>

  type appointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<appointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface appointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['appointment'], meta: { name: 'appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {appointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends appointmentFindUniqueArgs>(args: SelectSubset<T, appointmentFindUniqueArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {appointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends appointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, appointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends appointmentFindFirstArgs>(args?: SelectSubset<T, appointmentFindFirstArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends appointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, appointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends appointmentFindManyArgs>(args?: SelectSubset<T, appointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {appointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends appointmentCreateArgs>(args: SelectSubset<T, appointmentCreateArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {appointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends appointmentCreateManyArgs>(args?: SelectSubset<T, appointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {appointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends appointmentDeleteArgs>(args: SelectSubset<T, appointmentDeleteArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {appointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends appointmentUpdateArgs>(args: SelectSubset<T, appointmentUpdateArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {appointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends appointmentDeleteManyArgs>(args?: SelectSubset<T, appointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends appointmentUpdateManyArgs>(args: SelectSubset<T, appointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {appointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends appointmentUpsertArgs>(args: SelectSubset<T, appointmentUpsertArgs<ExtArgs>>): Prisma__appointmentClient<$Result.GetResult<Prisma.$appointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends appointmentCountArgs>(
      args?: Subset<T, appointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends appointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: appointmentGroupByArgs['orderBy'] }
        : { orderBy?: appointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, appointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the appointment model
   */
  readonly fields: appointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__appointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends appointment$churchArgs<ExtArgs> = {}>(args?: Subset<T, appointment$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignedUsers<T extends appointment$assignedUsersArgs<ExtArgs> = {}>(args?: Subset<T, appointment$assignedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the appointment model
   */
  interface appointmentFieldRefs {
    readonly id: FieldRef<"appointment", 'String'>
    readonly name: FieldRef<"appointment", 'String'>
    readonly visibility: FieldRef<"appointment", 'String'>
    readonly description: FieldRef<"appointment", 'String'>
    readonly date: FieldRef<"appointment", 'DateTime'>
    readonly time: FieldRef<"appointment", 'String'>
    readonly duration: FieldRef<"appointment", 'String'>
    readonly notes: FieldRef<"appointment", 'String'>
    readonly churchId: FieldRef<"appointment", 'String'>
    readonly createdAt: FieldRef<"appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * appointment findUnique
   */
  export type appointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * Filter, which appointment to fetch.
     */
    where: appointmentWhereUniqueInput
  }

  /**
   * appointment findUniqueOrThrow
   */
  export type appointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * Filter, which appointment to fetch.
     */
    where: appointmentWhereUniqueInput
  }

  /**
   * appointment findFirst
   */
  export type appointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * Filter, which appointment to fetch.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: appointmentOrderByWithRelationInput | appointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for appointments.
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * appointment findFirstOrThrow
   */
  export type appointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * Filter, which appointment to fetch.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: appointmentOrderByWithRelationInput | appointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for appointments.
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * appointment findMany
   */
  export type appointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * Filter, which appointments to fetch.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: appointmentOrderByWithRelationInput | appointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing appointments.
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * appointment create
   */
  export type appointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a appointment.
     */
    data: XOR<appointmentCreateInput, appointmentUncheckedCreateInput>
  }

  /**
   * appointment createMany
   */
  export type appointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many appointments.
     */
    data: appointmentCreateManyInput | appointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * appointment update
   */
  export type appointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a appointment.
     */
    data: XOR<appointmentUpdateInput, appointmentUncheckedUpdateInput>
    /**
     * Choose, which appointment to update.
     */
    where: appointmentWhereUniqueInput
  }

  /**
   * appointment updateMany
   */
  export type appointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update appointments.
     */
    data: XOR<appointmentUpdateManyMutationInput, appointmentUncheckedUpdateManyInput>
    /**
     * Filter which appointments to update
     */
    where?: appointmentWhereInput
    /**
     * Limit how many appointments to update.
     */
    limit?: number
  }

  /**
   * appointment upsert
   */
  export type appointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the appointment to update in case it exists.
     */
    where: appointmentWhereUniqueInput
    /**
     * In case the appointment found by the `where` argument doesn't exist, create a new appointment with this data.
     */
    create: XOR<appointmentCreateInput, appointmentUncheckedCreateInput>
    /**
     * In case the appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<appointmentUpdateInput, appointmentUncheckedUpdateInput>
  }

  /**
   * appointment delete
   */
  export type appointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
    /**
     * Filter which appointment to delete.
     */
    where: appointmentWhereUniqueInput
  }

  /**
   * appointment deleteMany
   */
  export type appointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which appointments to delete
     */
    where?: appointmentWhereInput
    /**
     * Limit how many appointments to delete.
     */
    limit?: number
  }

  /**
   * appointment.church
   */
  export type appointment$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * appointment.assignedUsers
   */
  export type appointment$assignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * appointment without action
   */
  export type appointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the appointment
     */
    omit?: appointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: appointmentInclude<ExtArgs> | null
  }


  /**
   * Model transfert
   */

  export type AggregateTransfert = {
    _count: TransfertCountAggregateOutputType | null
    _min: TransfertMinAggregateOutputType | null
    _max: TransfertMaxAggregateOutputType | null
  }

  export type TransfertMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fromChurchId: string | null
    toChurchId: string | null
    userId: string | null
  }

  export type TransfertMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fromChurchId: string | null
    toChurchId: string | null
    userId: string | null
  }

  export type TransfertCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    fromChurchId: number
    toChurchId: number
    userId: number
    _all: number
  }


  export type TransfertMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    fromChurchId?: true
    toChurchId?: true
    userId?: true
  }

  export type TransfertMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    fromChurchId?: true
    toChurchId?: true
    userId?: true
  }

  export type TransfertCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    fromChurchId?: true
    toChurchId?: true
    userId?: true
    _all?: true
  }

  export type TransfertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transfert to aggregate.
     */
    where?: transfertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transferts to fetch.
     */
    orderBy?: transfertOrderByWithRelationInput | transfertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transfertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transferts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transferts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transferts
    **/
    _count?: true | TransfertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransfertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransfertMaxAggregateInputType
  }

  export type GetTransfertAggregateType<T extends TransfertAggregateArgs> = {
        [P in keyof T & keyof AggregateTransfert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransfert[P]>
      : GetScalarType<T[P], AggregateTransfert[P]>
  }




  export type transfertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transfertWhereInput
    orderBy?: transfertOrderByWithAggregationInput | transfertOrderByWithAggregationInput[]
    by: TransfertScalarFieldEnum[] | TransfertScalarFieldEnum
    having?: transfertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransfertCountAggregateInputType | true
    _min?: TransfertMinAggregateInputType
    _max?: TransfertMaxAggregateInputType
  }

  export type TransfertGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    fromChurchId: string
    toChurchId: string
    userId: string
    _count: TransfertCountAggregateOutputType | null
    _min: TransfertMinAggregateOutputType | null
    _max: TransfertMaxAggregateOutputType | null
  }

  type GetTransfertGroupByPayload<T extends transfertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransfertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransfertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransfertGroupByOutputType[P]>
            : GetScalarType<T[P], TransfertGroupByOutputType[P]>
        }
      >
    >


  export type transfertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromChurchId?: boolean
    toChurchId?: boolean
    userId?: boolean
    fromChurch?: boolean | ChurchDefaultArgs<ExtArgs>
    toChurch?: boolean | ChurchDefaultArgs<ExtArgs>
    member?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transfert"]>



  export type transfertSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromChurchId?: boolean
    toChurchId?: boolean
    userId?: boolean
  }

  export type transfertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "fromChurchId" | "toChurchId" | "userId", ExtArgs["result"]["transfert"]>
  export type transfertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromChurch?: boolean | ChurchDefaultArgs<ExtArgs>
    toChurch?: boolean | ChurchDefaultArgs<ExtArgs>
    member?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $transfertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transfert"
    objects: {
      fromChurch: Prisma.$ChurchPayload<ExtArgs>
      toChurch: Prisma.$ChurchPayload<ExtArgs>
      member: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      fromChurchId: string
      toChurchId: string
      userId: string
    }, ExtArgs["result"]["transfert"]>
    composites: {}
  }

  type transfertGetPayload<S extends boolean | null | undefined | transfertDefaultArgs> = $Result.GetResult<Prisma.$transfertPayload, S>

  type transfertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<transfertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransfertCountAggregateInputType | true
    }

  export interface transfertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transfert'], meta: { name: 'transfert' } }
    /**
     * Find zero or one Transfert that matches the filter.
     * @param {transfertFindUniqueArgs} args - Arguments to find a Transfert
     * @example
     * // Get one Transfert
     * const transfert = await prisma.transfert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transfertFindUniqueArgs>(args: SelectSubset<T, transfertFindUniqueArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transfert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {transfertFindUniqueOrThrowArgs} args - Arguments to find a Transfert
     * @example
     * // Get one Transfert
     * const transfert = await prisma.transfert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transfertFindUniqueOrThrowArgs>(args: SelectSubset<T, transfertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transfert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfertFindFirstArgs} args - Arguments to find a Transfert
     * @example
     * // Get one Transfert
     * const transfert = await prisma.transfert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transfertFindFirstArgs>(args?: SelectSubset<T, transfertFindFirstArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transfert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfertFindFirstOrThrowArgs} args - Arguments to find a Transfert
     * @example
     * // Get one Transfert
     * const transfert = await prisma.transfert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transfertFindFirstOrThrowArgs>(args?: SelectSubset<T, transfertFindFirstOrThrowArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transferts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transferts
     * const transferts = await prisma.transfert.findMany()
     * 
     * // Get first 10 Transferts
     * const transferts = await prisma.transfert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transfertWithIdOnly = await prisma.transfert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transfertFindManyArgs>(args?: SelectSubset<T, transfertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transfert.
     * @param {transfertCreateArgs} args - Arguments to create a Transfert.
     * @example
     * // Create one Transfert
     * const Transfert = await prisma.transfert.create({
     *   data: {
     *     // ... data to create a Transfert
     *   }
     * })
     * 
     */
    create<T extends transfertCreateArgs>(args: SelectSubset<T, transfertCreateArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transferts.
     * @param {transfertCreateManyArgs} args - Arguments to create many Transferts.
     * @example
     * // Create many Transferts
     * const transfert = await prisma.transfert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transfertCreateManyArgs>(args?: SelectSubset<T, transfertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transfert.
     * @param {transfertDeleteArgs} args - Arguments to delete one Transfert.
     * @example
     * // Delete one Transfert
     * const Transfert = await prisma.transfert.delete({
     *   where: {
     *     // ... filter to delete one Transfert
     *   }
     * })
     * 
     */
    delete<T extends transfertDeleteArgs>(args: SelectSubset<T, transfertDeleteArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transfert.
     * @param {transfertUpdateArgs} args - Arguments to update one Transfert.
     * @example
     * // Update one Transfert
     * const transfert = await prisma.transfert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transfertUpdateArgs>(args: SelectSubset<T, transfertUpdateArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transferts.
     * @param {transfertDeleteManyArgs} args - Arguments to filter Transferts to delete.
     * @example
     * // Delete a few Transferts
     * const { count } = await prisma.transfert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transfertDeleteManyArgs>(args?: SelectSubset<T, transfertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transferts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transferts
     * const transfert = await prisma.transfert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transfertUpdateManyArgs>(args: SelectSubset<T, transfertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transfert.
     * @param {transfertUpsertArgs} args - Arguments to update or create a Transfert.
     * @example
     * // Update or create a Transfert
     * const transfert = await prisma.transfert.upsert({
     *   create: {
     *     // ... data to create a Transfert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transfert we want to update
     *   }
     * })
     */
    upsert<T extends transfertUpsertArgs>(args: SelectSubset<T, transfertUpsertArgs<ExtArgs>>): Prisma__transfertClient<$Result.GetResult<Prisma.$transfertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transferts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfertCountArgs} args - Arguments to filter Transferts to count.
     * @example
     * // Count the number of Transferts
     * const count = await prisma.transfert.count({
     *   where: {
     *     // ... the filter for the Transferts we want to count
     *   }
     * })
    **/
    count<T extends transfertCountArgs>(
      args?: Subset<T, transfertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransfertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transfert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransfertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransfertAggregateArgs>(args: Subset<T, TransfertAggregateArgs>): Prisma.PrismaPromise<GetTransfertAggregateType<T>>

    /**
     * Group by Transfert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transfertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transfertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transfertGroupByArgs['orderBy'] }
        : { orderBy?: transfertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transfertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransfertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transfert model
   */
  readonly fields: transfertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transfert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transfertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fromChurch<T extends ChurchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchDefaultArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    toChurch<T extends ChurchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchDefaultArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    member<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transfert model
   */
  interface transfertFieldRefs {
    readonly id: FieldRef<"transfert", 'String'>
    readonly createdAt: FieldRef<"transfert", 'DateTime'>
    readonly updatedAt: FieldRef<"transfert", 'DateTime'>
    readonly fromChurchId: FieldRef<"transfert", 'String'>
    readonly toChurchId: FieldRef<"transfert", 'String'>
    readonly userId: FieldRef<"transfert", 'String'>
  }
    

  // Custom InputTypes
  /**
   * transfert findUnique
   */
  export type transfertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * Filter, which transfert to fetch.
     */
    where: transfertWhereUniqueInput
  }

  /**
   * transfert findUniqueOrThrow
   */
  export type transfertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * Filter, which transfert to fetch.
     */
    where: transfertWhereUniqueInput
  }

  /**
   * transfert findFirst
   */
  export type transfertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * Filter, which transfert to fetch.
     */
    where?: transfertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transferts to fetch.
     */
    orderBy?: transfertOrderByWithRelationInput | transfertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transferts.
     */
    cursor?: transfertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transferts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transferts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transferts.
     */
    distinct?: TransfertScalarFieldEnum | TransfertScalarFieldEnum[]
  }

  /**
   * transfert findFirstOrThrow
   */
  export type transfertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * Filter, which transfert to fetch.
     */
    where?: transfertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transferts to fetch.
     */
    orderBy?: transfertOrderByWithRelationInput | transfertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transferts.
     */
    cursor?: transfertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transferts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transferts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transferts.
     */
    distinct?: TransfertScalarFieldEnum | TransfertScalarFieldEnum[]
  }

  /**
   * transfert findMany
   */
  export type transfertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * Filter, which transferts to fetch.
     */
    where?: transfertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transferts to fetch.
     */
    orderBy?: transfertOrderByWithRelationInput | transfertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transferts.
     */
    cursor?: transfertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transferts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transferts.
     */
    skip?: number
    distinct?: TransfertScalarFieldEnum | TransfertScalarFieldEnum[]
  }

  /**
   * transfert create
   */
  export type transfertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * The data needed to create a transfert.
     */
    data: XOR<transfertCreateInput, transfertUncheckedCreateInput>
  }

  /**
   * transfert createMany
   */
  export type transfertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transferts.
     */
    data: transfertCreateManyInput | transfertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transfert update
   */
  export type transfertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * The data needed to update a transfert.
     */
    data: XOR<transfertUpdateInput, transfertUncheckedUpdateInput>
    /**
     * Choose, which transfert to update.
     */
    where: transfertWhereUniqueInput
  }

  /**
   * transfert updateMany
   */
  export type transfertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transferts.
     */
    data: XOR<transfertUpdateManyMutationInput, transfertUncheckedUpdateManyInput>
    /**
     * Filter which transferts to update
     */
    where?: transfertWhereInput
    /**
     * Limit how many transferts to update.
     */
    limit?: number
  }

  /**
   * transfert upsert
   */
  export type transfertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * The filter to search for the transfert to update in case it exists.
     */
    where: transfertWhereUniqueInput
    /**
     * In case the transfert found by the `where` argument doesn't exist, create a new transfert with this data.
     */
    create: XOR<transfertCreateInput, transfertUncheckedCreateInput>
    /**
     * In case the transfert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transfertUpdateInput, transfertUncheckedUpdateInput>
  }

  /**
   * transfert delete
   */
  export type transfertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
    /**
     * Filter which transfert to delete.
     */
    where: transfertWhereUniqueInput
  }

  /**
   * transfert deleteMany
   */
  export type transfertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transferts to delete
     */
    where?: transfertWhereInput
    /**
     * Limit how many transferts to delete.
     */
    limit?: number
  }

  /**
   * transfert without action
   */
  export type transfertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transfert
     */
    select?: transfertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transfert
     */
    omit?: transfertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transfertInclude<ExtArgs> | null
  }


  /**
   * Model Mission
   */

  export type AggregateMission = {
    _count: MissionCountAggregateOutputType | null
    _min: MissionMinAggregateOutputType | null
    _max: MissionMaxAggregateOutputType | null
  }

  export type MissionMinAggregateOutputType = {
    id: string | null
    missionName: string | null
    description: string | null
    status: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    presidentName: string | null
  }

  export type MissionMaxAggregateOutputType = {
    id: string | null
    missionName: string | null
    description: string | null
    status: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    presidentName: string | null
  }

  export type MissionCountAggregateOutputType = {
    id: number
    missionName: number
    description: number
    status: number
    location: number
    createdAt: number
    updatedAt: number
    presidentName: number
    _all: number
  }


  export type MissionMinAggregateInputType = {
    id?: true
    missionName?: true
    description?: true
    status?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    presidentName?: true
  }

  export type MissionMaxAggregateInputType = {
    id?: true
    missionName?: true
    description?: true
    status?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    presidentName?: true
  }

  export type MissionCountAggregateInputType = {
    id?: true
    missionName?: true
    description?: true
    status?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    presidentName?: true
    _all?: true
  }

  export type MissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mission to aggregate.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Missions
    **/
    _count?: true | MissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MissionMaxAggregateInputType
  }

  export type GetMissionAggregateType<T extends MissionAggregateArgs> = {
        [P in keyof T & keyof AggregateMission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMission[P]>
      : GetScalarType<T[P], AggregateMission[P]>
  }




  export type MissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissionWhereInput
    orderBy?: MissionOrderByWithAggregationInput | MissionOrderByWithAggregationInput[]
    by: MissionScalarFieldEnum[] | MissionScalarFieldEnum
    having?: MissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MissionCountAggregateInputType | true
    _min?: MissionMinAggregateInputType
    _max?: MissionMaxAggregateInputType
  }

  export type MissionGroupByOutputType = {
    id: string
    missionName: string
    description: string
    status: string
    location: string
    createdAt: Date
    updatedAt: Date
    presidentName: string | null
    _count: MissionCountAggregateOutputType | null
    _min: MissionMinAggregateOutputType | null
    _max: MissionMaxAggregateOutputType | null
  }

  type GetMissionGroupByPayload<T extends MissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MissionGroupByOutputType[P]>
            : GetScalarType<T[P], MissionGroupByOutputType[P]>
        }
      >
    >


  export type MissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    missionName?: boolean
    description?: boolean
    status?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    presidentName?: boolean
    church?: boolean | Mission$churchArgs<ExtArgs>
    _count?: boolean | MissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mission"]>



  export type MissionSelectScalar = {
    id?: boolean
    missionName?: boolean
    description?: boolean
    status?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    presidentName?: boolean
  }

  export type MissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "missionName" | "description" | "status" | "location" | "createdAt" | "updatedAt" | "presidentName", ExtArgs["result"]["mission"]>
  export type MissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | Mission$churchArgs<ExtArgs>
    _count?: boolean | MissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mission"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      missionName: string
      description: string
      status: string
      location: string
      createdAt: Date
      updatedAt: Date
      presidentName: string | null
    }, ExtArgs["result"]["mission"]>
    composites: {}
  }

  type MissionGetPayload<S extends boolean | null | undefined | MissionDefaultArgs> = $Result.GetResult<Prisma.$MissionPayload, S>

  type MissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MissionCountAggregateInputType | true
    }

  export interface MissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mission'], meta: { name: 'Mission' } }
    /**
     * Find zero or one Mission that matches the filter.
     * @param {MissionFindUniqueArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MissionFindUniqueArgs>(args: SelectSubset<T, MissionFindUniqueArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MissionFindUniqueOrThrowArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MissionFindUniqueOrThrowArgs>(args: SelectSubset<T, MissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindFirstArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MissionFindFirstArgs>(args?: SelectSubset<T, MissionFindFirstArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindFirstOrThrowArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MissionFindFirstOrThrowArgs>(args?: SelectSubset<T, MissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Missions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Missions
     * const missions = await prisma.mission.findMany()
     * 
     * // Get first 10 Missions
     * const missions = await prisma.mission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const missionWithIdOnly = await prisma.mission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MissionFindManyArgs>(args?: SelectSubset<T, MissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mission.
     * @param {MissionCreateArgs} args - Arguments to create a Mission.
     * @example
     * // Create one Mission
     * const Mission = await prisma.mission.create({
     *   data: {
     *     // ... data to create a Mission
     *   }
     * })
     * 
     */
    create<T extends MissionCreateArgs>(args: SelectSubset<T, MissionCreateArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Missions.
     * @param {MissionCreateManyArgs} args - Arguments to create many Missions.
     * @example
     * // Create many Missions
     * const mission = await prisma.mission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MissionCreateManyArgs>(args?: SelectSubset<T, MissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mission.
     * @param {MissionDeleteArgs} args - Arguments to delete one Mission.
     * @example
     * // Delete one Mission
     * const Mission = await prisma.mission.delete({
     *   where: {
     *     // ... filter to delete one Mission
     *   }
     * })
     * 
     */
    delete<T extends MissionDeleteArgs>(args: SelectSubset<T, MissionDeleteArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mission.
     * @param {MissionUpdateArgs} args - Arguments to update one Mission.
     * @example
     * // Update one Mission
     * const mission = await prisma.mission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MissionUpdateArgs>(args: SelectSubset<T, MissionUpdateArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Missions.
     * @param {MissionDeleteManyArgs} args - Arguments to filter Missions to delete.
     * @example
     * // Delete a few Missions
     * const { count } = await prisma.mission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MissionDeleteManyArgs>(args?: SelectSubset<T, MissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Missions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Missions
     * const mission = await prisma.mission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MissionUpdateManyArgs>(args: SelectSubset<T, MissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mission.
     * @param {MissionUpsertArgs} args - Arguments to update or create a Mission.
     * @example
     * // Update or create a Mission
     * const mission = await prisma.mission.upsert({
     *   create: {
     *     // ... data to create a Mission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mission we want to update
     *   }
     * })
     */
    upsert<T extends MissionUpsertArgs>(args: SelectSubset<T, MissionUpsertArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Missions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionCountArgs} args - Arguments to filter Missions to count.
     * @example
     * // Count the number of Missions
     * const count = await prisma.mission.count({
     *   where: {
     *     // ... the filter for the Missions we want to count
     *   }
     * })
    **/
    count<T extends MissionCountArgs>(
      args?: Subset<T, MissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MissionAggregateArgs>(args: Subset<T, MissionAggregateArgs>): Prisma.PrismaPromise<GetMissionAggregateType<T>>

    /**
     * Group by Mission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MissionGroupByArgs['orderBy'] }
        : { orderBy?: MissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mission model
   */
  readonly fields: MissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends Mission$churchArgs<ExtArgs> = {}>(args?: Subset<T, Mission$churchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mission model
   */
  interface MissionFieldRefs {
    readonly id: FieldRef<"Mission", 'String'>
    readonly missionName: FieldRef<"Mission", 'String'>
    readonly description: FieldRef<"Mission", 'String'>
    readonly status: FieldRef<"Mission", 'String'>
    readonly location: FieldRef<"Mission", 'String'>
    readonly createdAt: FieldRef<"Mission", 'DateTime'>
    readonly updatedAt: FieldRef<"Mission", 'DateTime'>
    readonly presidentName: FieldRef<"Mission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Mission findUnique
   */
  export type MissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission findUniqueOrThrow
   */
  export type MissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission findFirst
   */
  export type MissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Missions.
     */
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission findFirstOrThrow
   */
  export type MissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Missions.
     */
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission findMany
   */
  export type MissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Missions to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission create
   */
  export type MissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Mission.
     */
    data: XOR<MissionCreateInput, MissionUncheckedCreateInput>
  }

  /**
   * Mission createMany
   */
  export type MissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Missions.
     */
    data: MissionCreateManyInput | MissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mission update
   */
  export type MissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Mission.
     */
    data: XOR<MissionUpdateInput, MissionUncheckedUpdateInput>
    /**
     * Choose, which Mission to update.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission updateMany
   */
  export type MissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Missions.
     */
    data: XOR<MissionUpdateManyMutationInput, MissionUncheckedUpdateManyInput>
    /**
     * Filter which Missions to update
     */
    where?: MissionWhereInput
    /**
     * Limit how many Missions to update.
     */
    limit?: number
  }

  /**
   * Mission upsert
   */
  export type MissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Mission to update in case it exists.
     */
    where: MissionWhereUniqueInput
    /**
     * In case the Mission found by the `where` argument doesn't exist, create a new Mission with this data.
     */
    create: XOR<MissionCreateInput, MissionUncheckedCreateInput>
    /**
     * In case the Mission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MissionUpdateInput, MissionUncheckedUpdateInput>
  }

  /**
   * Mission delete
   */
  export type MissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter which Mission to delete.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission deleteMany
   */
  export type MissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Missions to delete
     */
    where?: MissionWhereInput
    /**
     * Limit how many Missions to delete.
     */
    limit?: number
  }

  /**
   * Mission.church
   */
  export type Mission$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    cursor?: ChurchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Mission without action
   */
  export type MissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mission
     */
    omit?: MissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
  }


  /**
   * Model sanction
   */

  export type AggregateSanction = {
    _count: SanctionCountAggregateOutputType | null
    _min: SanctionMinAggregateOutputType | null
    _max: SanctionMaxAggregateOutputType | null
  }

  export type SanctionMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: string | null
    status: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    endDate: string | null
  }

  export type SanctionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: string | null
    status: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    endDate: string | null
  }

  export type SanctionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startDate: number
    status: number
    churchId: number
    createdAt: number
    updatedAt: number
    endDate: number
    _all: number
  }


  export type SanctionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    status?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    endDate?: true
  }

  export type SanctionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    status?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    endDate?: true
  }

  export type SanctionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    status?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    endDate?: true
    _all?: true
  }

  export type SanctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sanction to aggregate.
     */
    where?: sanctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sanctions to fetch.
     */
    orderBy?: sanctionOrderByWithRelationInput | sanctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sanctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sanctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sanctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sanctions
    **/
    _count?: true | SanctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SanctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SanctionMaxAggregateInputType
  }

  export type GetSanctionAggregateType<T extends SanctionAggregateArgs> = {
        [P in keyof T & keyof AggregateSanction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSanction[P]>
      : GetScalarType<T[P], AggregateSanction[P]>
  }




  export type sanctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sanctionWhereInput
    orderBy?: sanctionOrderByWithAggregationInput | sanctionOrderByWithAggregationInput[]
    by: SanctionScalarFieldEnum[] | SanctionScalarFieldEnum
    having?: sanctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SanctionCountAggregateInputType | true
    _min?: SanctionMinAggregateInputType
    _max?: SanctionMaxAggregateInputType
  }

  export type SanctionGroupByOutputType = {
    id: string
    name: string
    description: string
    startDate: string
    status: string
    churchId: string | null
    createdAt: Date
    updatedAt: Date
    endDate: string | null
    _count: SanctionCountAggregateOutputType | null
    _min: SanctionMinAggregateOutputType | null
    _max: SanctionMaxAggregateOutputType | null
  }

  type GetSanctionGroupByPayload<T extends sanctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SanctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SanctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SanctionGroupByOutputType[P]>
            : GetScalarType<T[P], SanctionGroupByOutputType[P]>
        }
      >
    >


  export type sanctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    status?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    endDate?: boolean
    church?: boolean | sanction$churchArgs<ExtArgs>
  }, ExtArgs["result"]["sanction"]>



  export type sanctionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    status?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    endDate?: boolean
  }

  export type sanctionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "startDate" | "status" | "churchId" | "createdAt" | "updatedAt" | "endDate", ExtArgs["result"]["sanction"]>
  export type sanctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | sanction$churchArgs<ExtArgs>
  }

  export type $sanctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sanction"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      startDate: string
      status: string
      churchId: string | null
      createdAt: Date
      updatedAt: Date
      endDate: string | null
    }, ExtArgs["result"]["sanction"]>
    composites: {}
  }

  type sanctionGetPayload<S extends boolean | null | undefined | sanctionDefaultArgs> = $Result.GetResult<Prisma.$sanctionPayload, S>

  type sanctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sanctionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SanctionCountAggregateInputType | true
    }

  export interface sanctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sanction'], meta: { name: 'sanction' } }
    /**
     * Find zero or one Sanction that matches the filter.
     * @param {sanctionFindUniqueArgs} args - Arguments to find a Sanction
     * @example
     * // Get one Sanction
     * const sanction = await prisma.sanction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sanctionFindUniqueArgs>(args: SelectSubset<T, sanctionFindUniqueArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sanction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sanctionFindUniqueOrThrowArgs} args - Arguments to find a Sanction
     * @example
     * // Get one Sanction
     * const sanction = await prisma.sanction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sanctionFindUniqueOrThrowArgs>(args: SelectSubset<T, sanctionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sanction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sanctionFindFirstArgs} args - Arguments to find a Sanction
     * @example
     * // Get one Sanction
     * const sanction = await prisma.sanction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sanctionFindFirstArgs>(args?: SelectSubset<T, sanctionFindFirstArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sanction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sanctionFindFirstOrThrowArgs} args - Arguments to find a Sanction
     * @example
     * // Get one Sanction
     * const sanction = await prisma.sanction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sanctionFindFirstOrThrowArgs>(args?: SelectSubset<T, sanctionFindFirstOrThrowArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sanctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sanctionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sanctions
     * const sanctions = await prisma.sanction.findMany()
     * 
     * // Get first 10 Sanctions
     * const sanctions = await prisma.sanction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sanctionWithIdOnly = await prisma.sanction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sanctionFindManyArgs>(args?: SelectSubset<T, sanctionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sanction.
     * @param {sanctionCreateArgs} args - Arguments to create a Sanction.
     * @example
     * // Create one Sanction
     * const Sanction = await prisma.sanction.create({
     *   data: {
     *     // ... data to create a Sanction
     *   }
     * })
     * 
     */
    create<T extends sanctionCreateArgs>(args: SelectSubset<T, sanctionCreateArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sanctions.
     * @param {sanctionCreateManyArgs} args - Arguments to create many Sanctions.
     * @example
     * // Create many Sanctions
     * const sanction = await prisma.sanction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sanctionCreateManyArgs>(args?: SelectSubset<T, sanctionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sanction.
     * @param {sanctionDeleteArgs} args - Arguments to delete one Sanction.
     * @example
     * // Delete one Sanction
     * const Sanction = await prisma.sanction.delete({
     *   where: {
     *     // ... filter to delete one Sanction
     *   }
     * })
     * 
     */
    delete<T extends sanctionDeleteArgs>(args: SelectSubset<T, sanctionDeleteArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sanction.
     * @param {sanctionUpdateArgs} args - Arguments to update one Sanction.
     * @example
     * // Update one Sanction
     * const sanction = await prisma.sanction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sanctionUpdateArgs>(args: SelectSubset<T, sanctionUpdateArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sanctions.
     * @param {sanctionDeleteManyArgs} args - Arguments to filter Sanctions to delete.
     * @example
     * // Delete a few Sanctions
     * const { count } = await prisma.sanction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sanctionDeleteManyArgs>(args?: SelectSubset<T, sanctionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sanctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sanctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sanctions
     * const sanction = await prisma.sanction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sanctionUpdateManyArgs>(args: SelectSubset<T, sanctionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sanction.
     * @param {sanctionUpsertArgs} args - Arguments to update or create a Sanction.
     * @example
     * // Update or create a Sanction
     * const sanction = await prisma.sanction.upsert({
     *   create: {
     *     // ... data to create a Sanction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sanction we want to update
     *   }
     * })
     */
    upsert<T extends sanctionUpsertArgs>(args: SelectSubset<T, sanctionUpsertArgs<ExtArgs>>): Prisma__sanctionClient<$Result.GetResult<Prisma.$sanctionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sanctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sanctionCountArgs} args - Arguments to filter Sanctions to count.
     * @example
     * // Count the number of Sanctions
     * const count = await prisma.sanction.count({
     *   where: {
     *     // ... the filter for the Sanctions we want to count
     *   }
     * })
    **/
    count<T extends sanctionCountArgs>(
      args?: Subset<T, sanctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SanctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sanction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SanctionAggregateArgs>(args: Subset<T, SanctionAggregateArgs>): Prisma.PrismaPromise<GetSanctionAggregateType<T>>

    /**
     * Group by Sanction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sanctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sanctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sanctionGroupByArgs['orderBy'] }
        : { orderBy?: sanctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sanctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSanctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sanction model
   */
  readonly fields: sanctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sanction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sanctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends sanction$churchArgs<ExtArgs> = {}>(args?: Subset<T, sanction$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sanction model
   */
  interface sanctionFieldRefs {
    readonly id: FieldRef<"sanction", 'String'>
    readonly name: FieldRef<"sanction", 'String'>
    readonly description: FieldRef<"sanction", 'String'>
    readonly startDate: FieldRef<"sanction", 'String'>
    readonly status: FieldRef<"sanction", 'String'>
    readonly churchId: FieldRef<"sanction", 'String'>
    readonly createdAt: FieldRef<"sanction", 'DateTime'>
    readonly updatedAt: FieldRef<"sanction", 'DateTime'>
    readonly endDate: FieldRef<"sanction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * sanction findUnique
   */
  export type sanctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * Filter, which sanction to fetch.
     */
    where: sanctionWhereUniqueInput
  }

  /**
   * sanction findUniqueOrThrow
   */
  export type sanctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * Filter, which sanction to fetch.
     */
    where: sanctionWhereUniqueInput
  }

  /**
   * sanction findFirst
   */
  export type sanctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * Filter, which sanction to fetch.
     */
    where?: sanctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sanctions to fetch.
     */
    orderBy?: sanctionOrderByWithRelationInput | sanctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sanctions.
     */
    cursor?: sanctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sanctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sanctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sanctions.
     */
    distinct?: SanctionScalarFieldEnum | SanctionScalarFieldEnum[]
  }

  /**
   * sanction findFirstOrThrow
   */
  export type sanctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * Filter, which sanction to fetch.
     */
    where?: sanctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sanctions to fetch.
     */
    orderBy?: sanctionOrderByWithRelationInput | sanctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sanctions.
     */
    cursor?: sanctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sanctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sanctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sanctions.
     */
    distinct?: SanctionScalarFieldEnum | SanctionScalarFieldEnum[]
  }

  /**
   * sanction findMany
   */
  export type sanctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * Filter, which sanctions to fetch.
     */
    where?: sanctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sanctions to fetch.
     */
    orderBy?: sanctionOrderByWithRelationInput | sanctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sanctions.
     */
    cursor?: sanctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sanctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sanctions.
     */
    skip?: number
    distinct?: SanctionScalarFieldEnum | SanctionScalarFieldEnum[]
  }

  /**
   * sanction create
   */
  export type sanctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * The data needed to create a sanction.
     */
    data: XOR<sanctionCreateInput, sanctionUncheckedCreateInput>
  }

  /**
   * sanction createMany
   */
  export type sanctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sanctions.
     */
    data: sanctionCreateManyInput | sanctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sanction update
   */
  export type sanctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * The data needed to update a sanction.
     */
    data: XOR<sanctionUpdateInput, sanctionUncheckedUpdateInput>
    /**
     * Choose, which sanction to update.
     */
    where: sanctionWhereUniqueInput
  }

  /**
   * sanction updateMany
   */
  export type sanctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sanctions.
     */
    data: XOR<sanctionUpdateManyMutationInput, sanctionUncheckedUpdateManyInput>
    /**
     * Filter which sanctions to update
     */
    where?: sanctionWhereInput
    /**
     * Limit how many sanctions to update.
     */
    limit?: number
  }

  /**
   * sanction upsert
   */
  export type sanctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * The filter to search for the sanction to update in case it exists.
     */
    where: sanctionWhereUniqueInput
    /**
     * In case the sanction found by the `where` argument doesn't exist, create a new sanction with this data.
     */
    create: XOR<sanctionCreateInput, sanctionUncheckedCreateInput>
    /**
     * In case the sanction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sanctionUpdateInput, sanctionUncheckedUpdateInput>
  }

  /**
   * sanction delete
   */
  export type sanctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
    /**
     * Filter which sanction to delete.
     */
    where: sanctionWhereUniqueInput
  }

  /**
   * sanction deleteMany
   */
  export type sanctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sanctions to delete
     */
    where?: sanctionWhereInput
    /**
     * Limit how many sanctions to delete.
     */
    limit?: number
  }

  /**
   * sanction.church
   */
  export type sanction$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * sanction without action
   */
  export type sanctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sanction
     */
    select?: sanctionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sanction
     */
    omit?: sanctionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sanctionInclude<ExtArgs> | null
  }


  /**
   * Model ministry
   */

  export type AggregateMinistry = {
    _count: MinistryCountAggregateOutputType | null
    _min: MinistryMinAggregateOutputType | null
    _max: MinistryMaxAggregateOutputType | null
  }

  export type MinistryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    churchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MinistryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MinistryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ministry to aggregate.
     */
    where?: ministryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ministries to fetch.
     */
    orderBy?: ministryOrderByWithRelationInput | ministryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ministryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ministries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ministries
    **/
    _count?: true | MinistryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryMaxAggregateInputType
  }

  export type GetMinistryAggregateType<T extends MinistryAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistry[P]>
      : GetScalarType<T[P], AggregateMinistry[P]>
  }




  export type ministryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ministryWhereInput
    orderBy?: ministryOrderByWithAggregationInput | ministryOrderByWithAggregationInput[]
    by: MinistryScalarFieldEnum[] | MinistryScalarFieldEnum
    having?: ministryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryCountAggregateInputType | true
    _min?: MinistryMinAggregateInputType
    _max?: MinistryMaxAggregateInputType
  }

  export type MinistryGroupByOutputType = {
    id: string
    name: string
    description: string
    churchId: string | null
    createdAt: Date
    updatedAt: Date
    _count: MinistryCountAggregateOutputType | null
    _min: MinistryMinAggregateOutputType | null
    _max: MinistryMaxAggregateOutputType | null
  }

  type GetMinistryGroupByPayload<T extends ministryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryGroupByOutputType[P]>
        }
      >
    >


  export type ministrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ministry$churchArgs<ExtArgs>
  }, ExtArgs["result"]["ministry"]>



  export type ministrySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ministryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "churchId" | "createdAt" | "updatedAt", ExtArgs["result"]["ministry"]>
  export type ministryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ministry$churchArgs<ExtArgs>
  }

  export type $ministryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ministry"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      churchId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ministry"]>
    composites: {}
  }

  type ministryGetPayload<S extends boolean | null | undefined | ministryDefaultArgs> = $Result.GetResult<Prisma.$ministryPayload, S>

  type ministryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ministryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryCountAggregateInputType | true
    }

  export interface ministryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ministry'], meta: { name: 'ministry' } }
    /**
     * Find zero or one Ministry that matches the filter.
     * @param {ministryFindUniqueArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ministryFindUniqueArgs>(args: SelectSubset<T, ministryFindUniqueArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ministry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ministryFindUniqueOrThrowArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ministryFindUniqueOrThrowArgs>(args: SelectSubset<T, ministryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ministry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ministryFindFirstArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ministryFindFirstArgs>(args?: SelectSubset<T, ministryFindFirstArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ministry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ministryFindFirstOrThrowArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ministryFindFirstOrThrowArgs>(args?: SelectSubset<T, ministryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ministries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ministryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ministries
     * const ministries = await prisma.ministry.findMany()
     * 
     * // Get first 10 Ministries
     * const ministries = await prisma.ministry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryWithIdOnly = await prisma.ministry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ministryFindManyArgs>(args?: SelectSubset<T, ministryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ministry.
     * @param {ministryCreateArgs} args - Arguments to create a Ministry.
     * @example
     * // Create one Ministry
     * const Ministry = await prisma.ministry.create({
     *   data: {
     *     // ... data to create a Ministry
     *   }
     * })
     * 
     */
    create<T extends ministryCreateArgs>(args: SelectSubset<T, ministryCreateArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ministries.
     * @param {ministryCreateManyArgs} args - Arguments to create many Ministries.
     * @example
     * // Create many Ministries
     * const ministry = await prisma.ministry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ministryCreateManyArgs>(args?: SelectSubset<T, ministryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ministry.
     * @param {ministryDeleteArgs} args - Arguments to delete one Ministry.
     * @example
     * // Delete one Ministry
     * const Ministry = await prisma.ministry.delete({
     *   where: {
     *     // ... filter to delete one Ministry
     *   }
     * })
     * 
     */
    delete<T extends ministryDeleteArgs>(args: SelectSubset<T, ministryDeleteArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ministry.
     * @param {ministryUpdateArgs} args - Arguments to update one Ministry.
     * @example
     * // Update one Ministry
     * const ministry = await prisma.ministry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ministryUpdateArgs>(args: SelectSubset<T, ministryUpdateArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ministries.
     * @param {ministryDeleteManyArgs} args - Arguments to filter Ministries to delete.
     * @example
     * // Delete a few Ministries
     * const { count } = await prisma.ministry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ministryDeleteManyArgs>(args?: SelectSubset<T, ministryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ministries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ministryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ministries
     * const ministry = await prisma.ministry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ministryUpdateManyArgs>(args: SelectSubset<T, ministryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ministry.
     * @param {ministryUpsertArgs} args - Arguments to update or create a Ministry.
     * @example
     * // Update or create a Ministry
     * const ministry = await prisma.ministry.upsert({
     *   create: {
     *     // ... data to create a Ministry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ministry we want to update
     *   }
     * })
     */
    upsert<T extends ministryUpsertArgs>(args: SelectSubset<T, ministryUpsertArgs<ExtArgs>>): Prisma__ministryClient<$Result.GetResult<Prisma.$ministryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ministries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ministryCountArgs} args - Arguments to filter Ministries to count.
     * @example
     * // Count the number of Ministries
     * const count = await prisma.ministry.count({
     *   where: {
     *     // ... the filter for the Ministries we want to count
     *   }
     * })
    **/
    count<T extends ministryCountArgs>(
      args?: Subset<T, ministryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ministry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryAggregateArgs>(args: Subset<T, MinistryAggregateArgs>): Prisma.PrismaPromise<GetMinistryAggregateType<T>>

    /**
     * Group by Ministry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ministryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ministryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ministryGroupByArgs['orderBy'] }
        : { orderBy?: ministryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ministryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ministry model
   */
  readonly fields: ministryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ministry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ministryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends ministry$churchArgs<ExtArgs> = {}>(args?: Subset<T, ministry$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ministry model
   */
  interface ministryFieldRefs {
    readonly id: FieldRef<"ministry", 'String'>
    readonly name: FieldRef<"ministry", 'String'>
    readonly description: FieldRef<"ministry", 'String'>
    readonly churchId: FieldRef<"ministry", 'String'>
    readonly createdAt: FieldRef<"ministry", 'DateTime'>
    readonly updatedAt: FieldRef<"ministry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ministry findUnique
   */
  export type ministryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * Filter, which ministry to fetch.
     */
    where: ministryWhereUniqueInput
  }

  /**
   * ministry findUniqueOrThrow
   */
  export type ministryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * Filter, which ministry to fetch.
     */
    where: ministryWhereUniqueInput
  }

  /**
   * ministry findFirst
   */
  export type ministryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * Filter, which ministry to fetch.
     */
    where?: ministryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ministries to fetch.
     */
    orderBy?: ministryOrderByWithRelationInput | ministryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ministries.
     */
    cursor?: ministryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ministries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ministries.
     */
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * ministry findFirstOrThrow
   */
  export type ministryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * Filter, which ministry to fetch.
     */
    where?: ministryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ministries to fetch.
     */
    orderBy?: ministryOrderByWithRelationInput | ministryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ministries.
     */
    cursor?: ministryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ministries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ministries.
     */
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * ministry findMany
   */
  export type ministryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * Filter, which ministries to fetch.
     */
    where?: ministryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ministries to fetch.
     */
    orderBy?: ministryOrderByWithRelationInput | ministryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ministries.
     */
    cursor?: ministryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ministries.
     */
    skip?: number
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * ministry create
   */
  export type ministryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * The data needed to create a ministry.
     */
    data: XOR<ministryCreateInput, ministryUncheckedCreateInput>
  }

  /**
   * ministry createMany
   */
  export type ministryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ministries.
     */
    data: ministryCreateManyInput | ministryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ministry update
   */
  export type ministryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * The data needed to update a ministry.
     */
    data: XOR<ministryUpdateInput, ministryUncheckedUpdateInput>
    /**
     * Choose, which ministry to update.
     */
    where: ministryWhereUniqueInput
  }

  /**
   * ministry updateMany
   */
  export type ministryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ministries.
     */
    data: XOR<ministryUpdateManyMutationInput, ministryUncheckedUpdateManyInput>
    /**
     * Filter which ministries to update
     */
    where?: ministryWhereInput
    /**
     * Limit how many ministries to update.
     */
    limit?: number
  }

  /**
   * ministry upsert
   */
  export type ministryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * The filter to search for the ministry to update in case it exists.
     */
    where: ministryWhereUniqueInput
    /**
     * In case the ministry found by the `where` argument doesn't exist, create a new ministry with this data.
     */
    create: XOR<ministryCreateInput, ministryUncheckedCreateInput>
    /**
     * In case the ministry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ministryUpdateInput, ministryUncheckedUpdateInput>
  }

  /**
   * ministry delete
   */
  export type ministryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
    /**
     * Filter which ministry to delete.
     */
    where: ministryWhereUniqueInput
  }

  /**
   * ministry deleteMany
   */
  export type ministryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ministries to delete
     */
    where?: ministryWhereInput
    /**
     * Limit how many ministries to delete.
     */
    limit?: number
  }

  /**
   * ministry.church
   */
  export type ministry$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * ministry without action
   */
  export type ministryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ministry
     */
    select?: ministrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ministry
     */
    omit?: ministryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ministryInclude<ExtArgs> | null
  }


  /**
   * Model pasteur
   */

  export type AggregatePasteur = {
    _count: PasteurCountAggregateOutputType | null
    _min: PasteurMinAggregateOutputType | null
    _max: PasteurMaxAggregateOutputType | null
  }

  export type PasteurMinAggregateOutputType = {
    id: string | null
    pasteurName: string | null
    churchId: string | null
    address: string | null
    phone: string | null
    status: string | null
    email: string | null
  }

  export type PasteurMaxAggregateOutputType = {
    id: string | null
    pasteurName: string | null
    churchId: string | null
    address: string | null
    phone: string | null
    status: string | null
    email: string | null
  }

  export type PasteurCountAggregateOutputType = {
    id: number
    pasteurName: number
    churchId: number
    address: number
    phone: number
    status: number
    email: number
    _all: number
  }


  export type PasteurMinAggregateInputType = {
    id?: true
    pasteurName?: true
    churchId?: true
    address?: true
    phone?: true
    status?: true
    email?: true
  }

  export type PasteurMaxAggregateInputType = {
    id?: true
    pasteurName?: true
    churchId?: true
    address?: true
    phone?: true
    status?: true
    email?: true
  }

  export type PasteurCountAggregateInputType = {
    id?: true
    pasteurName?: true
    churchId?: true
    address?: true
    phone?: true
    status?: true
    email?: true
    _all?: true
  }

  export type PasteurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pasteur to aggregate.
     */
    where?: pasteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pasteurs to fetch.
     */
    orderBy?: pasteurOrderByWithRelationInput | pasteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pasteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pasteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pasteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pasteurs
    **/
    _count?: true | PasteurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasteurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasteurMaxAggregateInputType
  }

  export type GetPasteurAggregateType<T extends PasteurAggregateArgs> = {
        [P in keyof T & keyof AggregatePasteur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasteur[P]>
      : GetScalarType<T[P], AggregatePasteur[P]>
  }




  export type pasteurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pasteurWhereInput
    orderBy?: pasteurOrderByWithAggregationInput | pasteurOrderByWithAggregationInput[]
    by: PasteurScalarFieldEnum[] | PasteurScalarFieldEnum
    having?: pasteurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasteurCountAggregateInputType | true
    _min?: PasteurMinAggregateInputType
    _max?: PasteurMaxAggregateInputType
  }

  export type PasteurGroupByOutputType = {
    id: string
    pasteurName: string
    churchId: string | null
    address: string
    phone: string
    status: string
    email: string
    _count: PasteurCountAggregateOutputType | null
    _min: PasteurMinAggregateOutputType | null
    _max: PasteurMaxAggregateOutputType | null
  }

  type GetPasteurGroupByPayload<T extends pasteurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasteurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasteurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasteurGroupByOutputType[P]>
            : GetScalarType<T[P], PasteurGroupByOutputType[P]>
        }
      >
    >


  export type pasteurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pasteurName?: boolean
    churchId?: boolean
    address?: boolean
    phone?: boolean
    status?: boolean
    email?: boolean
    church?: boolean | pasteur$churchArgs<ExtArgs>
  }, ExtArgs["result"]["pasteur"]>



  export type pasteurSelectScalar = {
    id?: boolean
    pasteurName?: boolean
    churchId?: boolean
    address?: boolean
    phone?: boolean
    status?: boolean
    email?: boolean
  }

  export type pasteurOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pasteurName" | "churchId" | "address" | "phone" | "status" | "email", ExtArgs["result"]["pasteur"]>
  export type pasteurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | pasteur$churchArgs<ExtArgs>
  }

  export type $pasteurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pasteur"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pasteurName: string
      churchId: string | null
      address: string
      phone: string
      status: string
      email: string
    }, ExtArgs["result"]["pasteur"]>
    composites: {}
  }

  type pasteurGetPayload<S extends boolean | null | undefined | pasteurDefaultArgs> = $Result.GetResult<Prisma.$pasteurPayload, S>

  type pasteurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<pasteurFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasteurCountAggregateInputType | true
    }

  export interface pasteurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pasteur'], meta: { name: 'pasteur' } }
    /**
     * Find zero or one Pasteur that matches the filter.
     * @param {pasteurFindUniqueArgs} args - Arguments to find a Pasteur
     * @example
     * // Get one Pasteur
     * const pasteur = await prisma.pasteur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends pasteurFindUniqueArgs>(args: SelectSubset<T, pasteurFindUniqueArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pasteur that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {pasteurFindUniqueOrThrowArgs} args - Arguments to find a Pasteur
     * @example
     * // Get one Pasteur
     * const pasteur = await prisma.pasteur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends pasteurFindUniqueOrThrowArgs>(args: SelectSubset<T, pasteurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pasteur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pasteurFindFirstArgs} args - Arguments to find a Pasteur
     * @example
     * // Get one Pasteur
     * const pasteur = await prisma.pasteur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends pasteurFindFirstArgs>(args?: SelectSubset<T, pasteurFindFirstArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pasteur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pasteurFindFirstOrThrowArgs} args - Arguments to find a Pasteur
     * @example
     * // Get one Pasteur
     * const pasteur = await prisma.pasteur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends pasteurFindFirstOrThrowArgs>(args?: SelectSubset<T, pasteurFindFirstOrThrowArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pasteurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pasteurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pasteurs
     * const pasteurs = await prisma.pasteur.findMany()
     * 
     * // Get first 10 Pasteurs
     * const pasteurs = await prisma.pasteur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pasteurWithIdOnly = await prisma.pasteur.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends pasteurFindManyArgs>(args?: SelectSubset<T, pasteurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pasteur.
     * @param {pasteurCreateArgs} args - Arguments to create a Pasteur.
     * @example
     * // Create one Pasteur
     * const Pasteur = await prisma.pasteur.create({
     *   data: {
     *     // ... data to create a Pasteur
     *   }
     * })
     * 
     */
    create<T extends pasteurCreateArgs>(args: SelectSubset<T, pasteurCreateArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pasteurs.
     * @param {pasteurCreateManyArgs} args - Arguments to create many Pasteurs.
     * @example
     * // Create many Pasteurs
     * const pasteur = await prisma.pasteur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends pasteurCreateManyArgs>(args?: SelectSubset<T, pasteurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pasteur.
     * @param {pasteurDeleteArgs} args - Arguments to delete one Pasteur.
     * @example
     * // Delete one Pasteur
     * const Pasteur = await prisma.pasteur.delete({
     *   where: {
     *     // ... filter to delete one Pasteur
     *   }
     * })
     * 
     */
    delete<T extends pasteurDeleteArgs>(args: SelectSubset<T, pasteurDeleteArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pasteur.
     * @param {pasteurUpdateArgs} args - Arguments to update one Pasteur.
     * @example
     * // Update one Pasteur
     * const pasteur = await prisma.pasteur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends pasteurUpdateArgs>(args: SelectSubset<T, pasteurUpdateArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pasteurs.
     * @param {pasteurDeleteManyArgs} args - Arguments to filter Pasteurs to delete.
     * @example
     * // Delete a few Pasteurs
     * const { count } = await prisma.pasteur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends pasteurDeleteManyArgs>(args?: SelectSubset<T, pasteurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pasteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pasteurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pasteurs
     * const pasteur = await prisma.pasteur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends pasteurUpdateManyArgs>(args: SelectSubset<T, pasteurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pasteur.
     * @param {pasteurUpsertArgs} args - Arguments to update or create a Pasteur.
     * @example
     * // Update or create a Pasteur
     * const pasteur = await prisma.pasteur.upsert({
     *   create: {
     *     // ... data to create a Pasteur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pasteur we want to update
     *   }
     * })
     */
    upsert<T extends pasteurUpsertArgs>(args: SelectSubset<T, pasteurUpsertArgs<ExtArgs>>): Prisma__pasteurClient<$Result.GetResult<Prisma.$pasteurPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pasteurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pasteurCountArgs} args - Arguments to filter Pasteurs to count.
     * @example
     * // Count the number of Pasteurs
     * const count = await prisma.pasteur.count({
     *   where: {
     *     // ... the filter for the Pasteurs we want to count
     *   }
     * })
    **/
    count<T extends pasteurCountArgs>(
      args?: Subset<T, pasteurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasteurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pasteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasteurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasteurAggregateArgs>(args: Subset<T, PasteurAggregateArgs>): Prisma.PrismaPromise<GetPasteurAggregateType<T>>

    /**
     * Group by Pasteur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pasteurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pasteurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pasteurGroupByArgs['orderBy'] }
        : { orderBy?: pasteurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pasteurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasteurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pasteur model
   */
  readonly fields: pasteurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pasteur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pasteurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends pasteur$churchArgs<ExtArgs> = {}>(args?: Subset<T, pasteur$churchArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pasteur model
   */
  interface pasteurFieldRefs {
    readonly id: FieldRef<"pasteur", 'String'>
    readonly pasteurName: FieldRef<"pasteur", 'String'>
    readonly churchId: FieldRef<"pasteur", 'String'>
    readonly address: FieldRef<"pasteur", 'String'>
    readonly phone: FieldRef<"pasteur", 'String'>
    readonly status: FieldRef<"pasteur", 'String'>
    readonly email: FieldRef<"pasteur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * pasteur findUnique
   */
  export type pasteurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * Filter, which pasteur to fetch.
     */
    where: pasteurWhereUniqueInput
  }

  /**
   * pasteur findUniqueOrThrow
   */
  export type pasteurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * Filter, which pasteur to fetch.
     */
    where: pasteurWhereUniqueInput
  }

  /**
   * pasteur findFirst
   */
  export type pasteurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * Filter, which pasteur to fetch.
     */
    where?: pasteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pasteurs to fetch.
     */
    orderBy?: pasteurOrderByWithRelationInput | pasteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pasteurs.
     */
    cursor?: pasteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pasteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pasteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pasteurs.
     */
    distinct?: PasteurScalarFieldEnum | PasteurScalarFieldEnum[]
  }

  /**
   * pasteur findFirstOrThrow
   */
  export type pasteurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * Filter, which pasteur to fetch.
     */
    where?: pasteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pasteurs to fetch.
     */
    orderBy?: pasteurOrderByWithRelationInput | pasteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pasteurs.
     */
    cursor?: pasteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pasteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pasteurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pasteurs.
     */
    distinct?: PasteurScalarFieldEnum | PasteurScalarFieldEnum[]
  }

  /**
   * pasteur findMany
   */
  export type pasteurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * Filter, which pasteurs to fetch.
     */
    where?: pasteurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pasteurs to fetch.
     */
    orderBy?: pasteurOrderByWithRelationInput | pasteurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pasteurs.
     */
    cursor?: pasteurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pasteurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pasteurs.
     */
    skip?: number
    distinct?: PasteurScalarFieldEnum | PasteurScalarFieldEnum[]
  }

  /**
   * pasteur create
   */
  export type pasteurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * The data needed to create a pasteur.
     */
    data: XOR<pasteurCreateInput, pasteurUncheckedCreateInput>
  }

  /**
   * pasteur createMany
   */
  export type pasteurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pasteurs.
     */
    data: pasteurCreateManyInput | pasteurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pasteur update
   */
  export type pasteurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * The data needed to update a pasteur.
     */
    data: XOR<pasteurUpdateInput, pasteurUncheckedUpdateInput>
    /**
     * Choose, which pasteur to update.
     */
    where: pasteurWhereUniqueInput
  }

  /**
   * pasteur updateMany
   */
  export type pasteurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pasteurs.
     */
    data: XOR<pasteurUpdateManyMutationInput, pasteurUncheckedUpdateManyInput>
    /**
     * Filter which pasteurs to update
     */
    where?: pasteurWhereInput
    /**
     * Limit how many pasteurs to update.
     */
    limit?: number
  }

  /**
   * pasteur upsert
   */
  export type pasteurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * The filter to search for the pasteur to update in case it exists.
     */
    where: pasteurWhereUniqueInput
    /**
     * In case the pasteur found by the `where` argument doesn't exist, create a new pasteur with this data.
     */
    create: XOR<pasteurCreateInput, pasteurUncheckedCreateInput>
    /**
     * In case the pasteur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pasteurUpdateInput, pasteurUncheckedUpdateInput>
  }

  /**
   * pasteur delete
   */
  export type pasteurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
    /**
     * Filter which pasteur to delete.
     */
    where: pasteurWhereUniqueInput
  }

  /**
   * pasteur deleteMany
   */
  export type pasteurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pasteurs to delete
     */
    where?: pasteurWhereInput
    /**
     * Limit how many pasteurs to delete.
     */
    limit?: number
  }

  /**
   * pasteur.church
   */
  export type pasteur$churchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    where?: ChurchWhereInput
  }

  /**
   * pasteur without action
   */
  export type pasteurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pasteur
     */
    select?: pasteurSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pasteur
     */
    omit?: pasteurOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: pasteurInclude<ExtArgs> | null
  }


  /**
   * Model Departement
   */

  export type AggregateDepartement = {
    _count: DepartementCountAggregateOutputType | null
    _min: DepartementMinAggregateOutputType | null
    _max: DepartementMaxAggregateOutputType | null
  }

  export type DepartementMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DepartementMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type DepartementCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type DepartementMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type DepartementMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type DepartementCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type DepartementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departement to aggregate.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departements
    **/
    _count?: true | DepartementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartementMaxAggregateInputType
  }

  export type GetDepartementAggregateType<T extends DepartementAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartement[P]>
      : GetScalarType<T[P], AggregateDepartement[P]>
  }




  export type DepartementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartementWhereInput
    orderBy?: DepartementOrderByWithAggregationInput | DepartementOrderByWithAggregationInput[]
    by: DepartementScalarFieldEnum[] | DepartementScalarFieldEnum
    having?: DepartementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartementCountAggregateInputType | true
    _min?: DepartementMinAggregateInputType
    _max?: DepartementMaxAggregateInputType
  }

  export type DepartementGroupByOutputType = {
    id: string
    name: string
    _count: DepartementCountAggregateOutputType | null
    _min: DepartementMinAggregateOutputType | null
    _max: DepartementMaxAggregateOutputType | null
  }

  type GetDepartementGroupByPayload<T extends DepartementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartementGroupByOutputType[P]>
            : GetScalarType<T[P], DepartementGroupByOutputType[P]>
        }
      >
    >


  export type DepartementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    commune?: boolean | Departement$communeArgs<ExtArgs>
    _count?: boolean | DepartementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departement"]>



  export type DepartementSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type DepartementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["departement"]>
  export type DepartementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commune?: boolean | Departement$communeArgs<ExtArgs>
    _count?: boolean | DepartementCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DepartementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Departement"
    objects: {
      commune: Prisma.$CommunePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["departement"]>
    composites: {}
  }

  type DepartementGetPayload<S extends boolean | null | undefined | DepartementDefaultArgs> = $Result.GetResult<Prisma.$DepartementPayload, S>

  type DepartementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartementCountAggregateInputType | true
    }

  export interface DepartementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Departement'], meta: { name: 'Departement' } }
    /**
     * Find zero or one Departement that matches the filter.
     * @param {DepartementFindUniqueArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartementFindUniqueArgs>(args: SelectSubset<T, DepartementFindUniqueArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Departement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartementFindUniqueOrThrowArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartementFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Departement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementFindFirstArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartementFindFirstArgs>(args?: SelectSubset<T, DepartementFindFirstArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Departement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementFindFirstOrThrowArgs} args - Arguments to find a Departement
     * @example
     * // Get one Departement
     * const departement = await prisma.departement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartementFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartementFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departements
     * const departements = await prisma.departement.findMany()
     * 
     * // Get first 10 Departements
     * const departements = await prisma.departement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departementWithIdOnly = await prisma.departement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartementFindManyArgs>(args?: SelectSubset<T, DepartementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Departement.
     * @param {DepartementCreateArgs} args - Arguments to create a Departement.
     * @example
     * // Create one Departement
     * const Departement = await prisma.departement.create({
     *   data: {
     *     // ... data to create a Departement
     *   }
     * })
     * 
     */
    create<T extends DepartementCreateArgs>(args: SelectSubset<T, DepartementCreateArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departements.
     * @param {DepartementCreateManyArgs} args - Arguments to create many Departements.
     * @example
     * // Create many Departements
     * const departement = await prisma.departement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartementCreateManyArgs>(args?: SelectSubset<T, DepartementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Departement.
     * @param {DepartementDeleteArgs} args - Arguments to delete one Departement.
     * @example
     * // Delete one Departement
     * const Departement = await prisma.departement.delete({
     *   where: {
     *     // ... filter to delete one Departement
     *   }
     * })
     * 
     */
    delete<T extends DepartementDeleteArgs>(args: SelectSubset<T, DepartementDeleteArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Departement.
     * @param {DepartementUpdateArgs} args - Arguments to update one Departement.
     * @example
     * // Update one Departement
     * const departement = await prisma.departement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartementUpdateArgs>(args: SelectSubset<T, DepartementUpdateArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departements.
     * @param {DepartementDeleteManyArgs} args - Arguments to filter Departements to delete.
     * @example
     * // Delete a few Departements
     * const { count } = await prisma.departement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartementDeleteManyArgs>(args?: SelectSubset<T, DepartementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departements
     * const departement = await prisma.departement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartementUpdateManyArgs>(args: SelectSubset<T, DepartementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Departement.
     * @param {DepartementUpsertArgs} args - Arguments to update or create a Departement.
     * @example
     * // Update or create a Departement
     * const departement = await prisma.departement.upsert({
     *   create: {
     *     // ... data to create a Departement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Departement we want to update
     *   }
     * })
     */
    upsert<T extends DepartementUpsertArgs>(args: SelectSubset<T, DepartementUpsertArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementCountArgs} args - Arguments to filter Departements to count.
     * @example
     * // Count the number of Departements
     * const count = await prisma.departement.count({
     *   where: {
     *     // ... the filter for the Departements we want to count
     *   }
     * })
    **/
    count<T extends DepartementCountArgs>(
      args?: Subset<T, DepartementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Departement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartementAggregateArgs>(args: Subset<T, DepartementAggregateArgs>): Prisma.PrismaPromise<GetDepartementAggregateType<T>>

    /**
     * Group by Departement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartementGroupByArgs['orderBy'] }
        : { orderBy?: DepartementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Departement model
   */
  readonly fields: DepartementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Departement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commune<T extends Departement$communeArgs<ExtArgs> = {}>(args?: Subset<T, Departement$communeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Departement model
   */
  interface DepartementFieldRefs {
    readonly id: FieldRef<"Departement", 'String'>
    readonly name: FieldRef<"Departement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Departement findUnique
   */
  export type DepartementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement findUniqueOrThrow
   */
  export type DepartementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement findFirst
   */
  export type DepartementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departements.
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departements.
     */
    distinct?: DepartementScalarFieldEnum | DepartementScalarFieldEnum[]
  }

  /**
   * Departement findFirstOrThrow
   */
  export type DepartementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departement to fetch.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departements.
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departements.
     */
    distinct?: DepartementScalarFieldEnum | DepartementScalarFieldEnum[]
  }

  /**
   * Departement findMany
   */
  export type DepartementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter, which Departements to fetch.
     */
    where?: DepartementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departements to fetch.
     */
    orderBy?: DepartementOrderByWithRelationInput | DepartementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departements.
     */
    cursor?: DepartementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departements.
     */
    skip?: number
    distinct?: DepartementScalarFieldEnum | DepartementScalarFieldEnum[]
  }

  /**
   * Departement create
   */
  export type DepartementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * The data needed to create a Departement.
     */
    data: XOR<DepartementCreateInput, DepartementUncheckedCreateInput>
  }

  /**
   * Departement createMany
   */
  export type DepartementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departements.
     */
    data: DepartementCreateManyInput | DepartementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Departement update
   */
  export type DepartementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * The data needed to update a Departement.
     */
    data: XOR<DepartementUpdateInput, DepartementUncheckedUpdateInput>
    /**
     * Choose, which Departement to update.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement updateMany
   */
  export type DepartementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departements.
     */
    data: XOR<DepartementUpdateManyMutationInput, DepartementUncheckedUpdateManyInput>
    /**
     * Filter which Departements to update
     */
    where?: DepartementWhereInput
    /**
     * Limit how many Departements to update.
     */
    limit?: number
  }

  /**
   * Departement upsert
   */
  export type DepartementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * The filter to search for the Departement to update in case it exists.
     */
    where: DepartementWhereUniqueInput
    /**
     * In case the Departement found by the `where` argument doesn't exist, create a new Departement with this data.
     */
    create: XOR<DepartementCreateInput, DepartementUncheckedCreateInput>
    /**
     * In case the Departement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartementUpdateInput, DepartementUncheckedUpdateInput>
  }

  /**
   * Departement delete
   */
  export type DepartementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
    /**
     * Filter which Departement to delete.
     */
    where: DepartementWhereUniqueInput
  }

  /**
   * Departement deleteMany
   */
  export type DepartementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departements to delete
     */
    where?: DepartementWhereInput
    /**
     * Limit how many Departements to delete.
     */
    limit?: number
  }

  /**
   * Departement.commune
   */
  export type Departement$communeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    where?: CommuneWhereInput
    orderBy?: CommuneOrderByWithRelationInput | CommuneOrderByWithRelationInput[]
    cursor?: CommuneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommuneScalarFieldEnum | CommuneScalarFieldEnum[]
  }

  /**
   * Departement without action
   */
  export type DepartementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departement
     */
    select?: DepartementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departement
     */
    omit?: DepartementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartementInclude<ExtArgs> | null
  }


  /**
   * Model Commune
   */

  export type AggregateCommune = {
    _count: CommuneCountAggregateOutputType | null
    _min: CommuneMinAggregateOutputType | null
    _max: CommuneMaxAggregateOutputType | null
  }

  export type CommuneMinAggregateOutputType = {
    id: string | null
    name: string | null
    departementId: string | null
  }

  export type CommuneMaxAggregateOutputType = {
    id: string | null
    name: string | null
    departementId: string | null
  }

  export type CommuneCountAggregateOutputType = {
    id: number
    name: number
    departementId: number
    _all: number
  }


  export type CommuneMinAggregateInputType = {
    id?: true
    name?: true
    departementId?: true
  }

  export type CommuneMaxAggregateInputType = {
    id?: true
    name?: true
    departementId?: true
  }

  export type CommuneCountAggregateInputType = {
    id?: true
    name?: true
    departementId?: true
    _all?: true
  }

  export type CommuneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Commune to aggregate.
     */
    where?: CommuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communes to fetch.
     */
    orderBy?: CommuneOrderByWithRelationInput | CommuneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communes
    **/
    _count?: true | CommuneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommuneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommuneMaxAggregateInputType
  }

  export type GetCommuneAggregateType<T extends CommuneAggregateArgs> = {
        [P in keyof T & keyof AggregateCommune]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommune[P]>
      : GetScalarType<T[P], AggregateCommune[P]>
  }




  export type CommuneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommuneWhereInput
    orderBy?: CommuneOrderByWithAggregationInput | CommuneOrderByWithAggregationInput[]
    by: CommuneScalarFieldEnum[] | CommuneScalarFieldEnum
    having?: CommuneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommuneCountAggregateInputType | true
    _min?: CommuneMinAggregateInputType
    _max?: CommuneMaxAggregateInputType
  }

  export type CommuneGroupByOutputType = {
    id: string
    name: string
    departementId: string
    _count: CommuneCountAggregateOutputType | null
    _min: CommuneMinAggregateOutputType | null
    _max: CommuneMaxAggregateOutputType | null
  }

  type GetCommuneGroupByPayload<T extends CommuneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommuneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommuneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommuneGroupByOutputType[P]>
            : GetScalarType<T[P], CommuneGroupByOutputType[P]>
        }
      >
    >


  export type CommuneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    departementId?: boolean
    departement?: boolean | DepartementDefaultArgs<ExtArgs>
    sectionCommunale?: boolean | Commune$sectionCommunaleArgs<ExtArgs>
    _count?: boolean | CommuneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commune"]>



  export type CommuneSelectScalar = {
    id?: boolean
    name?: boolean
    departementId?: boolean
  }

  export type CommuneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "departementId", ExtArgs["result"]["commune"]>
  export type CommuneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departement?: boolean | DepartementDefaultArgs<ExtArgs>
    sectionCommunale?: boolean | Commune$sectionCommunaleArgs<ExtArgs>
    _count?: boolean | CommuneCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CommunePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Commune"
    objects: {
      departement: Prisma.$DepartementPayload<ExtArgs>
      sectionCommunale: Prisma.$SectionCommunalePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      departementId: string
    }, ExtArgs["result"]["commune"]>
    composites: {}
  }

  type CommuneGetPayload<S extends boolean | null | undefined | CommuneDefaultArgs> = $Result.GetResult<Prisma.$CommunePayload, S>

  type CommuneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommuneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommuneCountAggregateInputType | true
    }

  export interface CommuneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Commune'], meta: { name: 'Commune' } }
    /**
     * Find zero or one Commune that matches the filter.
     * @param {CommuneFindUniqueArgs} args - Arguments to find a Commune
     * @example
     * // Get one Commune
     * const commune = await prisma.commune.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommuneFindUniqueArgs>(args: SelectSubset<T, CommuneFindUniqueArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Commune that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommuneFindUniqueOrThrowArgs} args - Arguments to find a Commune
     * @example
     * // Get one Commune
     * const commune = await prisma.commune.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommuneFindUniqueOrThrowArgs>(args: SelectSubset<T, CommuneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commune that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuneFindFirstArgs} args - Arguments to find a Commune
     * @example
     * // Get one Commune
     * const commune = await prisma.commune.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommuneFindFirstArgs>(args?: SelectSubset<T, CommuneFindFirstArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Commune that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuneFindFirstOrThrowArgs} args - Arguments to find a Commune
     * @example
     * // Get one Commune
     * const commune = await prisma.commune.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommuneFindFirstOrThrowArgs>(args?: SelectSubset<T, CommuneFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Communes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communes
     * const communes = await prisma.commune.findMany()
     * 
     * // Get first 10 Communes
     * const communes = await prisma.commune.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communeWithIdOnly = await prisma.commune.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommuneFindManyArgs>(args?: SelectSubset<T, CommuneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Commune.
     * @param {CommuneCreateArgs} args - Arguments to create a Commune.
     * @example
     * // Create one Commune
     * const Commune = await prisma.commune.create({
     *   data: {
     *     // ... data to create a Commune
     *   }
     * })
     * 
     */
    create<T extends CommuneCreateArgs>(args: SelectSubset<T, CommuneCreateArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Communes.
     * @param {CommuneCreateManyArgs} args - Arguments to create many Communes.
     * @example
     * // Create many Communes
     * const commune = await prisma.commune.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommuneCreateManyArgs>(args?: SelectSubset<T, CommuneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Commune.
     * @param {CommuneDeleteArgs} args - Arguments to delete one Commune.
     * @example
     * // Delete one Commune
     * const Commune = await prisma.commune.delete({
     *   where: {
     *     // ... filter to delete one Commune
     *   }
     * })
     * 
     */
    delete<T extends CommuneDeleteArgs>(args: SelectSubset<T, CommuneDeleteArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Commune.
     * @param {CommuneUpdateArgs} args - Arguments to update one Commune.
     * @example
     * // Update one Commune
     * const commune = await prisma.commune.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommuneUpdateArgs>(args: SelectSubset<T, CommuneUpdateArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Communes.
     * @param {CommuneDeleteManyArgs} args - Arguments to filter Communes to delete.
     * @example
     * // Delete a few Communes
     * const { count } = await prisma.commune.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommuneDeleteManyArgs>(args?: SelectSubset<T, CommuneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communes
     * const commune = await prisma.commune.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommuneUpdateManyArgs>(args: SelectSubset<T, CommuneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Commune.
     * @param {CommuneUpsertArgs} args - Arguments to update or create a Commune.
     * @example
     * // Update or create a Commune
     * const commune = await prisma.commune.upsert({
     *   create: {
     *     // ... data to create a Commune
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commune we want to update
     *   }
     * })
     */
    upsert<T extends CommuneUpsertArgs>(args: SelectSubset<T, CommuneUpsertArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Communes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuneCountArgs} args - Arguments to filter Communes to count.
     * @example
     * // Count the number of Communes
     * const count = await prisma.commune.count({
     *   where: {
     *     // ... the filter for the Communes we want to count
     *   }
     * })
    **/
    count<T extends CommuneCountArgs>(
      args?: Subset<T, CommuneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommuneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commune.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommuneAggregateArgs>(args: Subset<T, CommuneAggregateArgs>): Prisma.PrismaPromise<GetCommuneAggregateType<T>>

    /**
     * Group by Commune.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommuneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommuneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommuneGroupByArgs['orderBy'] }
        : { orderBy?: CommuneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommuneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommuneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Commune model
   */
  readonly fields: CommuneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Commune.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommuneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departement<T extends DepartementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartementDefaultArgs<ExtArgs>>): Prisma__DepartementClient<$Result.GetResult<Prisma.$DepartementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sectionCommunale<T extends Commune$sectionCommunaleArgs<ExtArgs> = {}>(args?: Subset<T, Commune$sectionCommunaleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Commune model
   */
  interface CommuneFieldRefs {
    readonly id: FieldRef<"Commune", 'String'>
    readonly name: FieldRef<"Commune", 'String'>
    readonly departementId: FieldRef<"Commune", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Commune findUnique
   */
  export type CommuneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * Filter, which Commune to fetch.
     */
    where: CommuneWhereUniqueInput
  }

  /**
   * Commune findUniqueOrThrow
   */
  export type CommuneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * Filter, which Commune to fetch.
     */
    where: CommuneWhereUniqueInput
  }

  /**
   * Commune findFirst
   */
  export type CommuneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * Filter, which Commune to fetch.
     */
    where?: CommuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communes to fetch.
     */
    orderBy?: CommuneOrderByWithRelationInput | CommuneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communes.
     */
    cursor?: CommuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communes.
     */
    distinct?: CommuneScalarFieldEnum | CommuneScalarFieldEnum[]
  }

  /**
   * Commune findFirstOrThrow
   */
  export type CommuneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * Filter, which Commune to fetch.
     */
    where?: CommuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communes to fetch.
     */
    orderBy?: CommuneOrderByWithRelationInput | CommuneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communes.
     */
    cursor?: CommuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communes.
     */
    distinct?: CommuneScalarFieldEnum | CommuneScalarFieldEnum[]
  }

  /**
   * Commune findMany
   */
  export type CommuneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * Filter, which Communes to fetch.
     */
    where?: CommuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communes to fetch.
     */
    orderBy?: CommuneOrderByWithRelationInput | CommuneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communes.
     */
    cursor?: CommuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communes.
     */
    skip?: number
    distinct?: CommuneScalarFieldEnum | CommuneScalarFieldEnum[]
  }

  /**
   * Commune create
   */
  export type CommuneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * The data needed to create a Commune.
     */
    data: XOR<CommuneCreateInput, CommuneUncheckedCreateInput>
  }

  /**
   * Commune createMany
   */
  export type CommuneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Communes.
     */
    data: CommuneCreateManyInput | CommuneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Commune update
   */
  export type CommuneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * The data needed to update a Commune.
     */
    data: XOR<CommuneUpdateInput, CommuneUncheckedUpdateInput>
    /**
     * Choose, which Commune to update.
     */
    where: CommuneWhereUniqueInput
  }

  /**
   * Commune updateMany
   */
  export type CommuneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Communes.
     */
    data: XOR<CommuneUpdateManyMutationInput, CommuneUncheckedUpdateManyInput>
    /**
     * Filter which Communes to update
     */
    where?: CommuneWhereInput
    /**
     * Limit how many Communes to update.
     */
    limit?: number
  }

  /**
   * Commune upsert
   */
  export type CommuneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * The filter to search for the Commune to update in case it exists.
     */
    where: CommuneWhereUniqueInput
    /**
     * In case the Commune found by the `where` argument doesn't exist, create a new Commune with this data.
     */
    create: XOR<CommuneCreateInput, CommuneUncheckedCreateInput>
    /**
     * In case the Commune was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommuneUpdateInput, CommuneUncheckedUpdateInput>
  }

  /**
   * Commune delete
   */
  export type CommuneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
    /**
     * Filter which Commune to delete.
     */
    where: CommuneWhereUniqueInput
  }

  /**
   * Commune deleteMany
   */
  export type CommuneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communes to delete
     */
    where?: CommuneWhereInput
    /**
     * Limit how many Communes to delete.
     */
    limit?: number
  }

  /**
   * Commune.sectionCommunale
   */
  export type Commune$sectionCommunaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    where?: SectionCommunaleWhereInput
    orderBy?: SectionCommunaleOrderByWithRelationInput | SectionCommunaleOrderByWithRelationInput[]
    cursor?: SectionCommunaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionCommunaleScalarFieldEnum | SectionCommunaleScalarFieldEnum[]
  }

  /**
   * Commune without action
   */
  export type CommuneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Commune
     */
    select?: CommuneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Commune
     */
    omit?: CommuneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommuneInclude<ExtArgs> | null
  }


  /**
   * Model SectionCommunale
   */

  export type AggregateSectionCommunale = {
    _count: SectionCommunaleCountAggregateOutputType | null
    _min: SectionCommunaleMinAggregateOutputType | null
    _max: SectionCommunaleMaxAggregateOutputType | null
  }

  export type SectionCommunaleMinAggregateOutputType = {
    id: string | null
    name: string | null
    communeId: string | null
  }

  export type SectionCommunaleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    communeId: string | null
  }

  export type SectionCommunaleCountAggregateOutputType = {
    id: number
    name: number
    communeId: number
    _all: number
  }


  export type SectionCommunaleMinAggregateInputType = {
    id?: true
    name?: true
    communeId?: true
  }

  export type SectionCommunaleMaxAggregateInputType = {
    id?: true
    name?: true
    communeId?: true
  }

  export type SectionCommunaleCountAggregateInputType = {
    id?: true
    name?: true
    communeId?: true
    _all?: true
  }

  export type SectionCommunaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SectionCommunale to aggregate.
     */
    where?: SectionCommunaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionCommunales to fetch.
     */
    orderBy?: SectionCommunaleOrderByWithRelationInput | SectionCommunaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionCommunaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionCommunales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionCommunales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SectionCommunales
    **/
    _count?: true | SectionCommunaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionCommunaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionCommunaleMaxAggregateInputType
  }

  export type GetSectionCommunaleAggregateType<T extends SectionCommunaleAggregateArgs> = {
        [P in keyof T & keyof AggregateSectionCommunale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSectionCommunale[P]>
      : GetScalarType<T[P], AggregateSectionCommunale[P]>
  }




  export type SectionCommunaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionCommunaleWhereInput
    orderBy?: SectionCommunaleOrderByWithAggregationInput | SectionCommunaleOrderByWithAggregationInput[]
    by: SectionCommunaleScalarFieldEnum[] | SectionCommunaleScalarFieldEnum
    having?: SectionCommunaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCommunaleCountAggregateInputType | true
    _min?: SectionCommunaleMinAggregateInputType
    _max?: SectionCommunaleMaxAggregateInputType
  }

  export type SectionCommunaleGroupByOutputType = {
    id: string
    name: string
    communeId: string
    _count: SectionCommunaleCountAggregateOutputType | null
    _min: SectionCommunaleMinAggregateOutputType | null
    _max: SectionCommunaleMaxAggregateOutputType | null
  }

  type GetSectionCommunaleGroupByPayload<T extends SectionCommunaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionCommunaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionCommunaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionCommunaleGroupByOutputType[P]>
            : GetScalarType<T[P], SectionCommunaleGroupByOutputType[P]>
        }
      >
    >


  export type SectionCommunaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    communeId?: boolean
    commune?: boolean | CommuneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sectionCommunale"]>



  export type SectionCommunaleSelectScalar = {
    id?: boolean
    name?: boolean
    communeId?: boolean
  }

  export type SectionCommunaleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "communeId", ExtArgs["result"]["sectionCommunale"]>
  export type SectionCommunaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commune?: boolean | CommuneDefaultArgs<ExtArgs>
  }

  export type $SectionCommunalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SectionCommunale"
    objects: {
      commune: Prisma.$CommunePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      communeId: string
    }, ExtArgs["result"]["sectionCommunale"]>
    composites: {}
  }

  type SectionCommunaleGetPayload<S extends boolean | null | undefined | SectionCommunaleDefaultArgs> = $Result.GetResult<Prisma.$SectionCommunalePayload, S>

  type SectionCommunaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionCommunaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCommunaleCountAggregateInputType | true
    }

  export interface SectionCommunaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SectionCommunale'], meta: { name: 'SectionCommunale' } }
    /**
     * Find zero or one SectionCommunale that matches the filter.
     * @param {SectionCommunaleFindUniqueArgs} args - Arguments to find a SectionCommunale
     * @example
     * // Get one SectionCommunale
     * const sectionCommunale = await prisma.sectionCommunale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionCommunaleFindUniqueArgs>(args: SelectSubset<T, SectionCommunaleFindUniqueArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SectionCommunale that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionCommunaleFindUniqueOrThrowArgs} args - Arguments to find a SectionCommunale
     * @example
     * // Get one SectionCommunale
     * const sectionCommunale = await prisma.sectionCommunale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionCommunaleFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionCommunaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SectionCommunale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCommunaleFindFirstArgs} args - Arguments to find a SectionCommunale
     * @example
     * // Get one SectionCommunale
     * const sectionCommunale = await prisma.sectionCommunale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionCommunaleFindFirstArgs>(args?: SelectSubset<T, SectionCommunaleFindFirstArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SectionCommunale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCommunaleFindFirstOrThrowArgs} args - Arguments to find a SectionCommunale
     * @example
     * // Get one SectionCommunale
     * const sectionCommunale = await prisma.sectionCommunale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionCommunaleFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionCommunaleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SectionCommunales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCommunaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SectionCommunales
     * const sectionCommunales = await prisma.sectionCommunale.findMany()
     * 
     * // Get first 10 SectionCommunales
     * const sectionCommunales = await prisma.sectionCommunale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionCommunaleWithIdOnly = await prisma.sectionCommunale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionCommunaleFindManyArgs>(args?: SelectSubset<T, SectionCommunaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SectionCommunale.
     * @param {SectionCommunaleCreateArgs} args - Arguments to create a SectionCommunale.
     * @example
     * // Create one SectionCommunale
     * const SectionCommunale = await prisma.sectionCommunale.create({
     *   data: {
     *     // ... data to create a SectionCommunale
     *   }
     * })
     * 
     */
    create<T extends SectionCommunaleCreateArgs>(args: SelectSubset<T, SectionCommunaleCreateArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SectionCommunales.
     * @param {SectionCommunaleCreateManyArgs} args - Arguments to create many SectionCommunales.
     * @example
     * // Create many SectionCommunales
     * const sectionCommunale = await prisma.sectionCommunale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCommunaleCreateManyArgs>(args?: SelectSubset<T, SectionCommunaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SectionCommunale.
     * @param {SectionCommunaleDeleteArgs} args - Arguments to delete one SectionCommunale.
     * @example
     * // Delete one SectionCommunale
     * const SectionCommunale = await prisma.sectionCommunale.delete({
     *   where: {
     *     // ... filter to delete one SectionCommunale
     *   }
     * })
     * 
     */
    delete<T extends SectionCommunaleDeleteArgs>(args: SelectSubset<T, SectionCommunaleDeleteArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SectionCommunale.
     * @param {SectionCommunaleUpdateArgs} args - Arguments to update one SectionCommunale.
     * @example
     * // Update one SectionCommunale
     * const sectionCommunale = await prisma.sectionCommunale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionCommunaleUpdateArgs>(args: SelectSubset<T, SectionCommunaleUpdateArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SectionCommunales.
     * @param {SectionCommunaleDeleteManyArgs} args - Arguments to filter SectionCommunales to delete.
     * @example
     * // Delete a few SectionCommunales
     * const { count } = await prisma.sectionCommunale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionCommunaleDeleteManyArgs>(args?: SelectSubset<T, SectionCommunaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SectionCommunales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCommunaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SectionCommunales
     * const sectionCommunale = await prisma.sectionCommunale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionCommunaleUpdateManyArgs>(args: SelectSubset<T, SectionCommunaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SectionCommunale.
     * @param {SectionCommunaleUpsertArgs} args - Arguments to update or create a SectionCommunale.
     * @example
     * // Update or create a SectionCommunale
     * const sectionCommunale = await prisma.sectionCommunale.upsert({
     *   create: {
     *     // ... data to create a SectionCommunale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SectionCommunale we want to update
     *   }
     * })
     */
    upsert<T extends SectionCommunaleUpsertArgs>(args: SelectSubset<T, SectionCommunaleUpsertArgs<ExtArgs>>): Prisma__SectionCommunaleClient<$Result.GetResult<Prisma.$SectionCommunalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SectionCommunales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCommunaleCountArgs} args - Arguments to filter SectionCommunales to count.
     * @example
     * // Count the number of SectionCommunales
     * const count = await prisma.sectionCommunale.count({
     *   where: {
     *     // ... the filter for the SectionCommunales we want to count
     *   }
     * })
    **/
    count<T extends SectionCommunaleCountArgs>(
      args?: Subset<T, SectionCommunaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCommunaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SectionCommunale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCommunaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionCommunaleAggregateArgs>(args: Subset<T, SectionCommunaleAggregateArgs>): Prisma.PrismaPromise<GetSectionCommunaleAggregateType<T>>

    /**
     * Group by SectionCommunale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCommunaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionCommunaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionCommunaleGroupByArgs['orderBy'] }
        : { orderBy?: SectionCommunaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionCommunaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionCommunaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SectionCommunale model
   */
  readonly fields: SectionCommunaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SectionCommunale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionCommunaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commune<T extends CommuneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommuneDefaultArgs<ExtArgs>>): Prisma__CommuneClient<$Result.GetResult<Prisma.$CommunePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SectionCommunale model
   */
  interface SectionCommunaleFieldRefs {
    readonly id: FieldRef<"SectionCommunale", 'String'>
    readonly name: FieldRef<"SectionCommunale", 'String'>
    readonly communeId: FieldRef<"SectionCommunale", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SectionCommunale findUnique
   */
  export type SectionCommunaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * Filter, which SectionCommunale to fetch.
     */
    where: SectionCommunaleWhereUniqueInput
  }

  /**
   * SectionCommunale findUniqueOrThrow
   */
  export type SectionCommunaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * Filter, which SectionCommunale to fetch.
     */
    where: SectionCommunaleWhereUniqueInput
  }

  /**
   * SectionCommunale findFirst
   */
  export type SectionCommunaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * Filter, which SectionCommunale to fetch.
     */
    where?: SectionCommunaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionCommunales to fetch.
     */
    orderBy?: SectionCommunaleOrderByWithRelationInput | SectionCommunaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SectionCommunales.
     */
    cursor?: SectionCommunaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionCommunales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionCommunales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SectionCommunales.
     */
    distinct?: SectionCommunaleScalarFieldEnum | SectionCommunaleScalarFieldEnum[]
  }

  /**
   * SectionCommunale findFirstOrThrow
   */
  export type SectionCommunaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * Filter, which SectionCommunale to fetch.
     */
    where?: SectionCommunaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionCommunales to fetch.
     */
    orderBy?: SectionCommunaleOrderByWithRelationInput | SectionCommunaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SectionCommunales.
     */
    cursor?: SectionCommunaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionCommunales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionCommunales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SectionCommunales.
     */
    distinct?: SectionCommunaleScalarFieldEnum | SectionCommunaleScalarFieldEnum[]
  }

  /**
   * SectionCommunale findMany
   */
  export type SectionCommunaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * Filter, which SectionCommunales to fetch.
     */
    where?: SectionCommunaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SectionCommunales to fetch.
     */
    orderBy?: SectionCommunaleOrderByWithRelationInput | SectionCommunaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SectionCommunales.
     */
    cursor?: SectionCommunaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SectionCommunales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SectionCommunales.
     */
    skip?: number
    distinct?: SectionCommunaleScalarFieldEnum | SectionCommunaleScalarFieldEnum[]
  }

  /**
   * SectionCommunale create
   */
  export type SectionCommunaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * The data needed to create a SectionCommunale.
     */
    data: XOR<SectionCommunaleCreateInput, SectionCommunaleUncheckedCreateInput>
  }

  /**
   * SectionCommunale createMany
   */
  export type SectionCommunaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SectionCommunales.
     */
    data: SectionCommunaleCreateManyInput | SectionCommunaleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SectionCommunale update
   */
  export type SectionCommunaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * The data needed to update a SectionCommunale.
     */
    data: XOR<SectionCommunaleUpdateInput, SectionCommunaleUncheckedUpdateInput>
    /**
     * Choose, which SectionCommunale to update.
     */
    where: SectionCommunaleWhereUniqueInput
  }

  /**
   * SectionCommunale updateMany
   */
  export type SectionCommunaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SectionCommunales.
     */
    data: XOR<SectionCommunaleUpdateManyMutationInput, SectionCommunaleUncheckedUpdateManyInput>
    /**
     * Filter which SectionCommunales to update
     */
    where?: SectionCommunaleWhereInput
    /**
     * Limit how many SectionCommunales to update.
     */
    limit?: number
  }

  /**
   * SectionCommunale upsert
   */
  export type SectionCommunaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * The filter to search for the SectionCommunale to update in case it exists.
     */
    where: SectionCommunaleWhereUniqueInput
    /**
     * In case the SectionCommunale found by the `where` argument doesn't exist, create a new SectionCommunale with this data.
     */
    create: XOR<SectionCommunaleCreateInput, SectionCommunaleUncheckedCreateInput>
    /**
     * In case the SectionCommunale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionCommunaleUpdateInput, SectionCommunaleUncheckedUpdateInput>
  }

  /**
   * SectionCommunale delete
   */
  export type SectionCommunaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
    /**
     * Filter which SectionCommunale to delete.
     */
    where: SectionCommunaleWhereUniqueInput
  }

  /**
   * SectionCommunale deleteMany
   */
  export type SectionCommunaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SectionCommunales to delete
     */
    where?: SectionCommunaleWhereInput
    /**
     * Limit how many SectionCommunales to delete.
     */
    limit?: number
  }

  /**
   * SectionCommunale without action
   */
  export type SectionCommunaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCommunale
     */
    select?: SectionCommunaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SectionCommunale
     */
    omit?: SectionCommunaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionCommunaleInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    churchId: 'churchId'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const PresenceScalarFieldEnum: {
    id: 'id',
    statut: 'statut',
    utilisateurId: 'utilisateurId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    serviceId: 'serviceId'
  };

  export type PresenceScalarFieldEnum = (typeof PresenceScalarFieldEnum)[keyof typeof PresenceScalarFieldEnum]


  export const TtiScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TtiScalarFieldEnum = (typeof TtiScalarFieldEnum)[keyof typeof TtiScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    country: 'country',
    departement: 'departement',
    commune: 'commune',
    sectionCommunale: 'sectionCommunale',
    telephone: 'telephone',
    rue: 'rue'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const ChurchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    quantity: 'quantity',
    address: 'address',
    phone: 'phone',
    anthem: 'anthem',
    facebook: 'facebook',
    instagram: 'instagram',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    picture: 'picture',
    missionId: 'missionId',
    email: 'email',
    mainPasteur: 'mainPasteur',
    whatsapp: 'whatsapp',
    latitude: 'latitude',
    longitude: 'longitude',
    ttiId: 'ttiId',
    addressId: 'addressId'
  };

  export type ChurchScalarFieldEnum = (typeof ChurchScalarFieldEnum)[keyof typeof ChurchScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    baptismDate: 'baptismDate',
    baptismLocation: 'baptismLocation',
    birthCity: 'birthCity',
    birthCountry: 'birthCountry',
    birthDate: 'birthDate',
    churchId: 'churchId',
    churchRole: 'churchRole',
    city: 'city',
    country: 'country',
    envelopeNumber: 'envelopeNumber',
    etatCivil: 'etatCivil',
    facebook: 'facebook',
    firstname: 'firstname',
    instagram: 'instagram',
    password: 'password',
    picture: 'picture',
    profession: 'profession',
    role: 'role',
    sex: 'sex',
    sundayClass: 'sundayClass',
    lastname: 'lastname',
    membreActif: 'membreActif',
    addressLine: 'addressLine',
    homePhone: 'homePhone',
    joinDate: 'joinDate',
    mobilePhone: 'mobilePhone',
    age: 'age',
    minister: 'minister',
    plainPassword: 'plainPassword',
    personToContact: 'personToContact',
    spouseFullName: 'spouseFullName',
    latitude: 'latitude',
    longitude: 'longitude',
    nif: 'nif',
    groupeSanguin: 'groupeSanguin',
    istimothee: 'istimothee',
    timotheeId: 'timotheeId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GroupeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    picture: 'picture',
    showToMembers: 'showToMembers',
    showToNonMembers: 'showToNonMembers',
    showMembers: 'showMembers',
    showLeaders: 'showLeaders',
    meetingDays: 'meetingDays',
    meetingTime: 'meetingTime',
    meetingLocation: 'meetingLocation',
    meetingFrequency: 'meetingFrequency',
    maxMembers: 'maxMembers',
    churchId: 'churchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ageGroup: 'ageGroup',
    minister: 'minister'
  };

  export type GroupeScalarFieldEnum = (typeof GroupeScalarFieldEnum)[keyof typeof GroupeScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    location: 'location',
    frequency: 'frequency',
    startDate: 'startDate',
    endDate: 'endDate',
    churchId: 'churchId',
    createAt: 'createAt',
    updateAt: 'updateAt',
    isRecurring: 'isRecurring',
    endPeriode: 'endPeriode',
    startPeriode: 'startPeriode'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const MariageScalarFieldEnum: {
    id: 'id',
    brideFullname: 'brideFullname',
    birthDate: 'birthDate',
    groomFullname: 'groomFullname',
    goomBirthDate: 'goomBirthDate',
    weddingDate: 'weddingDate',
    weddingLocation: 'weddingLocation',
    weddingCertificate: 'weddingCertificate',
    officiantName: 'officiantName',
    churchId: 'churchId',
    brideCertificate: 'brideCertificate',
    civilStateOfficer: 'civilStateOfficer',
    grooomCertificate: 'grooomCertificate',
    witness: 'witness',
    civilStateStateOfficer: 'civilStateStateOfficer',
    witnessSignature: 'witnessSignature'
  };

  export type MariageScalarFieldEnum = (typeof MariageScalarFieldEnum)[keyof typeof MariageScalarFieldEnum]


  export const FuneralScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    birthDate: 'birthDate',
    funeralDate: 'funeralDate',
    funeralTime: 'funeralTime',
    relationShip: 'relationShip',
    email: 'email',
    deathCertificate: 'deathCertificate',
    nextOfKin: 'nextOfKin',
    officiantName: 'officiantName',
    description: 'description',
    funeralLocation: 'funeralLocation',
    churchId: 'churchId',
    createdAt: 'createdAt',
    status: 'status',
    updatedAt: 'updatedAt',
    telephone: 'telephone'
  };

  export type FuneralScalarFieldEnum = (typeof FuneralScalarFieldEnum)[keyof typeof FuneralScalarFieldEnum]


  export const PresentationScalarFieldEnum: {
    id: 'id',
    placeOfBirth: 'placeOfBirth',
    birthCertificate: 'birthCertificate',
    fatherName: 'fatherName',
    motherName: 'motherName',
    phone: 'phone',
    address: 'address',
    presentationDate: 'presentationDate',
    officiantName: 'officiantName',
    description: 'description',
    churchId: 'churchId',
    childName: 'childName',
    dateOfBirth: 'dateOfBirth',
    witness: 'witness'
  };

  export type PresentationScalarFieldEnum = (typeof PresentationScalarFieldEnum)[keyof typeof PresentationScalarFieldEnum]


  export const BaptismScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    birthDate: 'birthDate',
    placeOfBirth: 'placeOfBirth',
    baptismDate: 'baptismDate',
    baptismCertificate: 'baptismCertificate',
    officiantName: 'officiantName',
    withness: 'withness',
    previousChurch: 'previousChurch',
    testimony: 'testimony',
    churchId: 'churchId',
    conversionDate: 'conversionDate',
    status: 'status',
    baptismLocation: 'baptismLocation',
    endDate: 'endDate',
    startDate: 'startDate'
  };

  export type BaptismScalarFieldEnum = (typeof BaptismScalarFieldEnum)[keyof typeof BaptismScalarFieldEnum]


  export const DeathScalarFieldEnum: {
    id: 'id',
    deathDate: 'deathDate',
    deathPlace: 'deathPlace',
    deathCause: 'deathCause',
    deathCertificate: 'deathCertificate',
    churchId: 'churchId',
    deathTime: 'deathTime',
    description: 'description',
    location: 'location',
    officiantName: 'officiantName',
    relationShip: 'relationShip',
    serviceDate: 'serviceDate',
    nextOfKin: 'nextOfKin'
  };

  export type DeathScalarFieldEnum = (typeof DeathScalarFieldEnum)[keyof typeof DeathScalarFieldEnum]


  export const SundayClassScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    teacher: 'teacher',
    startTime: 'startTime',
    endTime: 'endTime',
    description: 'description',
    churchId: 'churchId',
    createdAt: 'createdAt',
    maxStudents: 'maxStudents',
    ageGroup: 'ageGroup',
    book: 'book'
  };

  export type SundayClassScalarFieldEnum = (typeof SundayClassScalarFieldEnum)[keyof typeof SundayClassScalarFieldEnum]


  export const ExpenseScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    category: 'category',
    date: 'date',
    paymentMethod: 'paymentMethod',
    description: 'description',
    churchId: 'churchId'
  };

  export type ExpenseScalarFieldEnum = (typeof ExpenseScalarFieldEnum)[keyof typeof ExpenseScalarFieldEnum]


  export const OfferingScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    date: 'date',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId',
    status: 'status'
  };

  export type OfferingScalarFieldEnum = (typeof OfferingScalarFieldEnum)[keyof typeof OfferingScalarFieldEnum]


  export const TithingScalarFieldEnum: {
    id: 'id',
    contributorName: 'contributorName',
    amount: 'amount',
    date: 'date',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId'
  };

  export type TithingScalarFieldEnum = (typeof TithingScalarFieldEnum)[keyof typeof TithingScalarFieldEnum]


  export const DonationScalarFieldEnum: {
    id: 'id',
    contributorName: 'contributorName',
    amount: 'amount',
    date: 'date',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId'
  };

  export type DonationScalarFieldEnum = (typeof DonationScalarFieldEnum)[keyof typeof DonationScalarFieldEnum]


  export const MoissonScalarFieldEnum: {
    id: 'id',
    contributorName: 'contributorName',
    amount: 'amount',
    date: 'date',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId'
  };

  export type MoissonScalarFieldEnum = (typeof MoissonScalarFieldEnum)[keyof typeof MoissonScalarFieldEnum]


  export const ComiteeScalarFieldEnum: {
    id: 'id',
    description: 'description',
    meetingDay: 'meetingDay',
    meetingTime: 'meetingTime',
    name: 'name',
    churchId: 'churchId'
  };

  export type ComiteeScalarFieldEnum = (typeof ComiteeScalarFieldEnum)[keyof typeof ComiteeScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    visibility: 'visibility',
    description: 'description',
    date: 'date',
    time: 'time',
    duration: 'duration',
    notes: 'notes',
    churchId: 'churchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const TransfertScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fromChurchId: 'fromChurchId',
    toChurchId: 'toChurchId',
    userId: 'userId'
  };

  export type TransfertScalarFieldEnum = (typeof TransfertScalarFieldEnum)[keyof typeof TransfertScalarFieldEnum]


  export const MissionScalarFieldEnum: {
    id: 'id',
    missionName: 'missionName',
    description: 'description',
    status: 'status',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    presidentName: 'presidentName'
  };

  export type MissionScalarFieldEnum = (typeof MissionScalarFieldEnum)[keyof typeof MissionScalarFieldEnum]


  export const SanctionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    status: 'status',
    churchId: 'churchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    endDate: 'endDate'
  };

  export type SanctionScalarFieldEnum = (typeof SanctionScalarFieldEnum)[keyof typeof SanctionScalarFieldEnum]


  export const MinistryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    churchId: 'churchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MinistryScalarFieldEnum = (typeof MinistryScalarFieldEnum)[keyof typeof MinistryScalarFieldEnum]


  export const PasteurScalarFieldEnum: {
    id: 'id',
    pasteurName: 'pasteurName',
    churchId: 'churchId',
    address: 'address',
    phone: 'phone',
    status: 'status',
    email: 'email'
  };

  export type PasteurScalarFieldEnum = (typeof PasteurScalarFieldEnum)[keyof typeof PasteurScalarFieldEnum]


  export const DepartementScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DepartementScalarFieldEnum = (typeof DepartementScalarFieldEnum)[keyof typeof DepartementScalarFieldEnum]


  export const CommuneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    departementId: 'departementId'
  };

  export type CommuneScalarFieldEnum = (typeof CommuneScalarFieldEnum)[keyof typeof CommuneScalarFieldEnum]


  export const SectionCommunaleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    communeId: 'communeId'
  };

  export type SectionCommunaleScalarFieldEnum = (typeof SectionCommunaleScalarFieldEnum)[keyof typeof SectionCommunaleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const ServiceOrderByRelevanceFieldEnum: {
    id: 'id',
    nom: 'nom',
    churchId: 'churchId'
  };

  export type ServiceOrderByRelevanceFieldEnum = (typeof ServiceOrderByRelevanceFieldEnum)[keyof typeof ServiceOrderByRelevanceFieldEnum]


  export const PresenceOrderByRelevanceFieldEnum: {
    id: 'id',
    utilisateurId: 'utilisateurId',
    serviceId: 'serviceId'
  };

  export type PresenceOrderByRelevanceFieldEnum = (typeof PresenceOrderByRelevanceFieldEnum)[keyof typeof PresenceOrderByRelevanceFieldEnum]


  export const TtiOrderByRelevanceFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type TtiOrderByRelevanceFieldEnum = (typeof TtiOrderByRelevanceFieldEnum)[keyof typeof TtiOrderByRelevanceFieldEnum]


  export const AddressOrderByRelevanceFieldEnum: {
    id: 'id',
    country: 'country',
    departement: 'departement',
    commune: 'commune',
    sectionCommunale: 'sectionCommunale',
    telephone: 'telephone',
    rue: 'rue'
  };

  export type AddressOrderByRelevanceFieldEnum = (typeof AddressOrderByRelevanceFieldEnum)[keyof typeof AddressOrderByRelevanceFieldEnum]


  export const ChurchOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    quantity: 'quantity',
    address: 'address',
    phone: 'phone',
    anthem: 'anthem',
    facebook: 'facebook',
    instagram: 'instagram',
    picture: 'picture',
    missionId: 'missionId',
    email: 'email',
    mainPasteur: 'mainPasteur',
    whatsapp: 'whatsapp',
    latitude: 'latitude',
    longitude: 'longitude',
    ttiId: 'ttiId',
    addressId: 'addressId'
  };

  export type ChurchOrderByRelevanceFieldEnum = (typeof ChurchOrderByRelevanceFieldEnum)[keyof typeof ChurchOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    baptismDate: 'baptismDate',
    baptismLocation: 'baptismLocation',
    birthCity: 'birthCity',
    birthCountry: 'birthCountry',
    birthDate: 'birthDate',
    churchId: 'churchId',
    churchRole: 'churchRole',
    city: 'city',
    country: 'country',
    envelopeNumber: 'envelopeNumber',
    etatCivil: 'etatCivil',
    facebook: 'facebook',
    firstname: 'firstname',
    instagram: 'instagram',
    password: 'password',
    picture: 'picture',
    profession: 'profession',
    sex: 'sex',
    sundayClass: 'sundayClass',
    lastname: 'lastname',
    addressLine: 'addressLine',
    homePhone: 'homePhone',
    joinDate: 'joinDate',
    mobilePhone: 'mobilePhone',
    age: 'age',
    minister: 'minister',
    plainPassword: 'plainPassword',
    personToContact: 'personToContact',
    spouseFullName: 'spouseFullName',
    latitude: 'latitude',
    longitude: 'longitude',
    nif: 'nif',
    groupeSanguin: 'groupeSanguin',
    timotheeId: 'timotheeId'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const GroupeOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    picture: 'picture',
    meetingDays: 'meetingDays',
    meetingTime: 'meetingTime',
    meetingLocation: 'meetingLocation',
    meetingFrequency: 'meetingFrequency',
    maxMembers: 'maxMembers',
    churchId: 'churchId',
    ageGroup: 'ageGroup',
    minister: 'minister'
  };

  export type GroupeOrderByRelevanceFieldEnum = (typeof GroupeOrderByRelevanceFieldEnum)[keyof typeof GroupeOrderByRelevanceFieldEnum]


  export const EventOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    location: 'location',
    frequency: 'frequency',
    startDate: 'startDate',
    endDate: 'endDate',
    churchId: 'churchId',
    endPeriode: 'endPeriode',
    startPeriode: 'startPeriode'
  };

  export type EventOrderByRelevanceFieldEnum = (typeof EventOrderByRelevanceFieldEnum)[keyof typeof EventOrderByRelevanceFieldEnum]


  export const MariageOrderByRelevanceFieldEnum: {
    id: 'id',
    brideFullname: 'brideFullname',
    groomFullname: 'groomFullname',
    weddingLocation: 'weddingLocation',
    weddingCertificate: 'weddingCertificate',
    officiantName: 'officiantName',
    churchId: 'churchId',
    brideCertificate: 'brideCertificate',
    civilStateOfficer: 'civilStateOfficer',
    grooomCertificate: 'grooomCertificate',
    witness: 'witness',
    civilStateStateOfficer: 'civilStateStateOfficer',
    witnessSignature: 'witnessSignature'
  };

  export type MariageOrderByRelevanceFieldEnum = (typeof MariageOrderByRelevanceFieldEnum)[keyof typeof MariageOrderByRelevanceFieldEnum]


  export const FuneralOrderByRelevanceFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    funeralTime: 'funeralTime',
    relationShip: 'relationShip',
    email: 'email',
    deathCertificate: 'deathCertificate',
    nextOfKin: 'nextOfKin',
    officiantName: 'officiantName',
    description: 'description',
    funeralLocation: 'funeralLocation',
    churchId: 'churchId',
    status: 'status',
    telephone: 'telephone'
  };

  export type FuneralOrderByRelevanceFieldEnum = (typeof FuneralOrderByRelevanceFieldEnum)[keyof typeof FuneralOrderByRelevanceFieldEnum]


  export const PresentationOrderByRelevanceFieldEnum: {
    id: 'id',
    placeOfBirth: 'placeOfBirth',
    birthCertificate: 'birthCertificate',
    fatherName: 'fatherName',
    motherName: 'motherName',
    phone: 'phone',
    address: 'address',
    officiantName: 'officiantName',
    description: 'description',
    churchId: 'churchId',
    childName: 'childName',
    witness: 'witness'
  };

  export type PresentationOrderByRelevanceFieldEnum = (typeof PresentationOrderByRelevanceFieldEnum)[keyof typeof PresentationOrderByRelevanceFieldEnum]


  export const BaptismOrderByRelevanceFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    placeOfBirth: 'placeOfBirth',
    baptismCertificate: 'baptismCertificate',
    officiantName: 'officiantName',
    withness: 'withness',
    previousChurch: 'previousChurch',
    testimony: 'testimony',
    churchId: 'churchId',
    status: 'status',
    baptismLocation: 'baptismLocation',
    endDate: 'endDate',
    startDate: 'startDate'
  };

  export type BaptismOrderByRelevanceFieldEnum = (typeof BaptismOrderByRelevanceFieldEnum)[keyof typeof BaptismOrderByRelevanceFieldEnum]


  export const deathOrderByRelevanceFieldEnum: {
    id: 'id',
    deathPlace: 'deathPlace',
    deathCause: 'deathCause',
    deathCertificate: 'deathCertificate',
    churchId: 'churchId',
    deathTime: 'deathTime',
    description: 'description',
    location: 'location',
    officiantName: 'officiantName',
    relationShip: 'relationShip',
    nextOfKin: 'nextOfKin'
  };

  export type deathOrderByRelevanceFieldEnum = (typeof deathOrderByRelevanceFieldEnum)[keyof typeof deathOrderByRelevanceFieldEnum]


  export const sundayClassOrderByRelevanceFieldEnum: {
    id: 'id',
    nom: 'nom',
    teacher: 'teacher',
    startTime: 'startTime',
    endTime: 'endTime',
    description: 'description',
    churchId: 'churchId',
    maxStudents: 'maxStudents',
    ageGroup: 'ageGroup',
    book: 'book'
  };

  export type sundayClassOrderByRelevanceFieldEnum = (typeof sundayClassOrderByRelevanceFieldEnum)[keyof typeof sundayClassOrderByRelevanceFieldEnum]


  export const expenseOrderByRelevanceFieldEnum: {
    id: 'id',
    category: 'category',
    paymentMethod: 'paymentMethod',
    description: 'description',
    churchId: 'churchId'
  };

  export type expenseOrderByRelevanceFieldEnum = (typeof expenseOrderByRelevanceFieldEnum)[keyof typeof expenseOrderByRelevanceFieldEnum]


  export const offeringOrderByRelevanceFieldEnum: {
    id: 'id',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId',
    status: 'status'
  };

  export type offeringOrderByRelevanceFieldEnum = (typeof offeringOrderByRelevanceFieldEnum)[keyof typeof offeringOrderByRelevanceFieldEnum]


  export const tithingOrderByRelevanceFieldEnum: {
    id: 'id',
    contributorName: 'contributorName',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId'
  };

  export type tithingOrderByRelevanceFieldEnum = (typeof tithingOrderByRelevanceFieldEnum)[keyof typeof tithingOrderByRelevanceFieldEnum]


  export const donationOrderByRelevanceFieldEnum: {
    id: 'id',
    contributorName: 'contributorName',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId'
  };

  export type donationOrderByRelevanceFieldEnum = (typeof donationOrderByRelevanceFieldEnum)[keyof typeof donationOrderByRelevanceFieldEnum]


  export const moissonOrderByRelevanceFieldEnum: {
    id: 'id',
    contributorName: 'contributorName',
    paymentMethod: 'paymentMethod',
    note: 'note',
    churchId: 'churchId'
  };

  export type moissonOrderByRelevanceFieldEnum = (typeof moissonOrderByRelevanceFieldEnum)[keyof typeof moissonOrderByRelevanceFieldEnum]


  export const comiteeOrderByRelevanceFieldEnum: {
    id: 'id',
    description: 'description',
    meetingDay: 'meetingDay',
    meetingTime: 'meetingTime',
    name: 'name',
    churchId: 'churchId'
  };

  export type comiteeOrderByRelevanceFieldEnum = (typeof comiteeOrderByRelevanceFieldEnum)[keyof typeof comiteeOrderByRelevanceFieldEnum]


  export const appointmentOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    visibility: 'visibility',
    description: 'description',
    time: 'time',
    duration: 'duration',
    notes: 'notes',
    churchId: 'churchId'
  };

  export type appointmentOrderByRelevanceFieldEnum = (typeof appointmentOrderByRelevanceFieldEnum)[keyof typeof appointmentOrderByRelevanceFieldEnum]


  export const transfertOrderByRelevanceFieldEnum: {
    id: 'id',
    fromChurchId: 'fromChurchId',
    toChurchId: 'toChurchId',
    userId: 'userId'
  };

  export type transfertOrderByRelevanceFieldEnum = (typeof transfertOrderByRelevanceFieldEnum)[keyof typeof transfertOrderByRelevanceFieldEnum]


  export const MissionOrderByRelevanceFieldEnum: {
    id: 'id',
    missionName: 'missionName',
    description: 'description',
    status: 'status',
    location: 'location',
    presidentName: 'presidentName'
  };

  export type MissionOrderByRelevanceFieldEnum = (typeof MissionOrderByRelevanceFieldEnum)[keyof typeof MissionOrderByRelevanceFieldEnum]


  export const sanctionOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    status: 'status',
    churchId: 'churchId',
    endDate: 'endDate'
  };

  export type sanctionOrderByRelevanceFieldEnum = (typeof sanctionOrderByRelevanceFieldEnum)[keyof typeof sanctionOrderByRelevanceFieldEnum]


  export const ministryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    churchId: 'churchId'
  };

  export type ministryOrderByRelevanceFieldEnum = (typeof ministryOrderByRelevanceFieldEnum)[keyof typeof ministryOrderByRelevanceFieldEnum]


  export const pasteurOrderByRelevanceFieldEnum: {
    id: 'id',
    pasteurName: 'pasteurName',
    churchId: 'churchId',
    address: 'address',
    phone: 'phone',
    status: 'status',
    email: 'email'
  };

  export type pasteurOrderByRelevanceFieldEnum = (typeof pasteurOrderByRelevanceFieldEnum)[keyof typeof pasteurOrderByRelevanceFieldEnum]


  export const DepartementOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DepartementOrderByRelevanceFieldEnum = (typeof DepartementOrderByRelevanceFieldEnum)[keyof typeof DepartementOrderByRelevanceFieldEnum]


  export const CommuneOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    departementId: 'departementId'
  };

  export type CommuneOrderByRelevanceFieldEnum = (typeof CommuneOrderByRelevanceFieldEnum)[keyof typeof CommuneOrderByRelevanceFieldEnum]


  export const SectionCommunaleOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    communeId: 'communeId'
  };

  export type SectionCommunaleOrderByRelevanceFieldEnum = (typeof SectionCommunaleOrderByRelevanceFieldEnum)[keyof typeof SectionCommunaleOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'StatutPresence'
   */
  export type EnumStatutPresenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutPresence'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: StringFilter<"Service"> | string
    nom?: StringFilter<"Service"> | string
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    churchId?: StringNullableFilter<"Service"> | string | null
    presences?: PresenceListRelationFilter
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    churchId?: SortOrderInput | SortOrder
    presences?: PresenceOrderByRelationAggregateInput
    church?: ChurchOrderByWithRelationInput
    _relevance?: ServiceOrderByRelevanceInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    nom?: StringFilter<"Service"> | string
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    churchId?: StringNullableFilter<"Service"> | string | null
    presences?: PresenceListRelationFilter
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    churchId?: SortOrderInput | SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Service"> | string
    nom?: StringWithAggregatesFilter<"Service"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    churchId?: StringNullableWithAggregatesFilter<"Service"> | string | null
  }

  export type PresenceWhereInput = {
    AND?: PresenceWhereInput | PresenceWhereInput[]
    OR?: PresenceWhereInput[]
    NOT?: PresenceWhereInput | PresenceWhereInput[]
    id?: StringFilter<"Presence"> | string
    statut?: EnumStatutPresenceFilter<"Presence"> | $Enums.StatutPresence
    utilisateurId?: StringFilter<"Presence"> | string
    createdAt?: DateTimeFilter<"Presence"> | Date | string
    updatedAt?: DateTimeFilter<"Presence"> | Date | string
    serviceId?: StringFilter<"Presence"> | string
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PresenceOrderByWithRelationInput = {
    id?: SortOrder
    statut?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
    service?: ServiceOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: PresenceOrderByRelevanceInput
  }

  export type PresenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PresenceWhereInput | PresenceWhereInput[]
    OR?: PresenceWhereInput[]
    NOT?: PresenceWhereInput | PresenceWhereInput[]
    statut?: EnumStatutPresenceFilter<"Presence"> | $Enums.StatutPresence
    utilisateurId?: StringFilter<"Presence"> | string
    createdAt?: DateTimeFilter<"Presence"> | Date | string
    updatedAt?: DateTimeFilter<"Presence"> | Date | string
    serviceId?: StringFilter<"Presence"> | string
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PresenceOrderByWithAggregationInput = {
    id?: SortOrder
    statut?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
    _count?: PresenceCountOrderByAggregateInput
    _max?: PresenceMaxOrderByAggregateInput
    _min?: PresenceMinOrderByAggregateInput
  }

  export type PresenceScalarWhereWithAggregatesInput = {
    AND?: PresenceScalarWhereWithAggregatesInput | PresenceScalarWhereWithAggregatesInput[]
    OR?: PresenceScalarWhereWithAggregatesInput[]
    NOT?: PresenceScalarWhereWithAggregatesInput | PresenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Presence"> | string
    statut?: EnumStatutPresenceWithAggregatesFilter<"Presence"> | $Enums.StatutPresence
    utilisateurId?: StringWithAggregatesFilter<"Presence"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Presence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Presence"> | Date | string
    serviceId?: StringWithAggregatesFilter<"Presence"> | string
  }

  export type TtiWhereInput = {
    AND?: TtiWhereInput | TtiWhereInput[]
    OR?: TtiWhereInput[]
    NOT?: TtiWhereInput | TtiWhereInput[]
    id?: StringFilter<"Tti"> | string
    nom?: StringFilter<"Tti"> | string
    createdAt?: DateTimeFilter<"Tti"> | Date | string
    updatedAt?: DateTimeFilter<"Tti"> | Date | string
    church?: ChurchListRelationFilter
  }

  export type TtiOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    church?: ChurchOrderByRelationAggregateInput
    _relevance?: TtiOrderByRelevanceInput
  }

  export type TtiWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TtiWhereInput | TtiWhereInput[]
    OR?: TtiWhereInput[]
    NOT?: TtiWhereInput | TtiWhereInput[]
    nom?: StringFilter<"Tti"> | string
    createdAt?: DateTimeFilter<"Tti"> | Date | string
    updatedAt?: DateTimeFilter<"Tti"> | Date | string
    church?: ChurchListRelationFilter
  }, "id">

  export type TtiOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TtiCountOrderByAggregateInput
    _max?: TtiMaxOrderByAggregateInput
    _min?: TtiMinOrderByAggregateInput
  }

  export type TtiScalarWhereWithAggregatesInput = {
    AND?: TtiScalarWhereWithAggregatesInput | TtiScalarWhereWithAggregatesInput[]
    OR?: TtiScalarWhereWithAggregatesInput[]
    NOT?: TtiScalarWhereWithAggregatesInput | TtiScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tti"> | string
    nom?: StringWithAggregatesFilter<"Tti"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tti"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tti"> | Date | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    country?: StringNullableFilter<"Address"> | string | null
    departement?: StringNullableFilter<"Address"> | string | null
    commune?: StringNullableFilter<"Address"> | string | null
    sectionCommunale?: StringNullableFilter<"Address"> | string | null
    telephone?: StringNullableFilter<"Address"> | string | null
    rue?: StringNullableFilter<"Address"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    country?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    commune?: SortOrderInput | SortOrder
    sectionCommunale?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    rue?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: AddressOrderByRelevanceInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    country?: StringNullableFilter<"Address"> | string | null
    departement?: StringNullableFilter<"Address"> | string | null
    commune?: StringNullableFilter<"Address"> | string | null
    sectionCommunale?: StringNullableFilter<"Address"> | string | null
    telephone?: StringNullableFilter<"Address"> | string | null
    rue?: StringNullableFilter<"Address"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    country?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    commune?: SortOrderInput | SortOrder
    sectionCommunale?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    rue?: SortOrderInput | SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    country?: StringNullableWithAggregatesFilter<"Address"> | string | null
    departement?: StringNullableWithAggregatesFilter<"Address"> | string | null
    commune?: StringNullableWithAggregatesFilter<"Address"> | string | null
    sectionCommunale?: StringNullableWithAggregatesFilter<"Address"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"Address"> | string | null
    rue?: StringNullableWithAggregatesFilter<"Address"> | string | null
  }

  export type ChurchWhereInput = {
    AND?: ChurchWhereInput | ChurchWhereInput[]
    OR?: ChurchWhereInput[]
    NOT?: ChurchWhereInput | ChurchWhereInput[]
    id?: StringFilter<"Church"> | string
    name?: StringFilter<"Church"> | string
    quantity?: StringFilter<"Church"> | string
    address?: StringNullableFilter<"Church"> | string | null
    phone?: StringNullableFilter<"Church"> | string | null
    anthem?: StringNullableFilter<"Church"> | string | null
    facebook?: StringNullableFilter<"Church"> | string | null
    instagram?: StringNullableFilter<"Church"> | string | null
    createdAt?: DateTimeFilter<"Church"> | Date | string
    updatedAt?: DateTimeFilter<"Church"> | Date | string
    picture?: StringNullableFilter<"Church"> | string | null
    missionId?: StringNullableFilter<"Church"> | string | null
    email?: StringNullableFilter<"Church"> | string | null
    mainPasteur?: StringNullableFilter<"Church"> | string | null
    whatsapp?: StringNullableFilter<"Church"> | string | null
    latitude?: StringNullableFilter<"Church"> | string | null
    longitude?: StringNullableFilter<"Church"> | string | null
    ttiId?: StringNullableFilter<"Church"> | string | null
    addressId?: StringNullableFilter<"Church"> | string | null
    batism?: BaptismListRelationFilter
    fullAddress?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    mission?: XOR<MissionNullableScalarRelationFilter, MissionWhereInput> | null
    tti?: XOR<TtiNullableScalarRelationFilter, TtiWhereInput> | null
    events?: EventListRelationFilter
    funerals?: FuneralListRelationFilter
    groups?: GroupeListRelationFilter
    mariages?: MariageListRelationFilter
    presentations?: PresentationListRelationFilter
    services?: ServiceListRelationFilter
    users?: UserListRelationFilter
    appointments?: AppointmentListRelationFilter
    comitees?: ComiteeListRelationFilter
    death?: DeathListRelationFilter
    donation?: DonationListRelationFilter
    expense?: ExpenseListRelationFilter
    ministry?: MinistryListRelationFilter
    moisson?: MoissonListRelationFilter
    offering?: OfferingListRelationFilter
    pasteur?: PasteurListRelationFilter
    sanction?: SanctionListRelationFilter
    sundayClass?: SundayClassListRelationFilter
    tithing?: TithingListRelationFilter
    transfersFrom?: TransfertListRelationFilter
    transfersTo?: TransfertListRelationFilter
  }

  export type ChurchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    anthem?: SortOrderInput | SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrderInput | SortOrder
    missionId?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    mainPasteur?: SortOrderInput | SortOrder
    whatsapp?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    ttiId?: SortOrderInput | SortOrder
    addressId?: SortOrderInput | SortOrder
    batism?: BaptismOrderByRelationAggregateInput
    fullAddress?: AddressOrderByWithRelationInput
    mission?: MissionOrderByWithRelationInput
    tti?: TtiOrderByWithRelationInput
    events?: EventOrderByRelationAggregateInput
    funerals?: FuneralOrderByRelationAggregateInput
    groups?: GroupeOrderByRelationAggregateInput
    mariages?: MariageOrderByRelationAggregateInput
    presentations?: PresentationOrderByRelationAggregateInput
    services?: ServiceOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    appointments?: appointmentOrderByRelationAggregateInput
    comitees?: comiteeOrderByRelationAggregateInput
    death?: deathOrderByRelationAggregateInput
    donation?: donationOrderByRelationAggregateInput
    expense?: expenseOrderByRelationAggregateInput
    ministry?: ministryOrderByRelationAggregateInput
    moisson?: moissonOrderByRelationAggregateInput
    offering?: offeringOrderByRelationAggregateInput
    pasteur?: pasteurOrderByRelationAggregateInput
    sanction?: sanctionOrderByRelationAggregateInput
    sundayClass?: sundayClassOrderByRelationAggregateInput
    tithing?: tithingOrderByRelationAggregateInput
    transfersFrom?: transfertOrderByRelationAggregateInput
    transfersTo?: transfertOrderByRelationAggregateInput
    _relevance?: ChurchOrderByRelevanceInput
  }

  export type ChurchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    addressId?: string
    AND?: ChurchWhereInput | ChurchWhereInput[]
    OR?: ChurchWhereInput[]
    NOT?: ChurchWhereInput | ChurchWhereInput[]
    quantity?: StringFilter<"Church"> | string
    address?: StringNullableFilter<"Church"> | string | null
    phone?: StringNullableFilter<"Church"> | string | null
    anthem?: StringNullableFilter<"Church"> | string | null
    facebook?: StringNullableFilter<"Church"> | string | null
    instagram?: StringNullableFilter<"Church"> | string | null
    createdAt?: DateTimeFilter<"Church"> | Date | string
    updatedAt?: DateTimeFilter<"Church"> | Date | string
    picture?: StringNullableFilter<"Church"> | string | null
    missionId?: StringNullableFilter<"Church"> | string | null
    email?: StringNullableFilter<"Church"> | string | null
    mainPasteur?: StringNullableFilter<"Church"> | string | null
    whatsapp?: StringNullableFilter<"Church"> | string | null
    latitude?: StringNullableFilter<"Church"> | string | null
    longitude?: StringNullableFilter<"Church"> | string | null
    ttiId?: StringNullableFilter<"Church"> | string | null
    batism?: BaptismListRelationFilter
    fullAddress?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    mission?: XOR<MissionNullableScalarRelationFilter, MissionWhereInput> | null
    tti?: XOR<TtiNullableScalarRelationFilter, TtiWhereInput> | null
    events?: EventListRelationFilter
    funerals?: FuneralListRelationFilter
    groups?: GroupeListRelationFilter
    mariages?: MariageListRelationFilter
    presentations?: PresentationListRelationFilter
    services?: ServiceListRelationFilter
    users?: UserListRelationFilter
    appointments?: AppointmentListRelationFilter
    comitees?: ComiteeListRelationFilter
    death?: DeathListRelationFilter
    donation?: DonationListRelationFilter
    expense?: ExpenseListRelationFilter
    ministry?: MinistryListRelationFilter
    moisson?: MoissonListRelationFilter
    offering?: OfferingListRelationFilter
    pasteur?: PasteurListRelationFilter
    sanction?: SanctionListRelationFilter
    sundayClass?: SundayClassListRelationFilter
    tithing?: TithingListRelationFilter
    transfersFrom?: TransfertListRelationFilter
    transfersTo?: TransfertListRelationFilter
  }, "id" | "name" | "addressId">

  export type ChurchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    anthem?: SortOrderInput | SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrderInput | SortOrder
    missionId?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    mainPasteur?: SortOrderInput | SortOrder
    whatsapp?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    ttiId?: SortOrderInput | SortOrder
    addressId?: SortOrderInput | SortOrder
    _count?: ChurchCountOrderByAggregateInput
    _max?: ChurchMaxOrderByAggregateInput
    _min?: ChurchMinOrderByAggregateInput
  }

  export type ChurchScalarWhereWithAggregatesInput = {
    AND?: ChurchScalarWhereWithAggregatesInput | ChurchScalarWhereWithAggregatesInput[]
    OR?: ChurchScalarWhereWithAggregatesInput[]
    NOT?: ChurchScalarWhereWithAggregatesInput | ChurchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Church"> | string
    name?: StringWithAggregatesFilter<"Church"> | string
    quantity?: StringWithAggregatesFilter<"Church"> | string
    address?: StringNullableWithAggregatesFilter<"Church"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Church"> | string | null
    anthem?: StringNullableWithAggregatesFilter<"Church"> | string | null
    facebook?: StringNullableWithAggregatesFilter<"Church"> | string | null
    instagram?: StringNullableWithAggregatesFilter<"Church"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Church"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Church"> | Date | string
    picture?: StringNullableWithAggregatesFilter<"Church"> | string | null
    missionId?: StringNullableWithAggregatesFilter<"Church"> | string | null
    email?: StringNullableWithAggregatesFilter<"Church"> | string | null
    mainPasteur?: StringNullableWithAggregatesFilter<"Church"> | string | null
    whatsapp?: StringNullableWithAggregatesFilter<"Church"> | string | null
    latitude?: StringNullableWithAggregatesFilter<"Church"> | string | null
    longitude?: StringNullableWithAggregatesFilter<"Church"> | string | null
    ttiId?: StringNullableWithAggregatesFilter<"Church"> | string | null
    addressId?: StringNullableWithAggregatesFilter<"Church"> | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringNullableFilter<"User"> | string | null
    baptismDate?: StringNullableFilter<"User"> | string | null
    baptismLocation?: StringNullableFilter<"User"> | string | null
    birthCity?: StringNullableFilter<"User"> | string | null
    birthCountry?: StringNullableFilter<"User"> | string | null
    birthDate?: StringNullableFilter<"User"> | string | null
    churchId?: StringNullableFilter<"User"> | string | null
    churchRole?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    envelopeNumber?: StringNullableFilter<"User"> | string | null
    etatCivil?: StringNullableFilter<"User"> | string | null
    facebook?: StringNullableFilter<"User"> | string | null
    firstname?: StringFilter<"User"> | string
    instagram?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    picture?: StringNullableFilter<"User"> | string | null
    profession?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    sex?: StringNullableFilter<"User"> | string | null
    sundayClass?: StringNullableFilter<"User"> | string | null
    lastname?: StringFilter<"User"> | string
    membreActif?: BoolFilter<"User"> | boolean
    addressLine?: StringNullableFilter<"User"> | string | null
    homePhone?: StringNullableFilter<"User"> | string | null
    joinDate?: StringNullableFilter<"User"> | string | null
    mobilePhone?: StringNullableFilter<"User"> | string | null
    age?: StringNullableFilter<"User"> | string | null
    minister?: StringNullableFilter<"User"> | string | null
    plainPassword?: StringNullableFilter<"User"> | string | null
    personToContact?: StringNullableFilter<"User"> | string | null
    spouseFullName?: StringNullableFilter<"User"> | string | null
    latitude?: StringNullableFilter<"User"> | string | null
    longitude?: StringNullableFilter<"User"> | string | null
    nif?: StringNullableFilter<"User"> | string | null
    groupeSanguin?: StringNullableFilter<"User"> | string | null
    istimothee?: BoolNullableFilter<"User"> | boolean | null
    timotheeId?: StringNullableFilter<"User"> | string | null
    presences?: PresenceListRelationFilter
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    timothee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tithes?: UserListRelationFilter
    transfers?: TransfertListRelationFilter
    leadingComittees?: ComiteeListRelationFilter
    memberComittees?: ComiteeListRelationFilter
    groups?: GroupeListRelationFilter
    userAppointments?: AppointmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrderInput | SortOrder
    baptismDate?: SortOrderInput | SortOrder
    baptismLocation?: SortOrderInput | SortOrder
    birthCity?: SortOrderInput | SortOrder
    birthCountry?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    churchRole?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    envelopeNumber?: SortOrderInput | SortOrder
    etatCivil?: SortOrderInput | SortOrder
    facebook?: SortOrderInput | SortOrder
    firstname?: SortOrder
    instagram?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    profession?: SortOrderInput | SortOrder
    role?: SortOrder
    sex?: SortOrderInput | SortOrder
    sundayClass?: SortOrderInput | SortOrder
    lastname?: SortOrder
    membreActif?: SortOrder
    addressLine?: SortOrderInput | SortOrder
    homePhone?: SortOrderInput | SortOrder
    joinDate?: SortOrderInput | SortOrder
    mobilePhone?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    minister?: SortOrderInput | SortOrder
    plainPassword?: SortOrderInput | SortOrder
    personToContact?: SortOrderInput | SortOrder
    spouseFullName?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    nif?: SortOrderInput | SortOrder
    groupeSanguin?: SortOrderInput | SortOrder
    istimothee?: SortOrderInput | SortOrder
    timotheeId?: SortOrderInput | SortOrder
    presences?: PresenceOrderByRelationAggregateInput
    church?: ChurchOrderByWithRelationInput
    timothee?: UserOrderByWithRelationInput
    tithes?: UserOrderByRelationAggregateInput
    transfers?: transfertOrderByRelationAggregateInput
    leadingComittees?: comiteeOrderByRelationAggregateInput
    memberComittees?: comiteeOrderByRelationAggregateInput
    groups?: GroupeOrderByRelationAggregateInput
    userAppointments?: appointmentOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    password?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    baptismDate?: StringNullableFilter<"User"> | string | null
    baptismLocation?: StringNullableFilter<"User"> | string | null
    birthCity?: StringNullableFilter<"User"> | string | null
    birthCountry?: StringNullableFilter<"User"> | string | null
    birthDate?: StringNullableFilter<"User"> | string | null
    churchId?: StringNullableFilter<"User"> | string | null
    churchRole?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    envelopeNumber?: StringNullableFilter<"User"> | string | null
    etatCivil?: StringNullableFilter<"User"> | string | null
    facebook?: StringNullableFilter<"User"> | string | null
    firstname?: StringFilter<"User"> | string
    instagram?: StringNullableFilter<"User"> | string | null
    picture?: StringNullableFilter<"User"> | string | null
    profession?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    sex?: StringNullableFilter<"User"> | string | null
    sundayClass?: StringNullableFilter<"User"> | string | null
    lastname?: StringFilter<"User"> | string
    membreActif?: BoolFilter<"User"> | boolean
    addressLine?: StringNullableFilter<"User"> | string | null
    homePhone?: StringNullableFilter<"User"> | string | null
    joinDate?: StringNullableFilter<"User"> | string | null
    mobilePhone?: StringNullableFilter<"User"> | string | null
    age?: StringNullableFilter<"User"> | string | null
    minister?: StringNullableFilter<"User"> | string | null
    plainPassword?: StringNullableFilter<"User"> | string | null
    personToContact?: StringNullableFilter<"User"> | string | null
    spouseFullName?: StringNullableFilter<"User"> | string | null
    latitude?: StringNullableFilter<"User"> | string | null
    longitude?: StringNullableFilter<"User"> | string | null
    nif?: StringNullableFilter<"User"> | string | null
    groupeSanguin?: StringNullableFilter<"User"> | string | null
    istimothee?: BoolNullableFilter<"User"> | boolean | null
    timotheeId?: StringNullableFilter<"User"> | string | null
    presences?: PresenceListRelationFilter
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    timothee?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tithes?: UserListRelationFilter
    transfers?: TransfertListRelationFilter
    leadingComittees?: ComiteeListRelationFilter
    memberComittees?: ComiteeListRelationFilter
    groups?: GroupeListRelationFilter
    userAppointments?: AppointmentListRelationFilter
  }, "id" | "email" | "password">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrderInput | SortOrder
    baptismDate?: SortOrderInput | SortOrder
    baptismLocation?: SortOrderInput | SortOrder
    birthCity?: SortOrderInput | SortOrder
    birthCountry?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    churchRole?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    envelopeNumber?: SortOrderInput | SortOrder
    etatCivil?: SortOrderInput | SortOrder
    facebook?: SortOrderInput | SortOrder
    firstname?: SortOrder
    instagram?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    profession?: SortOrderInput | SortOrder
    role?: SortOrder
    sex?: SortOrderInput | SortOrder
    sundayClass?: SortOrderInput | SortOrder
    lastname?: SortOrder
    membreActif?: SortOrder
    addressLine?: SortOrderInput | SortOrder
    homePhone?: SortOrderInput | SortOrder
    joinDate?: SortOrderInput | SortOrder
    mobilePhone?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    minister?: SortOrderInput | SortOrder
    plainPassword?: SortOrderInput | SortOrder
    personToContact?: SortOrderInput | SortOrder
    spouseFullName?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    nif?: SortOrderInput | SortOrder
    groupeSanguin?: SortOrderInput | SortOrder
    istimothee?: SortOrderInput | SortOrder
    timotheeId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    baptismDate?: StringNullableWithAggregatesFilter<"User"> | string | null
    baptismLocation?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthCity?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthCountry?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthDate?: StringNullableWithAggregatesFilter<"User"> | string | null
    churchId?: StringNullableWithAggregatesFilter<"User"> | string | null
    churchRole?: StringNullableWithAggregatesFilter<"User"> | string | null
    city?: StringNullableWithAggregatesFilter<"User"> | string | null
    country?: StringNullableWithAggregatesFilter<"User"> | string | null
    envelopeNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    etatCivil?: StringNullableWithAggregatesFilter<"User"> | string | null
    facebook?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstname?: StringWithAggregatesFilter<"User"> | string
    instagram?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    picture?: StringNullableWithAggregatesFilter<"User"> | string | null
    profession?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    sex?: StringNullableWithAggregatesFilter<"User"> | string | null
    sundayClass?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastname?: StringWithAggregatesFilter<"User"> | string
    membreActif?: BoolWithAggregatesFilter<"User"> | boolean
    addressLine?: StringNullableWithAggregatesFilter<"User"> | string | null
    homePhone?: StringNullableWithAggregatesFilter<"User"> | string | null
    joinDate?: StringNullableWithAggregatesFilter<"User"> | string | null
    mobilePhone?: StringNullableWithAggregatesFilter<"User"> | string | null
    age?: StringNullableWithAggregatesFilter<"User"> | string | null
    minister?: StringNullableWithAggregatesFilter<"User"> | string | null
    plainPassword?: StringNullableWithAggregatesFilter<"User"> | string | null
    personToContact?: StringNullableWithAggregatesFilter<"User"> | string | null
    spouseFullName?: StringNullableWithAggregatesFilter<"User"> | string | null
    latitude?: StringNullableWithAggregatesFilter<"User"> | string | null
    longitude?: StringNullableWithAggregatesFilter<"User"> | string | null
    nif?: StringNullableWithAggregatesFilter<"User"> | string | null
    groupeSanguin?: StringNullableWithAggregatesFilter<"User"> | string | null
    istimothee?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    timotheeId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type GroupeWhereInput = {
    AND?: GroupeWhereInput | GroupeWhereInput[]
    OR?: GroupeWhereInput[]
    NOT?: GroupeWhereInput | GroupeWhereInput[]
    id?: StringFilter<"Groupe"> | string
    name?: StringFilter<"Groupe"> | string
    description?: StringNullableFilter<"Groupe"> | string | null
    picture?: StringNullableFilter<"Groupe"> | string | null
    showToMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showToNonMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showLeaders?: BoolNullableFilter<"Groupe"> | boolean | null
    meetingDays?: StringNullableFilter<"Groupe"> | string | null
    meetingTime?: StringNullableFilter<"Groupe"> | string | null
    meetingLocation?: StringNullableFilter<"Groupe"> | string | null
    meetingFrequency?: StringNullableFilter<"Groupe"> | string | null
    maxMembers?: StringNullableFilter<"Groupe"> | string | null
    churchId?: StringNullableFilter<"Groupe"> | string | null
    createdAt?: DateTimeFilter<"Groupe"> | Date | string
    updatedAt?: DateTimeFilter<"Groupe"> | Date | string
    ageGroup?: StringNullableFilter<"Groupe"> | string | null
    minister?: StringNullableFilter<"Groupe"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    users?: UserListRelationFilter
  }

  export type GroupeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    showToMembers?: SortOrderInput | SortOrder
    showToNonMembers?: SortOrderInput | SortOrder
    showMembers?: SortOrderInput | SortOrder
    showLeaders?: SortOrderInput | SortOrder
    meetingDays?: SortOrderInput | SortOrder
    meetingTime?: SortOrderInput | SortOrder
    meetingLocation?: SortOrderInput | SortOrder
    meetingFrequency?: SortOrderInput | SortOrder
    maxMembers?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ageGroup?: SortOrderInput | SortOrder
    minister?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    _relevance?: GroupeOrderByRelevanceInput
  }

  export type GroupeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GroupeWhereInput | GroupeWhereInput[]
    OR?: GroupeWhereInput[]
    NOT?: GroupeWhereInput | GroupeWhereInput[]
    name?: StringFilter<"Groupe"> | string
    description?: StringNullableFilter<"Groupe"> | string | null
    picture?: StringNullableFilter<"Groupe"> | string | null
    showToMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showToNonMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showLeaders?: BoolNullableFilter<"Groupe"> | boolean | null
    meetingDays?: StringNullableFilter<"Groupe"> | string | null
    meetingTime?: StringNullableFilter<"Groupe"> | string | null
    meetingLocation?: StringNullableFilter<"Groupe"> | string | null
    meetingFrequency?: StringNullableFilter<"Groupe"> | string | null
    maxMembers?: StringNullableFilter<"Groupe"> | string | null
    churchId?: StringNullableFilter<"Groupe"> | string | null
    createdAt?: DateTimeFilter<"Groupe"> | Date | string
    updatedAt?: DateTimeFilter<"Groupe"> | Date | string
    ageGroup?: StringNullableFilter<"Groupe"> | string | null
    minister?: StringNullableFilter<"Groupe"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    users?: UserListRelationFilter
  }, "id">

  export type GroupeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    showToMembers?: SortOrderInput | SortOrder
    showToNonMembers?: SortOrderInput | SortOrder
    showMembers?: SortOrderInput | SortOrder
    showLeaders?: SortOrderInput | SortOrder
    meetingDays?: SortOrderInput | SortOrder
    meetingTime?: SortOrderInput | SortOrder
    meetingLocation?: SortOrderInput | SortOrder
    meetingFrequency?: SortOrderInput | SortOrder
    maxMembers?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ageGroup?: SortOrderInput | SortOrder
    minister?: SortOrderInput | SortOrder
    _count?: GroupeCountOrderByAggregateInput
    _max?: GroupeMaxOrderByAggregateInput
    _min?: GroupeMinOrderByAggregateInput
  }

  export type GroupeScalarWhereWithAggregatesInput = {
    AND?: GroupeScalarWhereWithAggregatesInput | GroupeScalarWhereWithAggregatesInput[]
    OR?: GroupeScalarWhereWithAggregatesInput[]
    NOT?: GroupeScalarWhereWithAggregatesInput | GroupeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Groupe"> | string
    name?: StringWithAggregatesFilter<"Groupe"> | string
    description?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    picture?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    showToMembers?: BoolNullableWithAggregatesFilter<"Groupe"> | boolean | null
    showToNonMembers?: BoolNullableWithAggregatesFilter<"Groupe"> | boolean | null
    showMembers?: BoolNullableWithAggregatesFilter<"Groupe"> | boolean | null
    showLeaders?: BoolNullableWithAggregatesFilter<"Groupe"> | boolean | null
    meetingDays?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    meetingTime?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    meetingLocation?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    meetingFrequency?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    maxMembers?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    churchId?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Groupe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Groupe"> | Date | string
    ageGroup?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
    minister?: StringNullableWithAggregatesFilter<"Groupe"> | string | null
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    location?: StringNullableFilter<"Event"> | string | null
    frequency?: StringFilter<"Event"> | string
    startDate?: StringFilter<"Event"> | string
    endDate?: StringFilter<"Event"> | string
    churchId?: StringNullableFilter<"Event"> | string | null
    createAt?: DateTimeFilter<"Event"> | Date | string
    updateAt?: DateTimeFilter<"Event"> | Date | string
    isRecurring?: BoolFilter<"Event"> | boolean
    endPeriode?: StringNullableFilter<"Event"> | string | null
    startPeriode?: StringNullableFilter<"Event"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isRecurring?: SortOrder
    endPeriode?: SortOrderInput | SortOrder
    startPeriode?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: EventOrderByRelevanceInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    location?: StringNullableFilter<"Event"> | string | null
    frequency?: StringFilter<"Event"> | string
    startDate?: StringFilter<"Event"> | string
    endDate?: StringFilter<"Event"> | string
    churchId?: StringNullableFilter<"Event"> | string | null
    createAt?: DateTimeFilter<"Event"> | Date | string
    updateAt?: DateTimeFilter<"Event"> | Date | string
    isRecurring?: BoolFilter<"Event"> | boolean
    endPeriode?: StringNullableFilter<"Event"> | string | null
    startPeriode?: StringNullableFilter<"Event"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isRecurring?: SortOrder
    endPeriode?: SortOrderInput | SortOrder
    startPeriode?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    location?: StringNullableWithAggregatesFilter<"Event"> | string | null
    frequency?: StringWithAggregatesFilter<"Event"> | string
    startDate?: StringWithAggregatesFilter<"Event"> | string
    endDate?: StringWithAggregatesFilter<"Event"> | string
    churchId?: StringNullableWithAggregatesFilter<"Event"> | string | null
    createAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    isRecurring?: BoolWithAggregatesFilter<"Event"> | boolean
    endPeriode?: StringNullableWithAggregatesFilter<"Event"> | string | null
    startPeriode?: StringNullableWithAggregatesFilter<"Event"> | string | null
  }

  export type MariageWhereInput = {
    AND?: MariageWhereInput | MariageWhereInput[]
    OR?: MariageWhereInput[]
    NOT?: MariageWhereInput | MariageWhereInput[]
    id?: StringFilter<"Mariage"> | string
    brideFullname?: StringFilter<"Mariage"> | string
    birthDate?: DateTimeFilter<"Mariage"> | Date | string
    groomFullname?: StringFilter<"Mariage"> | string
    goomBirthDate?: DateTimeFilter<"Mariage"> | Date | string
    weddingDate?: DateTimeFilter<"Mariage"> | Date | string
    weddingLocation?: StringFilter<"Mariage"> | string
    weddingCertificate?: StringNullableFilter<"Mariage"> | string | null
    officiantName?: StringFilter<"Mariage"> | string
    churchId?: StringNullableFilter<"Mariage"> | string | null
    brideCertificate?: StringNullableFilter<"Mariage"> | string | null
    civilStateOfficer?: StringNullableFilter<"Mariage"> | string | null
    grooomCertificate?: StringNullableFilter<"Mariage"> | string | null
    witness?: StringNullableFilter<"Mariage"> | string | null
    civilStateStateOfficer?: StringNullableFilter<"Mariage"> | string | null
    witnessSignature?: StringNullableFilter<"Mariage"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type MariageOrderByWithRelationInput = {
    id?: SortOrder
    brideFullname?: SortOrder
    birthDate?: SortOrder
    groomFullname?: SortOrder
    goomBirthDate?: SortOrder
    weddingDate?: SortOrder
    weddingLocation?: SortOrder
    weddingCertificate?: SortOrderInput | SortOrder
    officiantName?: SortOrder
    churchId?: SortOrderInput | SortOrder
    brideCertificate?: SortOrderInput | SortOrder
    civilStateOfficer?: SortOrderInput | SortOrder
    grooomCertificate?: SortOrderInput | SortOrder
    witness?: SortOrderInput | SortOrder
    civilStateStateOfficer?: SortOrderInput | SortOrder
    witnessSignature?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: MariageOrderByRelevanceInput
  }

  export type MariageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MariageWhereInput | MariageWhereInput[]
    OR?: MariageWhereInput[]
    NOT?: MariageWhereInput | MariageWhereInput[]
    brideFullname?: StringFilter<"Mariage"> | string
    birthDate?: DateTimeFilter<"Mariage"> | Date | string
    groomFullname?: StringFilter<"Mariage"> | string
    goomBirthDate?: DateTimeFilter<"Mariage"> | Date | string
    weddingDate?: DateTimeFilter<"Mariage"> | Date | string
    weddingLocation?: StringFilter<"Mariage"> | string
    weddingCertificate?: StringNullableFilter<"Mariage"> | string | null
    officiantName?: StringFilter<"Mariage"> | string
    churchId?: StringNullableFilter<"Mariage"> | string | null
    brideCertificate?: StringNullableFilter<"Mariage"> | string | null
    civilStateOfficer?: StringNullableFilter<"Mariage"> | string | null
    grooomCertificate?: StringNullableFilter<"Mariage"> | string | null
    witness?: StringNullableFilter<"Mariage"> | string | null
    civilStateStateOfficer?: StringNullableFilter<"Mariage"> | string | null
    witnessSignature?: StringNullableFilter<"Mariage"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type MariageOrderByWithAggregationInput = {
    id?: SortOrder
    brideFullname?: SortOrder
    birthDate?: SortOrder
    groomFullname?: SortOrder
    goomBirthDate?: SortOrder
    weddingDate?: SortOrder
    weddingLocation?: SortOrder
    weddingCertificate?: SortOrderInput | SortOrder
    officiantName?: SortOrder
    churchId?: SortOrderInput | SortOrder
    brideCertificate?: SortOrderInput | SortOrder
    civilStateOfficer?: SortOrderInput | SortOrder
    grooomCertificate?: SortOrderInput | SortOrder
    witness?: SortOrderInput | SortOrder
    civilStateStateOfficer?: SortOrderInput | SortOrder
    witnessSignature?: SortOrderInput | SortOrder
    _count?: MariageCountOrderByAggregateInput
    _max?: MariageMaxOrderByAggregateInput
    _min?: MariageMinOrderByAggregateInput
  }

  export type MariageScalarWhereWithAggregatesInput = {
    AND?: MariageScalarWhereWithAggregatesInput | MariageScalarWhereWithAggregatesInput[]
    OR?: MariageScalarWhereWithAggregatesInput[]
    NOT?: MariageScalarWhereWithAggregatesInput | MariageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Mariage"> | string
    brideFullname?: StringWithAggregatesFilter<"Mariage"> | string
    birthDate?: DateTimeWithAggregatesFilter<"Mariage"> | Date | string
    groomFullname?: StringWithAggregatesFilter<"Mariage"> | string
    goomBirthDate?: DateTimeWithAggregatesFilter<"Mariage"> | Date | string
    weddingDate?: DateTimeWithAggregatesFilter<"Mariage"> | Date | string
    weddingLocation?: StringWithAggregatesFilter<"Mariage"> | string
    weddingCertificate?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
    officiantName?: StringWithAggregatesFilter<"Mariage"> | string
    churchId?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
    brideCertificate?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
    civilStateOfficer?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
    grooomCertificate?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
    witness?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
    civilStateStateOfficer?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
    witnessSignature?: StringNullableWithAggregatesFilter<"Mariage"> | string | null
  }

  export type FuneralWhereInput = {
    AND?: FuneralWhereInput | FuneralWhereInput[]
    OR?: FuneralWhereInput[]
    NOT?: FuneralWhereInput | FuneralWhereInput[]
    id?: StringFilter<"Funeral"> | string
    fullname?: StringFilter<"Funeral"> | string
    birthDate?: DateTimeFilter<"Funeral"> | Date | string
    funeralDate?: DateTimeFilter<"Funeral"> | Date | string
    funeralTime?: StringFilter<"Funeral"> | string
    relationShip?: StringFilter<"Funeral"> | string
    email?: StringFilter<"Funeral"> | string
    deathCertificate?: StringNullableFilter<"Funeral"> | string | null
    nextOfKin?: StringFilter<"Funeral"> | string
    officiantName?: StringFilter<"Funeral"> | string
    description?: StringFilter<"Funeral"> | string
    funeralLocation?: StringFilter<"Funeral"> | string
    churchId?: StringNullableFilter<"Funeral"> | string | null
    createdAt?: DateTimeFilter<"Funeral"> | Date | string
    status?: StringFilter<"Funeral"> | string
    updatedAt?: DateTimeFilter<"Funeral"> | Date | string
    telephone?: StringNullableFilter<"Funeral"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type FuneralOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    birthDate?: SortOrder
    funeralDate?: SortOrder
    funeralTime?: SortOrder
    relationShip?: SortOrder
    email?: SortOrder
    deathCertificate?: SortOrderInput | SortOrder
    nextOfKin?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    funeralLocation?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
    telephone?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: FuneralOrderByRelevanceInput
  }

  export type FuneralWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FuneralWhereInput | FuneralWhereInput[]
    OR?: FuneralWhereInput[]
    NOT?: FuneralWhereInput | FuneralWhereInput[]
    fullname?: StringFilter<"Funeral"> | string
    birthDate?: DateTimeFilter<"Funeral"> | Date | string
    funeralDate?: DateTimeFilter<"Funeral"> | Date | string
    funeralTime?: StringFilter<"Funeral"> | string
    relationShip?: StringFilter<"Funeral"> | string
    email?: StringFilter<"Funeral"> | string
    deathCertificate?: StringNullableFilter<"Funeral"> | string | null
    nextOfKin?: StringFilter<"Funeral"> | string
    officiantName?: StringFilter<"Funeral"> | string
    description?: StringFilter<"Funeral"> | string
    funeralLocation?: StringFilter<"Funeral"> | string
    churchId?: StringNullableFilter<"Funeral"> | string | null
    createdAt?: DateTimeFilter<"Funeral"> | Date | string
    status?: StringFilter<"Funeral"> | string
    updatedAt?: DateTimeFilter<"Funeral"> | Date | string
    telephone?: StringNullableFilter<"Funeral"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type FuneralOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    birthDate?: SortOrder
    funeralDate?: SortOrder
    funeralTime?: SortOrder
    relationShip?: SortOrder
    email?: SortOrder
    deathCertificate?: SortOrderInput | SortOrder
    nextOfKin?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    funeralLocation?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
    telephone?: SortOrderInput | SortOrder
    _count?: FuneralCountOrderByAggregateInput
    _max?: FuneralMaxOrderByAggregateInput
    _min?: FuneralMinOrderByAggregateInput
  }

  export type FuneralScalarWhereWithAggregatesInput = {
    AND?: FuneralScalarWhereWithAggregatesInput | FuneralScalarWhereWithAggregatesInput[]
    OR?: FuneralScalarWhereWithAggregatesInput[]
    NOT?: FuneralScalarWhereWithAggregatesInput | FuneralScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Funeral"> | string
    fullname?: StringWithAggregatesFilter<"Funeral"> | string
    birthDate?: DateTimeWithAggregatesFilter<"Funeral"> | Date | string
    funeralDate?: DateTimeWithAggregatesFilter<"Funeral"> | Date | string
    funeralTime?: StringWithAggregatesFilter<"Funeral"> | string
    relationShip?: StringWithAggregatesFilter<"Funeral"> | string
    email?: StringWithAggregatesFilter<"Funeral"> | string
    deathCertificate?: StringNullableWithAggregatesFilter<"Funeral"> | string | null
    nextOfKin?: StringWithAggregatesFilter<"Funeral"> | string
    officiantName?: StringWithAggregatesFilter<"Funeral"> | string
    description?: StringWithAggregatesFilter<"Funeral"> | string
    funeralLocation?: StringWithAggregatesFilter<"Funeral"> | string
    churchId?: StringNullableWithAggregatesFilter<"Funeral"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Funeral"> | Date | string
    status?: StringWithAggregatesFilter<"Funeral"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Funeral"> | Date | string
    telephone?: StringNullableWithAggregatesFilter<"Funeral"> | string | null
  }

  export type PresentationWhereInput = {
    AND?: PresentationWhereInput | PresentationWhereInput[]
    OR?: PresentationWhereInput[]
    NOT?: PresentationWhereInput | PresentationWhereInput[]
    id?: StringFilter<"Presentation"> | string
    placeOfBirth?: StringFilter<"Presentation"> | string
    birthCertificate?: StringNullableFilter<"Presentation"> | string | null
    fatherName?: StringFilter<"Presentation"> | string
    motherName?: StringFilter<"Presentation"> | string
    phone?: StringFilter<"Presentation"> | string
    address?: StringFilter<"Presentation"> | string
    presentationDate?: DateTimeFilter<"Presentation"> | Date | string
    officiantName?: StringFilter<"Presentation"> | string
    description?: StringNullableFilter<"Presentation"> | string | null
    churchId?: StringNullableFilter<"Presentation"> | string | null
    childName?: StringFilter<"Presentation"> | string
    dateOfBirth?: DateTimeFilter<"Presentation"> | Date | string
    witness?: StringFilter<"Presentation"> | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type PresentationOrderByWithRelationInput = {
    id?: SortOrder
    placeOfBirth?: SortOrder
    birthCertificate?: SortOrderInput | SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    presentationDate?: SortOrder
    officiantName?: SortOrder
    description?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    childName?: SortOrder
    dateOfBirth?: SortOrder
    witness?: SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: PresentationOrderByRelevanceInput
  }

  export type PresentationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PresentationWhereInput | PresentationWhereInput[]
    OR?: PresentationWhereInput[]
    NOT?: PresentationWhereInput | PresentationWhereInput[]
    placeOfBirth?: StringFilter<"Presentation"> | string
    birthCertificate?: StringNullableFilter<"Presentation"> | string | null
    fatherName?: StringFilter<"Presentation"> | string
    motherName?: StringFilter<"Presentation"> | string
    phone?: StringFilter<"Presentation"> | string
    address?: StringFilter<"Presentation"> | string
    presentationDate?: DateTimeFilter<"Presentation"> | Date | string
    officiantName?: StringFilter<"Presentation"> | string
    description?: StringNullableFilter<"Presentation"> | string | null
    churchId?: StringNullableFilter<"Presentation"> | string | null
    childName?: StringFilter<"Presentation"> | string
    dateOfBirth?: DateTimeFilter<"Presentation"> | Date | string
    witness?: StringFilter<"Presentation"> | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type PresentationOrderByWithAggregationInput = {
    id?: SortOrder
    placeOfBirth?: SortOrder
    birthCertificate?: SortOrderInput | SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    presentationDate?: SortOrder
    officiantName?: SortOrder
    description?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    childName?: SortOrder
    dateOfBirth?: SortOrder
    witness?: SortOrder
    _count?: PresentationCountOrderByAggregateInput
    _max?: PresentationMaxOrderByAggregateInput
    _min?: PresentationMinOrderByAggregateInput
  }

  export type PresentationScalarWhereWithAggregatesInput = {
    AND?: PresentationScalarWhereWithAggregatesInput | PresentationScalarWhereWithAggregatesInput[]
    OR?: PresentationScalarWhereWithAggregatesInput[]
    NOT?: PresentationScalarWhereWithAggregatesInput | PresentationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Presentation"> | string
    placeOfBirth?: StringWithAggregatesFilter<"Presentation"> | string
    birthCertificate?: StringNullableWithAggregatesFilter<"Presentation"> | string | null
    fatherName?: StringWithAggregatesFilter<"Presentation"> | string
    motherName?: StringWithAggregatesFilter<"Presentation"> | string
    phone?: StringWithAggregatesFilter<"Presentation"> | string
    address?: StringWithAggregatesFilter<"Presentation"> | string
    presentationDate?: DateTimeWithAggregatesFilter<"Presentation"> | Date | string
    officiantName?: StringWithAggregatesFilter<"Presentation"> | string
    description?: StringNullableWithAggregatesFilter<"Presentation"> | string | null
    churchId?: StringNullableWithAggregatesFilter<"Presentation"> | string | null
    childName?: StringWithAggregatesFilter<"Presentation"> | string
    dateOfBirth?: DateTimeWithAggregatesFilter<"Presentation"> | Date | string
    witness?: StringWithAggregatesFilter<"Presentation"> | string
  }

  export type BaptismWhereInput = {
    AND?: BaptismWhereInput | BaptismWhereInput[]
    OR?: BaptismWhereInput[]
    NOT?: BaptismWhereInput | BaptismWhereInput[]
    id?: StringFilter<"Baptism"> | string
    fullName?: StringFilter<"Baptism"> | string
    birthDate?: DateTimeFilter<"Baptism"> | Date | string
    placeOfBirth?: StringFilter<"Baptism"> | string
    baptismDate?: DateTimeFilter<"Baptism"> | Date | string
    baptismCertificate?: StringNullableFilter<"Baptism"> | string | null
    officiantName?: StringFilter<"Baptism"> | string
    withness?: StringFilter<"Baptism"> | string
    previousChurch?: StringFilter<"Baptism"> | string
    testimony?: StringFilter<"Baptism"> | string
    churchId?: StringNullableFilter<"Baptism"> | string | null
    conversionDate?: DateTimeFilter<"Baptism"> | Date | string
    status?: StringNullableFilter<"Baptism"> | string | null
    baptismLocation?: StringFilter<"Baptism"> | string
    endDate?: StringNullableFilter<"Baptism"> | string | null
    startDate?: StringNullableFilter<"Baptism"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type BaptismOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    birthDate?: SortOrder
    placeOfBirth?: SortOrder
    baptismDate?: SortOrder
    baptismCertificate?: SortOrderInput | SortOrder
    officiantName?: SortOrder
    withness?: SortOrder
    previousChurch?: SortOrder
    testimony?: SortOrder
    churchId?: SortOrderInput | SortOrder
    conversionDate?: SortOrder
    status?: SortOrderInput | SortOrder
    baptismLocation?: SortOrder
    endDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: BaptismOrderByRelevanceInput
  }

  export type BaptismWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BaptismWhereInput | BaptismWhereInput[]
    OR?: BaptismWhereInput[]
    NOT?: BaptismWhereInput | BaptismWhereInput[]
    fullName?: StringFilter<"Baptism"> | string
    birthDate?: DateTimeFilter<"Baptism"> | Date | string
    placeOfBirth?: StringFilter<"Baptism"> | string
    baptismDate?: DateTimeFilter<"Baptism"> | Date | string
    baptismCertificate?: StringNullableFilter<"Baptism"> | string | null
    officiantName?: StringFilter<"Baptism"> | string
    withness?: StringFilter<"Baptism"> | string
    previousChurch?: StringFilter<"Baptism"> | string
    testimony?: StringFilter<"Baptism"> | string
    churchId?: StringNullableFilter<"Baptism"> | string | null
    conversionDate?: DateTimeFilter<"Baptism"> | Date | string
    status?: StringNullableFilter<"Baptism"> | string | null
    baptismLocation?: StringFilter<"Baptism"> | string
    endDate?: StringNullableFilter<"Baptism"> | string | null
    startDate?: StringNullableFilter<"Baptism"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type BaptismOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    birthDate?: SortOrder
    placeOfBirth?: SortOrder
    baptismDate?: SortOrder
    baptismCertificate?: SortOrderInput | SortOrder
    officiantName?: SortOrder
    withness?: SortOrder
    previousChurch?: SortOrder
    testimony?: SortOrder
    churchId?: SortOrderInput | SortOrder
    conversionDate?: SortOrder
    status?: SortOrderInput | SortOrder
    baptismLocation?: SortOrder
    endDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    _count?: BaptismCountOrderByAggregateInput
    _max?: BaptismMaxOrderByAggregateInput
    _min?: BaptismMinOrderByAggregateInput
  }

  export type BaptismScalarWhereWithAggregatesInput = {
    AND?: BaptismScalarWhereWithAggregatesInput | BaptismScalarWhereWithAggregatesInput[]
    OR?: BaptismScalarWhereWithAggregatesInput[]
    NOT?: BaptismScalarWhereWithAggregatesInput | BaptismScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Baptism"> | string
    fullName?: StringWithAggregatesFilter<"Baptism"> | string
    birthDate?: DateTimeWithAggregatesFilter<"Baptism"> | Date | string
    placeOfBirth?: StringWithAggregatesFilter<"Baptism"> | string
    baptismDate?: DateTimeWithAggregatesFilter<"Baptism"> | Date | string
    baptismCertificate?: StringNullableWithAggregatesFilter<"Baptism"> | string | null
    officiantName?: StringWithAggregatesFilter<"Baptism"> | string
    withness?: StringWithAggregatesFilter<"Baptism"> | string
    previousChurch?: StringWithAggregatesFilter<"Baptism"> | string
    testimony?: StringWithAggregatesFilter<"Baptism"> | string
    churchId?: StringNullableWithAggregatesFilter<"Baptism"> | string | null
    conversionDate?: DateTimeWithAggregatesFilter<"Baptism"> | Date | string
    status?: StringNullableWithAggregatesFilter<"Baptism"> | string | null
    baptismLocation?: StringWithAggregatesFilter<"Baptism"> | string
    endDate?: StringNullableWithAggregatesFilter<"Baptism"> | string | null
    startDate?: StringNullableWithAggregatesFilter<"Baptism"> | string | null
  }

  export type deathWhereInput = {
    AND?: deathWhereInput | deathWhereInput[]
    OR?: deathWhereInput[]
    NOT?: deathWhereInput | deathWhereInput[]
    id?: StringFilter<"death"> | string
    deathDate?: DateTimeFilter<"death"> | Date | string
    deathPlace?: StringFilter<"death"> | string
    deathCause?: StringFilter<"death"> | string
    deathCertificate?: StringNullableFilter<"death"> | string | null
    churchId?: StringNullableFilter<"death"> | string | null
    deathTime?: StringFilter<"death"> | string
    description?: StringNullableFilter<"death"> | string | null
    location?: StringFilter<"death"> | string
    officiantName?: StringFilter<"death"> | string
    relationShip?: StringFilter<"death"> | string
    serviceDate?: DateTimeFilter<"death"> | Date | string
    nextOfKin?: StringFilter<"death"> | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type deathOrderByWithRelationInput = {
    id?: SortOrder
    deathDate?: SortOrder
    deathPlace?: SortOrder
    deathCause?: SortOrder
    deathCertificate?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    deathTime?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrder
    officiantName?: SortOrder
    relationShip?: SortOrder
    serviceDate?: SortOrder
    nextOfKin?: SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: deathOrderByRelevanceInput
  }

  export type deathWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: deathWhereInput | deathWhereInput[]
    OR?: deathWhereInput[]
    NOT?: deathWhereInput | deathWhereInput[]
    deathDate?: DateTimeFilter<"death"> | Date | string
    deathPlace?: StringFilter<"death"> | string
    deathCause?: StringFilter<"death"> | string
    deathCertificate?: StringNullableFilter<"death"> | string | null
    churchId?: StringNullableFilter<"death"> | string | null
    deathTime?: StringFilter<"death"> | string
    description?: StringNullableFilter<"death"> | string | null
    location?: StringFilter<"death"> | string
    officiantName?: StringFilter<"death"> | string
    relationShip?: StringFilter<"death"> | string
    serviceDate?: DateTimeFilter<"death"> | Date | string
    nextOfKin?: StringFilter<"death"> | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type deathOrderByWithAggregationInput = {
    id?: SortOrder
    deathDate?: SortOrder
    deathPlace?: SortOrder
    deathCause?: SortOrder
    deathCertificate?: SortOrderInput | SortOrder
    churchId?: SortOrderInput | SortOrder
    deathTime?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrder
    officiantName?: SortOrder
    relationShip?: SortOrder
    serviceDate?: SortOrder
    nextOfKin?: SortOrder
    _count?: deathCountOrderByAggregateInput
    _max?: deathMaxOrderByAggregateInput
    _min?: deathMinOrderByAggregateInput
  }

  export type deathScalarWhereWithAggregatesInput = {
    AND?: deathScalarWhereWithAggregatesInput | deathScalarWhereWithAggregatesInput[]
    OR?: deathScalarWhereWithAggregatesInput[]
    NOT?: deathScalarWhereWithAggregatesInput | deathScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"death"> | string
    deathDate?: DateTimeWithAggregatesFilter<"death"> | Date | string
    deathPlace?: StringWithAggregatesFilter<"death"> | string
    deathCause?: StringWithAggregatesFilter<"death"> | string
    deathCertificate?: StringNullableWithAggregatesFilter<"death"> | string | null
    churchId?: StringNullableWithAggregatesFilter<"death"> | string | null
    deathTime?: StringWithAggregatesFilter<"death"> | string
    description?: StringNullableWithAggregatesFilter<"death"> | string | null
    location?: StringWithAggregatesFilter<"death"> | string
    officiantName?: StringWithAggregatesFilter<"death"> | string
    relationShip?: StringWithAggregatesFilter<"death"> | string
    serviceDate?: DateTimeWithAggregatesFilter<"death"> | Date | string
    nextOfKin?: StringWithAggregatesFilter<"death"> | string
  }

  export type sundayClassWhereInput = {
    AND?: sundayClassWhereInput | sundayClassWhereInput[]
    OR?: sundayClassWhereInput[]
    NOT?: sundayClassWhereInput | sundayClassWhereInput[]
    id?: StringFilter<"sundayClass"> | string
    nom?: StringFilter<"sundayClass"> | string
    teacher?: StringFilter<"sundayClass"> | string
    startTime?: StringFilter<"sundayClass"> | string
    endTime?: StringFilter<"sundayClass"> | string
    description?: StringFilter<"sundayClass"> | string
    churchId?: StringNullableFilter<"sundayClass"> | string | null
    createdAt?: DateTimeFilter<"sundayClass"> | Date | string
    maxStudents?: StringFilter<"sundayClass"> | string
    ageGroup?: StringFilter<"sundayClass"> | string
    book?: StringNullableFilter<"sundayClass"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type sundayClassOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    teacher?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    description?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    maxStudents?: SortOrder
    ageGroup?: SortOrder
    book?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: sundayClassOrderByRelevanceInput
  }

  export type sundayClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: sundayClassWhereInput | sundayClassWhereInput[]
    OR?: sundayClassWhereInput[]
    NOT?: sundayClassWhereInput | sundayClassWhereInput[]
    nom?: StringFilter<"sundayClass"> | string
    teacher?: StringFilter<"sundayClass"> | string
    startTime?: StringFilter<"sundayClass"> | string
    endTime?: StringFilter<"sundayClass"> | string
    description?: StringFilter<"sundayClass"> | string
    churchId?: StringNullableFilter<"sundayClass"> | string | null
    createdAt?: DateTimeFilter<"sundayClass"> | Date | string
    maxStudents?: StringFilter<"sundayClass"> | string
    ageGroup?: StringFilter<"sundayClass"> | string
    book?: StringNullableFilter<"sundayClass"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type sundayClassOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    teacher?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    description?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    maxStudents?: SortOrder
    ageGroup?: SortOrder
    book?: SortOrderInput | SortOrder
    _count?: sundayClassCountOrderByAggregateInput
    _max?: sundayClassMaxOrderByAggregateInput
    _min?: sundayClassMinOrderByAggregateInput
  }

  export type sundayClassScalarWhereWithAggregatesInput = {
    AND?: sundayClassScalarWhereWithAggregatesInput | sundayClassScalarWhereWithAggregatesInput[]
    OR?: sundayClassScalarWhereWithAggregatesInput[]
    NOT?: sundayClassScalarWhereWithAggregatesInput | sundayClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"sundayClass"> | string
    nom?: StringWithAggregatesFilter<"sundayClass"> | string
    teacher?: StringWithAggregatesFilter<"sundayClass"> | string
    startTime?: StringWithAggregatesFilter<"sundayClass"> | string
    endTime?: StringWithAggregatesFilter<"sundayClass"> | string
    description?: StringWithAggregatesFilter<"sundayClass"> | string
    churchId?: StringNullableWithAggregatesFilter<"sundayClass"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"sundayClass"> | Date | string
    maxStudents?: StringWithAggregatesFilter<"sundayClass"> | string
    ageGroup?: StringWithAggregatesFilter<"sundayClass"> | string
    book?: StringNullableWithAggregatesFilter<"sundayClass"> | string | null
  }

  export type expenseWhereInput = {
    AND?: expenseWhereInput | expenseWhereInput[]
    OR?: expenseWhereInput[]
    NOT?: expenseWhereInput | expenseWhereInput[]
    id?: StringFilter<"expense"> | string
    amount?: IntFilter<"expense"> | number
    category?: StringFilter<"expense"> | string
    date?: DateTimeFilter<"expense"> | Date | string
    paymentMethod?: StringFilter<"expense"> | string
    description?: StringFilter<"expense"> | string
    churchId?: StringNullableFilter<"expense"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type expenseOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    category?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    churchId?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: expenseOrderByRelevanceInput
  }

  export type expenseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: expenseWhereInput | expenseWhereInput[]
    OR?: expenseWhereInput[]
    NOT?: expenseWhereInput | expenseWhereInput[]
    amount?: IntFilter<"expense"> | number
    category?: StringFilter<"expense"> | string
    date?: DateTimeFilter<"expense"> | Date | string
    paymentMethod?: StringFilter<"expense"> | string
    description?: StringFilter<"expense"> | string
    churchId?: StringNullableFilter<"expense"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type expenseOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    category?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    churchId?: SortOrderInput | SortOrder
    _count?: expenseCountOrderByAggregateInput
    _avg?: expenseAvgOrderByAggregateInput
    _max?: expenseMaxOrderByAggregateInput
    _min?: expenseMinOrderByAggregateInput
    _sum?: expenseSumOrderByAggregateInput
  }

  export type expenseScalarWhereWithAggregatesInput = {
    AND?: expenseScalarWhereWithAggregatesInput | expenseScalarWhereWithAggregatesInput[]
    OR?: expenseScalarWhereWithAggregatesInput[]
    NOT?: expenseScalarWhereWithAggregatesInput | expenseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"expense"> | string
    amount?: IntWithAggregatesFilter<"expense"> | number
    category?: StringWithAggregatesFilter<"expense"> | string
    date?: DateTimeWithAggregatesFilter<"expense"> | Date | string
    paymentMethod?: StringWithAggregatesFilter<"expense"> | string
    description?: StringWithAggregatesFilter<"expense"> | string
    churchId?: StringNullableWithAggregatesFilter<"expense"> | string | null
  }

  export type offeringWhereInput = {
    AND?: offeringWhereInput | offeringWhereInput[]
    OR?: offeringWhereInput[]
    NOT?: offeringWhereInput | offeringWhereInput[]
    id?: StringFilter<"offering"> | string
    amount?: IntFilter<"offering"> | number
    date?: DateTimeFilter<"offering"> | Date | string
    paymentMethod?: StringFilter<"offering"> | string
    note?: StringFilter<"offering"> | string
    churchId?: StringNullableFilter<"offering"> | string | null
    status?: StringNullableFilter<"offering"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type offeringOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: offeringOrderByRelevanceInput
  }

  export type offeringWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: offeringWhereInput | offeringWhereInput[]
    OR?: offeringWhereInput[]
    NOT?: offeringWhereInput | offeringWhereInput[]
    amount?: IntFilter<"offering"> | number
    date?: DateTimeFilter<"offering"> | Date | string
    paymentMethod?: StringFilter<"offering"> | string
    note?: StringFilter<"offering"> | string
    churchId?: StringNullableFilter<"offering"> | string | null
    status?: StringNullableFilter<"offering"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type offeringOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    _count?: offeringCountOrderByAggregateInput
    _avg?: offeringAvgOrderByAggregateInput
    _max?: offeringMaxOrderByAggregateInput
    _min?: offeringMinOrderByAggregateInput
    _sum?: offeringSumOrderByAggregateInput
  }

  export type offeringScalarWhereWithAggregatesInput = {
    AND?: offeringScalarWhereWithAggregatesInput | offeringScalarWhereWithAggregatesInput[]
    OR?: offeringScalarWhereWithAggregatesInput[]
    NOT?: offeringScalarWhereWithAggregatesInput | offeringScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"offering"> | string
    amount?: IntWithAggregatesFilter<"offering"> | number
    date?: DateTimeWithAggregatesFilter<"offering"> | Date | string
    paymentMethod?: StringWithAggregatesFilter<"offering"> | string
    note?: StringWithAggregatesFilter<"offering"> | string
    churchId?: StringNullableWithAggregatesFilter<"offering"> | string | null
    status?: StringNullableWithAggregatesFilter<"offering"> | string | null
  }

  export type tithingWhereInput = {
    AND?: tithingWhereInput | tithingWhereInput[]
    OR?: tithingWhereInput[]
    NOT?: tithingWhereInput | tithingWhereInput[]
    id?: StringFilter<"tithing"> | string
    contributorName?: StringFilter<"tithing"> | string
    amount?: IntFilter<"tithing"> | number
    date?: DateTimeFilter<"tithing"> | Date | string
    paymentMethod?: StringFilter<"tithing"> | string
    note?: StringFilter<"tithing"> | string
    churchId?: StringNullableFilter<"tithing"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type tithingOrderByWithRelationInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: tithingOrderByRelevanceInput
  }

  export type tithingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: tithingWhereInput | tithingWhereInput[]
    OR?: tithingWhereInput[]
    NOT?: tithingWhereInput | tithingWhereInput[]
    contributorName?: StringFilter<"tithing"> | string
    amount?: IntFilter<"tithing"> | number
    date?: DateTimeFilter<"tithing"> | Date | string
    paymentMethod?: StringFilter<"tithing"> | string
    note?: StringFilter<"tithing"> | string
    churchId?: StringNullableFilter<"tithing"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type tithingOrderByWithAggregationInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    _count?: tithingCountOrderByAggregateInput
    _avg?: tithingAvgOrderByAggregateInput
    _max?: tithingMaxOrderByAggregateInput
    _min?: tithingMinOrderByAggregateInput
    _sum?: tithingSumOrderByAggregateInput
  }

  export type tithingScalarWhereWithAggregatesInput = {
    AND?: tithingScalarWhereWithAggregatesInput | tithingScalarWhereWithAggregatesInput[]
    OR?: tithingScalarWhereWithAggregatesInput[]
    NOT?: tithingScalarWhereWithAggregatesInput | tithingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"tithing"> | string
    contributorName?: StringWithAggregatesFilter<"tithing"> | string
    amount?: IntWithAggregatesFilter<"tithing"> | number
    date?: DateTimeWithAggregatesFilter<"tithing"> | Date | string
    paymentMethod?: StringWithAggregatesFilter<"tithing"> | string
    note?: StringWithAggregatesFilter<"tithing"> | string
    churchId?: StringNullableWithAggregatesFilter<"tithing"> | string | null
  }

  export type donationWhereInput = {
    AND?: donationWhereInput | donationWhereInput[]
    OR?: donationWhereInput[]
    NOT?: donationWhereInput | donationWhereInput[]
    id?: StringFilter<"donation"> | string
    contributorName?: StringFilter<"donation"> | string
    amount?: IntFilter<"donation"> | number
    date?: DateTimeFilter<"donation"> | Date | string
    paymentMethod?: StringFilter<"donation"> | string
    note?: StringFilter<"donation"> | string
    churchId?: StringNullableFilter<"donation"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type donationOrderByWithRelationInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: donationOrderByRelevanceInput
  }

  export type donationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: donationWhereInput | donationWhereInput[]
    OR?: donationWhereInput[]
    NOT?: donationWhereInput | donationWhereInput[]
    contributorName?: StringFilter<"donation"> | string
    amount?: IntFilter<"donation"> | number
    date?: DateTimeFilter<"donation"> | Date | string
    paymentMethod?: StringFilter<"donation"> | string
    note?: StringFilter<"donation"> | string
    churchId?: StringNullableFilter<"donation"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type donationOrderByWithAggregationInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    _count?: donationCountOrderByAggregateInput
    _avg?: donationAvgOrderByAggregateInput
    _max?: donationMaxOrderByAggregateInput
    _min?: donationMinOrderByAggregateInput
    _sum?: donationSumOrderByAggregateInput
  }

  export type donationScalarWhereWithAggregatesInput = {
    AND?: donationScalarWhereWithAggregatesInput | donationScalarWhereWithAggregatesInput[]
    OR?: donationScalarWhereWithAggregatesInput[]
    NOT?: donationScalarWhereWithAggregatesInput | donationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"donation"> | string
    contributorName?: StringWithAggregatesFilter<"donation"> | string
    amount?: IntWithAggregatesFilter<"donation"> | number
    date?: DateTimeWithAggregatesFilter<"donation"> | Date | string
    paymentMethod?: StringWithAggregatesFilter<"donation"> | string
    note?: StringWithAggregatesFilter<"donation"> | string
    churchId?: StringNullableWithAggregatesFilter<"donation"> | string | null
  }

  export type moissonWhereInput = {
    AND?: moissonWhereInput | moissonWhereInput[]
    OR?: moissonWhereInput[]
    NOT?: moissonWhereInput | moissonWhereInput[]
    id?: StringFilter<"moisson"> | string
    contributorName?: StringFilter<"moisson"> | string
    amount?: IntFilter<"moisson"> | number
    date?: DateTimeFilter<"moisson"> | Date | string
    paymentMethod?: StringFilter<"moisson"> | string
    note?: StringFilter<"moisson"> | string
    churchId?: StringNullableFilter<"moisson"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type moissonOrderByWithRelationInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: moissonOrderByRelevanceInput
  }

  export type moissonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: moissonWhereInput | moissonWhereInput[]
    OR?: moissonWhereInput[]
    NOT?: moissonWhereInput | moissonWhereInput[]
    contributorName?: StringFilter<"moisson"> | string
    amount?: IntFilter<"moisson"> | number
    date?: DateTimeFilter<"moisson"> | Date | string
    paymentMethod?: StringFilter<"moisson"> | string
    note?: StringFilter<"moisson"> | string
    churchId?: StringNullableFilter<"moisson"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type moissonOrderByWithAggregationInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrderInput | SortOrder
    _count?: moissonCountOrderByAggregateInput
    _avg?: moissonAvgOrderByAggregateInput
    _max?: moissonMaxOrderByAggregateInput
    _min?: moissonMinOrderByAggregateInput
    _sum?: moissonSumOrderByAggregateInput
  }

  export type moissonScalarWhereWithAggregatesInput = {
    AND?: moissonScalarWhereWithAggregatesInput | moissonScalarWhereWithAggregatesInput[]
    OR?: moissonScalarWhereWithAggregatesInput[]
    NOT?: moissonScalarWhereWithAggregatesInput | moissonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"moisson"> | string
    contributorName?: StringWithAggregatesFilter<"moisson"> | string
    amount?: IntWithAggregatesFilter<"moisson"> | number
    date?: DateTimeWithAggregatesFilter<"moisson"> | Date | string
    paymentMethod?: StringWithAggregatesFilter<"moisson"> | string
    note?: StringWithAggregatesFilter<"moisson"> | string
    churchId?: StringNullableWithAggregatesFilter<"moisson"> | string | null
  }

  export type comiteeWhereInput = {
    AND?: comiteeWhereInput | comiteeWhereInput[]
    OR?: comiteeWhereInput[]
    NOT?: comiteeWhereInput | comiteeWhereInput[]
    id?: StringFilter<"comitee"> | string
    description?: StringFilter<"comitee"> | string
    meetingDay?: StringFilter<"comitee"> | string
    meetingTime?: StringFilter<"comitee"> | string
    name?: StringFilter<"comitee"> | string
    churchId?: StringNullableFilter<"comitee"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    commiteeLeader?: UserListRelationFilter
    commiteeMember?: UserListRelationFilter
  }

  export type comiteeOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    meetingDay?: SortOrder
    meetingTime?: SortOrder
    name?: SortOrder
    churchId?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    commiteeLeader?: UserOrderByRelationAggregateInput
    commiteeMember?: UserOrderByRelationAggregateInput
    _relevance?: comiteeOrderByRelevanceInput
  }

  export type comiteeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: comiteeWhereInput | comiteeWhereInput[]
    OR?: comiteeWhereInput[]
    NOT?: comiteeWhereInput | comiteeWhereInput[]
    description?: StringFilter<"comitee"> | string
    meetingDay?: StringFilter<"comitee"> | string
    meetingTime?: StringFilter<"comitee"> | string
    name?: StringFilter<"comitee"> | string
    churchId?: StringNullableFilter<"comitee"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    commiteeLeader?: UserListRelationFilter
    commiteeMember?: UserListRelationFilter
  }, "id">

  export type comiteeOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    meetingDay?: SortOrder
    meetingTime?: SortOrder
    name?: SortOrder
    churchId?: SortOrderInput | SortOrder
    _count?: comiteeCountOrderByAggregateInput
    _max?: comiteeMaxOrderByAggregateInput
    _min?: comiteeMinOrderByAggregateInput
  }

  export type comiteeScalarWhereWithAggregatesInput = {
    AND?: comiteeScalarWhereWithAggregatesInput | comiteeScalarWhereWithAggregatesInput[]
    OR?: comiteeScalarWhereWithAggregatesInput[]
    NOT?: comiteeScalarWhereWithAggregatesInput | comiteeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"comitee"> | string
    description?: StringWithAggregatesFilter<"comitee"> | string
    meetingDay?: StringWithAggregatesFilter<"comitee"> | string
    meetingTime?: StringWithAggregatesFilter<"comitee"> | string
    name?: StringWithAggregatesFilter<"comitee"> | string
    churchId?: StringNullableWithAggregatesFilter<"comitee"> | string | null
  }

  export type appointmentWhereInput = {
    AND?: appointmentWhereInput | appointmentWhereInput[]
    OR?: appointmentWhereInput[]
    NOT?: appointmentWhereInput | appointmentWhereInput[]
    id?: StringFilter<"appointment"> | string
    name?: StringFilter<"appointment"> | string
    visibility?: StringNullableFilter<"appointment"> | string | null
    description?: StringFilter<"appointment"> | string
    date?: DateTimeFilter<"appointment"> | Date | string
    time?: StringFilter<"appointment"> | string
    duration?: StringFilter<"appointment"> | string
    notes?: StringFilter<"appointment"> | string
    churchId?: StringNullableFilter<"appointment"> | string | null
    createdAt?: DateTimeFilter<"appointment"> | Date | string
    updatedAt?: DateTimeFilter<"appointment"> | Date | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    assignedUsers?: UserListRelationFilter
  }

  export type appointmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    visibility?: SortOrderInput | SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    church?: ChurchOrderByWithRelationInput
    assignedUsers?: UserOrderByRelationAggregateInput
    _relevance?: appointmentOrderByRelevanceInput
  }

  export type appointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: appointmentWhereInput | appointmentWhereInput[]
    OR?: appointmentWhereInput[]
    NOT?: appointmentWhereInput | appointmentWhereInput[]
    name?: StringFilter<"appointment"> | string
    visibility?: StringNullableFilter<"appointment"> | string | null
    description?: StringFilter<"appointment"> | string
    date?: DateTimeFilter<"appointment"> | Date | string
    time?: StringFilter<"appointment"> | string
    duration?: StringFilter<"appointment"> | string
    notes?: StringFilter<"appointment"> | string
    churchId?: StringNullableFilter<"appointment"> | string | null
    createdAt?: DateTimeFilter<"appointment"> | Date | string
    updatedAt?: DateTimeFilter<"appointment"> | Date | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
    assignedUsers?: UserListRelationFilter
  }, "id">

  export type appointmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    visibility?: SortOrderInput | SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: appointmentCountOrderByAggregateInput
    _max?: appointmentMaxOrderByAggregateInput
    _min?: appointmentMinOrderByAggregateInput
  }

  export type appointmentScalarWhereWithAggregatesInput = {
    AND?: appointmentScalarWhereWithAggregatesInput | appointmentScalarWhereWithAggregatesInput[]
    OR?: appointmentScalarWhereWithAggregatesInput[]
    NOT?: appointmentScalarWhereWithAggregatesInput | appointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"appointment"> | string
    name?: StringWithAggregatesFilter<"appointment"> | string
    visibility?: StringNullableWithAggregatesFilter<"appointment"> | string | null
    description?: StringWithAggregatesFilter<"appointment"> | string
    date?: DateTimeWithAggregatesFilter<"appointment"> | Date | string
    time?: StringWithAggregatesFilter<"appointment"> | string
    duration?: StringWithAggregatesFilter<"appointment"> | string
    notes?: StringWithAggregatesFilter<"appointment"> | string
    churchId?: StringNullableWithAggregatesFilter<"appointment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"appointment"> | Date | string
  }

  export type transfertWhereInput = {
    AND?: transfertWhereInput | transfertWhereInput[]
    OR?: transfertWhereInput[]
    NOT?: transfertWhereInput | transfertWhereInput[]
    id?: StringFilter<"transfert"> | string
    createdAt?: DateTimeFilter<"transfert"> | Date | string
    updatedAt?: DateTimeFilter<"transfert"> | Date | string
    fromChurchId?: StringFilter<"transfert"> | string
    toChurchId?: StringFilter<"transfert"> | string
    userId?: StringFilter<"transfert"> | string
    fromChurch?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    toChurch?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    member?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type transfertOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromChurchId?: SortOrder
    toChurchId?: SortOrder
    userId?: SortOrder
    fromChurch?: ChurchOrderByWithRelationInput
    toChurch?: ChurchOrderByWithRelationInput
    member?: UserOrderByWithRelationInput
    _relevance?: transfertOrderByRelevanceInput
  }

  export type transfertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: transfertWhereInput | transfertWhereInput[]
    OR?: transfertWhereInput[]
    NOT?: transfertWhereInput | transfertWhereInput[]
    createdAt?: DateTimeFilter<"transfert"> | Date | string
    updatedAt?: DateTimeFilter<"transfert"> | Date | string
    fromChurchId?: StringFilter<"transfert"> | string
    toChurchId?: StringFilter<"transfert"> | string
    userId?: StringFilter<"transfert"> | string
    fromChurch?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    toChurch?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    member?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type transfertOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromChurchId?: SortOrder
    toChurchId?: SortOrder
    userId?: SortOrder
    _count?: transfertCountOrderByAggregateInput
    _max?: transfertMaxOrderByAggregateInput
    _min?: transfertMinOrderByAggregateInput
  }

  export type transfertScalarWhereWithAggregatesInput = {
    AND?: transfertScalarWhereWithAggregatesInput | transfertScalarWhereWithAggregatesInput[]
    OR?: transfertScalarWhereWithAggregatesInput[]
    NOT?: transfertScalarWhereWithAggregatesInput | transfertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"transfert"> | string
    createdAt?: DateTimeWithAggregatesFilter<"transfert"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"transfert"> | Date | string
    fromChurchId?: StringWithAggregatesFilter<"transfert"> | string
    toChurchId?: StringWithAggregatesFilter<"transfert"> | string
    userId?: StringWithAggregatesFilter<"transfert"> | string
  }

  export type MissionWhereInput = {
    AND?: MissionWhereInput | MissionWhereInput[]
    OR?: MissionWhereInput[]
    NOT?: MissionWhereInput | MissionWhereInput[]
    id?: StringFilter<"Mission"> | string
    missionName?: StringFilter<"Mission"> | string
    description?: StringFilter<"Mission"> | string
    status?: StringFilter<"Mission"> | string
    location?: StringFilter<"Mission"> | string
    createdAt?: DateTimeFilter<"Mission"> | Date | string
    updatedAt?: DateTimeFilter<"Mission"> | Date | string
    presidentName?: StringNullableFilter<"Mission"> | string | null
    church?: ChurchListRelationFilter
  }

  export type MissionOrderByWithRelationInput = {
    id?: SortOrder
    missionName?: SortOrder
    description?: SortOrder
    status?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    presidentName?: SortOrderInput | SortOrder
    church?: ChurchOrderByRelationAggregateInput
    _relevance?: MissionOrderByRelevanceInput
  }

  export type MissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MissionWhereInput | MissionWhereInput[]
    OR?: MissionWhereInput[]
    NOT?: MissionWhereInput | MissionWhereInput[]
    missionName?: StringFilter<"Mission"> | string
    description?: StringFilter<"Mission"> | string
    status?: StringFilter<"Mission"> | string
    location?: StringFilter<"Mission"> | string
    createdAt?: DateTimeFilter<"Mission"> | Date | string
    updatedAt?: DateTimeFilter<"Mission"> | Date | string
    presidentName?: StringNullableFilter<"Mission"> | string | null
    church?: ChurchListRelationFilter
  }, "id">

  export type MissionOrderByWithAggregationInput = {
    id?: SortOrder
    missionName?: SortOrder
    description?: SortOrder
    status?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    presidentName?: SortOrderInput | SortOrder
    _count?: MissionCountOrderByAggregateInput
    _max?: MissionMaxOrderByAggregateInput
    _min?: MissionMinOrderByAggregateInput
  }

  export type MissionScalarWhereWithAggregatesInput = {
    AND?: MissionScalarWhereWithAggregatesInput | MissionScalarWhereWithAggregatesInput[]
    OR?: MissionScalarWhereWithAggregatesInput[]
    NOT?: MissionScalarWhereWithAggregatesInput | MissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Mission"> | string
    missionName?: StringWithAggregatesFilter<"Mission"> | string
    description?: StringWithAggregatesFilter<"Mission"> | string
    status?: StringWithAggregatesFilter<"Mission"> | string
    location?: StringWithAggregatesFilter<"Mission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Mission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Mission"> | Date | string
    presidentName?: StringNullableWithAggregatesFilter<"Mission"> | string | null
  }

  export type sanctionWhereInput = {
    AND?: sanctionWhereInput | sanctionWhereInput[]
    OR?: sanctionWhereInput[]
    NOT?: sanctionWhereInput | sanctionWhereInput[]
    id?: StringFilter<"sanction"> | string
    name?: StringFilter<"sanction"> | string
    description?: StringFilter<"sanction"> | string
    startDate?: StringFilter<"sanction"> | string
    status?: StringFilter<"sanction"> | string
    churchId?: StringNullableFilter<"sanction"> | string | null
    createdAt?: DateTimeFilter<"sanction"> | Date | string
    updatedAt?: DateTimeFilter<"sanction"> | Date | string
    endDate?: StringNullableFilter<"sanction"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type sanctionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    endDate?: SortOrderInput | SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: sanctionOrderByRelevanceInput
  }

  export type sanctionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: sanctionWhereInput | sanctionWhereInput[]
    OR?: sanctionWhereInput[]
    NOT?: sanctionWhereInput | sanctionWhereInput[]
    name?: StringFilter<"sanction"> | string
    description?: StringFilter<"sanction"> | string
    startDate?: StringFilter<"sanction"> | string
    status?: StringFilter<"sanction"> | string
    churchId?: StringNullableFilter<"sanction"> | string | null
    createdAt?: DateTimeFilter<"sanction"> | Date | string
    updatedAt?: DateTimeFilter<"sanction"> | Date | string
    endDate?: StringNullableFilter<"sanction"> | string | null
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type sanctionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    endDate?: SortOrderInput | SortOrder
    _count?: sanctionCountOrderByAggregateInput
    _max?: sanctionMaxOrderByAggregateInput
    _min?: sanctionMinOrderByAggregateInput
  }

  export type sanctionScalarWhereWithAggregatesInput = {
    AND?: sanctionScalarWhereWithAggregatesInput | sanctionScalarWhereWithAggregatesInput[]
    OR?: sanctionScalarWhereWithAggregatesInput[]
    NOT?: sanctionScalarWhereWithAggregatesInput | sanctionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"sanction"> | string
    name?: StringWithAggregatesFilter<"sanction"> | string
    description?: StringWithAggregatesFilter<"sanction"> | string
    startDate?: StringWithAggregatesFilter<"sanction"> | string
    status?: StringWithAggregatesFilter<"sanction"> | string
    churchId?: StringNullableWithAggregatesFilter<"sanction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"sanction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"sanction"> | Date | string
    endDate?: StringNullableWithAggregatesFilter<"sanction"> | string | null
  }

  export type ministryWhereInput = {
    AND?: ministryWhereInput | ministryWhereInput[]
    OR?: ministryWhereInput[]
    NOT?: ministryWhereInput | ministryWhereInput[]
    id?: StringFilter<"ministry"> | string
    name?: StringFilter<"ministry"> | string
    description?: StringFilter<"ministry"> | string
    churchId?: StringNullableFilter<"ministry"> | string | null
    createdAt?: DateTimeFilter<"ministry"> | Date | string
    updatedAt?: DateTimeFilter<"ministry"> | Date | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type ministryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: ministryOrderByRelevanceInput
  }

  export type ministryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ministryWhereInput | ministryWhereInput[]
    OR?: ministryWhereInput[]
    NOT?: ministryWhereInput | ministryWhereInput[]
    name?: StringFilter<"ministry"> | string
    description?: StringFilter<"ministry"> | string
    churchId?: StringNullableFilter<"ministry"> | string | null
    createdAt?: DateTimeFilter<"ministry"> | Date | string
    updatedAt?: DateTimeFilter<"ministry"> | Date | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type ministryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ministryCountOrderByAggregateInput
    _max?: ministryMaxOrderByAggregateInput
    _min?: ministryMinOrderByAggregateInput
  }

  export type ministryScalarWhereWithAggregatesInput = {
    AND?: ministryScalarWhereWithAggregatesInput | ministryScalarWhereWithAggregatesInput[]
    OR?: ministryScalarWhereWithAggregatesInput[]
    NOT?: ministryScalarWhereWithAggregatesInput | ministryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ministry"> | string
    name?: StringWithAggregatesFilter<"ministry"> | string
    description?: StringWithAggregatesFilter<"ministry"> | string
    churchId?: StringNullableWithAggregatesFilter<"ministry"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ministry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ministry"> | Date | string
  }

  export type pasteurWhereInput = {
    AND?: pasteurWhereInput | pasteurWhereInput[]
    OR?: pasteurWhereInput[]
    NOT?: pasteurWhereInput | pasteurWhereInput[]
    id?: StringFilter<"pasteur"> | string
    pasteurName?: StringFilter<"pasteur"> | string
    churchId?: StringNullableFilter<"pasteur"> | string | null
    address?: StringFilter<"pasteur"> | string
    phone?: StringFilter<"pasteur"> | string
    status?: StringFilter<"pasteur"> | string
    email?: StringFilter<"pasteur"> | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }

  export type pasteurOrderByWithRelationInput = {
    id?: SortOrder
    pasteurName?: SortOrder
    churchId?: SortOrderInput | SortOrder
    address?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    email?: SortOrder
    church?: ChurchOrderByWithRelationInput
    _relevance?: pasteurOrderByRelevanceInput
  }

  export type pasteurWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: pasteurWhereInput | pasteurWhereInput[]
    OR?: pasteurWhereInput[]
    NOT?: pasteurWhereInput | pasteurWhereInput[]
    pasteurName?: StringFilter<"pasteur"> | string
    churchId?: StringNullableFilter<"pasteur"> | string | null
    address?: StringFilter<"pasteur"> | string
    phone?: StringFilter<"pasteur"> | string
    status?: StringFilter<"pasteur"> | string
    email?: StringFilter<"pasteur"> | string
    church?: XOR<ChurchNullableScalarRelationFilter, ChurchWhereInput> | null
  }, "id">

  export type pasteurOrderByWithAggregationInput = {
    id?: SortOrder
    pasteurName?: SortOrder
    churchId?: SortOrderInput | SortOrder
    address?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    email?: SortOrder
    _count?: pasteurCountOrderByAggregateInput
    _max?: pasteurMaxOrderByAggregateInput
    _min?: pasteurMinOrderByAggregateInput
  }

  export type pasteurScalarWhereWithAggregatesInput = {
    AND?: pasteurScalarWhereWithAggregatesInput | pasteurScalarWhereWithAggregatesInput[]
    OR?: pasteurScalarWhereWithAggregatesInput[]
    NOT?: pasteurScalarWhereWithAggregatesInput | pasteurScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"pasteur"> | string
    pasteurName?: StringWithAggregatesFilter<"pasteur"> | string
    churchId?: StringNullableWithAggregatesFilter<"pasteur"> | string | null
    address?: StringWithAggregatesFilter<"pasteur"> | string
    phone?: StringWithAggregatesFilter<"pasteur"> | string
    status?: StringWithAggregatesFilter<"pasteur"> | string
    email?: StringWithAggregatesFilter<"pasteur"> | string
  }

  export type DepartementWhereInput = {
    AND?: DepartementWhereInput | DepartementWhereInput[]
    OR?: DepartementWhereInput[]
    NOT?: DepartementWhereInput | DepartementWhereInput[]
    id?: StringFilter<"Departement"> | string
    name?: StringFilter<"Departement"> | string
    commune?: CommuneListRelationFilter
  }

  export type DepartementOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    commune?: CommuneOrderByRelationAggregateInput
    _relevance?: DepartementOrderByRelevanceInput
  }

  export type DepartementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: DepartementWhereInput | DepartementWhereInput[]
    OR?: DepartementWhereInput[]
    NOT?: DepartementWhereInput | DepartementWhereInput[]
    commune?: CommuneListRelationFilter
  }, "id" | "name">

  export type DepartementOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: DepartementCountOrderByAggregateInput
    _max?: DepartementMaxOrderByAggregateInput
    _min?: DepartementMinOrderByAggregateInput
  }

  export type DepartementScalarWhereWithAggregatesInput = {
    AND?: DepartementScalarWhereWithAggregatesInput | DepartementScalarWhereWithAggregatesInput[]
    OR?: DepartementScalarWhereWithAggregatesInput[]
    NOT?: DepartementScalarWhereWithAggregatesInput | DepartementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Departement"> | string
    name?: StringWithAggregatesFilter<"Departement"> | string
  }

  export type CommuneWhereInput = {
    AND?: CommuneWhereInput | CommuneWhereInput[]
    OR?: CommuneWhereInput[]
    NOT?: CommuneWhereInput | CommuneWhereInput[]
    id?: StringFilter<"Commune"> | string
    name?: StringFilter<"Commune"> | string
    departementId?: StringFilter<"Commune"> | string
    departement?: XOR<DepartementScalarRelationFilter, DepartementWhereInput>
    sectionCommunale?: SectionCommunaleListRelationFilter
  }

  export type CommuneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    departementId?: SortOrder
    departement?: DepartementOrderByWithRelationInput
    sectionCommunale?: SectionCommunaleOrderByRelationAggregateInput
    _relevance?: CommuneOrderByRelevanceInput
  }

  export type CommuneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CommuneWhereInput | CommuneWhereInput[]
    OR?: CommuneWhereInput[]
    NOT?: CommuneWhereInput | CommuneWhereInput[]
    departementId?: StringFilter<"Commune"> | string
    departement?: XOR<DepartementScalarRelationFilter, DepartementWhereInput>
    sectionCommunale?: SectionCommunaleListRelationFilter
  }, "id" | "name">

  export type CommuneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    departementId?: SortOrder
    _count?: CommuneCountOrderByAggregateInput
    _max?: CommuneMaxOrderByAggregateInput
    _min?: CommuneMinOrderByAggregateInput
  }

  export type CommuneScalarWhereWithAggregatesInput = {
    AND?: CommuneScalarWhereWithAggregatesInput | CommuneScalarWhereWithAggregatesInput[]
    OR?: CommuneScalarWhereWithAggregatesInput[]
    NOT?: CommuneScalarWhereWithAggregatesInput | CommuneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Commune"> | string
    name?: StringWithAggregatesFilter<"Commune"> | string
    departementId?: StringWithAggregatesFilter<"Commune"> | string
  }

  export type SectionCommunaleWhereInput = {
    AND?: SectionCommunaleWhereInput | SectionCommunaleWhereInput[]
    OR?: SectionCommunaleWhereInput[]
    NOT?: SectionCommunaleWhereInput | SectionCommunaleWhereInput[]
    id?: StringFilter<"SectionCommunale"> | string
    name?: StringFilter<"SectionCommunale"> | string
    communeId?: StringFilter<"SectionCommunale"> | string
    commune?: XOR<CommuneScalarRelationFilter, CommuneWhereInput>
  }

  export type SectionCommunaleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    communeId?: SortOrder
    commune?: CommuneOrderByWithRelationInput
    _relevance?: SectionCommunaleOrderByRelevanceInput
  }

  export type SectionCommunaleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: SectionCommunaleWhereInput | SectionCommunaleWhereInput[]
    OR?: SectionCommunaleWhereInput[]
    NOT?: SectionCommunaleWhereInput | SectionCommunaleWhereInput[]
    communeId?: StringFilter<"SectionCommunale"> | string
    commune?: XOR<CommuneScalarRelationFilter, CommuneWhereInput>
  }, "id" | "name">

  export type SectionCommunaleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    communeId?: SortOrder
    _count?: SectionCommunaleCountOrderByAggregateInput
    _max?: SectionCommunaleMaxOrderByAggregateInput
    _min?: SectionCommunaleMinOrderByAggregateInput
  }

  export type SectionCommunaleScalarWhereWithAggregatesInput = {
    AND?: SectionCommunaleScalarWhereWithAggregatesInput | SectionCommunaleScalarWhereWithAggregatesInput[]
    OR?: SectionCommunaleScalarWhereWithAggregatesInput[]
    NOT?: SectionCommunaleScalarWhereWithAggregatesInput | SectionCommunaleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SectionCommunale"> | string
    name?: StringWithAggregatesFilter<"SectionCommunale"> | string
    communeId?: StringWithAggregatesFilter<"SectionCommunale"> | string
  }

  export type ServiceCreateInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presences?: PresenceCreateNestedManyWithoutServiceInput
    church?: ChurchCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    churchId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presences?: PresenceUpdateManyWithoutServiceNestedInput
    church?: ChurchUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    churchId?: string | null
  }

  export type ServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PresenceCreateInput = {
    id?: string
    statut: $Enums.StatutPresence
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutPresencesInput
    user: UserCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateInput = {
    id?: string
    statut: $Enums.StatutPresence
    utilisateurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type PresenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutPresencesNestedInput
    user?: UserUpdateOneRequiredWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    utilisateurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type PresenceCreateManyInput = {
    id?: string
    statut: $Enums.StatutPresence
    utilisateurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type PresenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    utilisateurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type TtiCreateInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church?: ChurchCreateNestedManyWithoutTtiInput
  }

  export type TtiUncheckedCreateInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church?: ChurchUncheckedCreateNestedManyWithoutTtiInput
  }

  export type TtiUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateManyWithoutTtiNestedInput
  }

  export type TtiUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUncheckedUpdateManyWithoutTtiNestedInput
  }

  export type TtiCreateManyInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TtiUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TtiUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateInput = {
    id?: string
    country?: string | null
    departement?: string | null
    commune?: string | null
    sectionCommunale?: string | null
    telephone?: string | null
    rue?: string | null
    church?: ChurchCreateNestedOneWithoutFullAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    country?: string | null
    departement?: string | null
    commune?: string | null
    sectionCommunale?: string | null
    telephone?: string | null
    rue?: string | null
    church?: ChurchUncheckedCreateNestedOneWithoutFullAddressInput
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    commune?: NullableStringFieldUpdateOperationsInput | string | null
    sectionCommunale?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    rue?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutFullAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    commune?: NullableStringFieldUpdateOperationsInput | string | null
    sectionCommunale?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    rue?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUncheckedUpdateOneWithoutFullAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: string
    country?: string | null
    departement?: string | null
    commune?: string | null
    sectionCommunale?: string | null
    telephone?: string | null
    rue?: string | null
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    commune?: NullableStringFieldUpdateOperationsInput | string | null
    sectionCommunale?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    rue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    commune?: NullableStringFieldUpdateOperationsInput | string | null
    sectionCommunale?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    rue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChurchCreateInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateManyInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
  }

  export type ChurchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChurchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupeCreateInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
    church?: ChurchCreateNestedOneWithoutGroupsInput
    users?: UserCreateNestedManyWithoutGroupsInput
  }

  export type GroupeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
    users?: UserUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutGroupsNestedInput
    users?: UserUpdateManyWithoutGroupsNestedInput
  }

  export type GroupeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
  }

  export type GroupeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventCreateInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    frequency: string
    startDate: string
    endDate: string
    createAt?: Date | string
    updateAt?: Date | string
    isRecurring?: boolean
    endPeriode?: string | null
    startPeriode?: string | null
    church?: ChurchCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    frequency: string
    startDate: string
    endDate: string
    churchId?: string | null
    createAt?: Date | string
    updateAt?: Date | string
    isRecurring?: boolean
    endPeriode?: string | null
    startPeriode?: string | null
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    endPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    startPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    endPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    startPeriode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    frequency: string
    startDate: string
    endDate: string
    churchId?: string | null
    createAt?: Date | string
    updateAt?: Date | string
    isRecurring?: boolean
    endPeriode?: string | null
    startPeriode?: string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    endPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    startPeriode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    endPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    startPeriode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MariageCreateInput = {
    id?: string
    brideFullname: string
    birthDate: Date | string
    groomFullname: string
    goomBirthDate: Date | string
    weddingDate: Date | string
    weddingLocation: string
    weddingCertificate?: string | null
    officiantName: string
    brideCertificate?: string | null
    civilStateOfficer?: string | null
    grooomCertificate?: string | null
    witness?: string | null
    civilStateStateOfficer?: string | null
    witnessSignature?: string | null
    church?: ChurchCreateNestedOneWithoutMariagesInput
  }

  export type MariageUncheckedCreateInput = {
    id?: string
    brideFullname: string
    birthDate: Date | string
    groomFullname: string
    goomBirthDate: Date | string
    weddingDate: Date | string
    weddingLocation: string
    weddingCertificate?: string | null
    officiantName: string
    churchId?: string | null
    brideCertificate?: string | null
    civilStateOfficer?: string | null
    grooomCertificate?: string | null
    witness?: string | null
    civilStateStateOfficer?: string | null
    witnessSignature?: string | null
  }

  export type MariageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brideFullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    groomFullname?: StringFieldUpdateOperationsInput | string
    goomBirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingLocation?: StringFieldUpdateOperationsInput | string
    weddingCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    brideCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    grooomCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    witness?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    witnessSignature?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutMariagesNestedInput
  }

  export type MariageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brideFullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    groomFullname?: StringFieldUpdateOperationsInput | string
    goomBirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingLocation?: StringFieldUpdateOperationsInput | string
    weddingCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    brideCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    grooomCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    witness?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    witnessSignature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MariageCreateManyInput = {
    id?: string
    brideFullname: string
    birthDate: Date | string
    groomFullname: string
    goomBirthDate: Date | string
    weddingDate: Date | string
    weddingLocation: string
    weddingCertificate?: string | null
    officiantName: string
    churchId?: string | null
    brideCertificate?: string | null
    civilStateOfficer?: string | null
    grooomCertificate?: string | null
    witness?: string | null
    civilStateStateOfficer?: string | null
    witnessSignature?: string | null
  }

  export type MariageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    brideFullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    groomFullname?: StringFieldUpdateOperationsInput | string
    goomBirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingLocation?: StringFieldUpdateOperationsInput | string
    weddingCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    brideCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    grooomCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    witness?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    witnessSignature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MariageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    brideFullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    groomFullname?: StringFieldUpdateOperationsInput | string
    goomBirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingLocation?: StringFieldUpdateOperationsInput | string
    weddingCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    brideCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    grooomCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    witness?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    witnessSignature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuneralCreateInput = {
    id?: string
    fullname: string
    birthDate: Date | string
    funeralDate: Date | string
    funeralTime: string
    relationShip: string
    email: string
    deathCertificate?: string | null
    nextOfKin: string
    officiantName: string
    description: string
    funeralLocation: string
    createdAt?: Date | string
    status?: string
    updatedAt?: Date | string
    telephone?: string | null
    church?: ChurchCreateNestedOneWithoutFuneralsInput
  }

  export type FuneralUncheckedCreateInput = {
    id?: string
    fullname: string
    birthDate: Date | string
    funeralDate: Date | string
    funeralTime: string
    relationShip: string
    email: string
    deathCertificate?: string | null
    nextOfKin: string
    officiantName: string
    description: string
    funeralLocation: string
    churchId?: string | null
    createdAt?: Date | string
    status?: string
    updatedAt?: Date | string
    telephone?: string | null
  }

  export type FuneralUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralTime?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    nextOfKin?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    funeralLocation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutFuneralsNestedInput
  }

  export type FuneralUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralTime?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    nextOfKin?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    funeralLocation?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuneralCreateManyInput = {
    id?: string
    fullname: string
    birthDate: Date | string
    funeralDate: Date | string
    funeralTime: string
    relationShip: string
    email: string
    deathCertificate?: string | null
    nextOfKin: string
    officiantName: string
    description: string
    funeralLocation: string
    churchId?: string | null
    createdAt?: Date | string
    status?: string
    updatedAt?: Date | string
    telephone?: string | null
  }

  export type FuneralUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralTime?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    nextOfKin?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    funeralLocation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuneralUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralTime?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    nextOfKin?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    funeralLocation?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PresentationCreateInput = {
    id?: string
    placeOfBirth: string
    birthCertificate?: string | null
    fatherName: string
    motherName: string
    phone: string
    address: string
    presentationDate: Date | string
    officiantName: string
    description?: string | null
    childName: string
    dateOfBirth: Date | string
    witness: string
    church?: ChurchCreateNestedOneWithoutPresentationsInput
  }

  export type PresentationUncheckedCreateInput = {
    id?: string
    placeOfBirth: string
    birthCertificate?: string | null
    fatherName: string
    motherName: string
    phone: string
    address: string
    presentationDate: Date | string
    officiantName: string
    description?: string | null
    churchId?: string | null
    childName: string
    dateOfBirth: Date | string
    witness: string
  }

  export type PresentationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    birthCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    fatherName?: StringFieldUpdateOperationsInput | string
    motherName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    presentationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    childName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    witness?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutPresentationsNestedInput
  }

  export type PresentationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    birthCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    fatherName?: StringFieldUpdateOperationsInput | string
    motherName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    presentationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    childName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    witness?: StringFieldUpdateOperationsInput | string
  }

  export type PresentationCreateManyInput = {
    id?: string
    placeOfBirth: string
    birthCertificate?: string | null
    fatherName: string
    motherName: string
    phone: string
    address: string
    presentationDate: Date | string
    officiantName: string
    description?: string | null
    churchId?: string | null
    childName: string
    dateOfBirth: Date | string
    witness: string
  }

  export type PresentationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    birthCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    fatherName?: StringFieldUpdateOperationsInput | string
    motherName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    presentationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    childName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    witness?: StringFieldUpdateOperationsInput | string
  }

  export type PresentationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    birthCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    fatherName?: StringFieldUpdateOperationsInput | string
    motherName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    presentationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    childName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    witness?: StringFieldUpdateOperationsInput | string
  }

  export type BaptismCreateInput = {
    id?: string
    fullName: string
    birthDate: Date | string
    placeOfBirth: string
    baptismDate: Date | string
    baptismCertificate?: string | null
    officiantName: string
    withness: string
    previousChurch: string
    testimony: string
    conversionDate: Date | string
    status?: string | null
    baptismLocation: string
    endDate?: string | null
    startDate?: string | null
    church?: ChurchCreateNestedOneWithoutBatismInput
  }

  export type BaptismUncheckedCreateInput = {
    id?: string
    fullName: string
    birthDate: Date | string
    placeOfBirth: string
    baptismDate: Date | string
    baptismCertificate?: string | null
    officiantName: string
    withness: string
    previousChurch: string
    testimony: string
    churchId?: string | null
    conversionDate: Date | string
    status?: string | null
    baptismLocation: string
    endDate?: string | null
    startDate?: string | null
  }

  export type BaptismUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    baptismDate?: DateTimeFieldUpdateOperationsInput | Date | string
    baptismCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    withness?: StringFieldUpdateOperationsInput | string
    previousChurch?: StringFieldUpdateOperationsInput | string
    testimony?: StringFieldUpdateOperationsInput | string
    conversionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: StringFieldUpdateOperationsInput | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutBatismNestedInput
  }

  export type BaptismUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    baptismDate?: DateTimeFieldUpdateOperationsInput | Date | string
    baptismCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    withness?: StringFieldUpdateOperationsInput | string
    previousChurch?: StringFieldUpdateOperationsInput | string
    testimony?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    conversionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: StringFieldUpdateOperationsInput | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BaptismCreateManyInput = {
    id?: string
    fullName: string
    birthDate: Date | string
    placeOfBirth: string
    baptismDate: Date | string
    baptismCertificate?: string | null
    officiantName: string
    withness: string
    previousChurch: string
    testimony: string
    churchId?: string | null
    conversionDate: Date | string
    status?: string | null
    baptismLocation: string
    endDate?: string | null
    startDate?: string | null
  }

  export type BaptismUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    baptismDate?: DateTimeFieldUpdateOperationsInput | Date | string
    baptismCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    withness?: StringFieldUpdateOperationsInput | string
    previousChurch?: StringFieldUpdateOperationsInput | string
    testimony?: StringFieldUpdateOperationsInput | string
    conversionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: StringFieldUpdateOperationsInput | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BaptismUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    baptismDate?: DateTimeFieldUpdateOperationsInput | Date | string
    baptismCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    withness?: StringFieldUpdateOperationsInput | string
    previousChurch?: StringFieldUpdateOperationsInput | string
    testimony?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    conversionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: StringFieldUpdateOperationsInput | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deathCreateInput = {
    id?: string
    deathDate: Date | string
    deathPlace: string
    deathCause: string
    deathCertificate?: string | null
    deathTime: string
    description?: string | null
    location: string
    officiantName: string
    relationShip: string
    serviceDate: Date | string
    nextOfKin: string
    church?: ChurchCreateNestedOneWithoutDeathInput
  }

  export type deathUncheckedCreateInput = {
    id?: string
    deathDate: Date | string
    deathPlace: string
    deathCause: string
    deathCertificate?: string | null
    churchId?: string | null
    deathTime: string
    description?: string | null
    location: string
    officiantName: string
    relationShip: string
    serviceDate: Date | string
    nextOfKin: string
  }

  export type deathUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deathDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deathPlace?: StringFieldUpdateOperationsInput | string
    deathCause?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    deathTime?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    serviceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    nextOfKin?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutDeathNestedInput
  }

  export type deathUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deathDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deathPlace?: StringFieldUpdateOperationsInput | string
    deathCause?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    deathTime?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    serviceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    nextOfKin?: StringFieldUpdateOperationsInput | string
  }

  export type deathCreateManyInput = {
    id?: string
    deathDate: Date | string
    deathPlace: string
    deathCause: string
    deathCertificate?: string | null
    churchId?: string | null
    deathTime: string
    description?: string | null
    location: string
    officiantName: string
    relationShip: string
    serviceDate: Date | string
    nextOfKin: string
  }

  export type deathUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    deathDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deathPlace?: StringFieldUpdateOperationsInput | string
    deathCause?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    deathTime?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    serviceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    nextOfKin?: StringFieldUpdateOperationsInput | string
  }

  export type deathUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deathDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deathPlace?: StringFieldUpdateOperationsInput | string
    deathCause?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    deathTime?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    serviceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    nextOfKin?: StringFieldUpdateOperationsInput | string
  }

  export type sundayClassCreateInput = {
    id?: string
    nom: string
    teacher: string
    startTime: string
    endTime: string
    description: string
    createdAt?: Date | string
    maxStudents: string
    ageGroup: string
    book?: string | null
    church?: ChurchCreateNestedOneWithoutSundayClassInput
  }

  export type sundayClassUncheckedCreateInput = {
    id?: string
    nom: string
    teacher: string
    startTime: string
    endTime: string
    description: string
    churchId?: string | null
    createdAt?: Date | string
    maxStudents: string
    ageGroup: string
    book?: string | null
  }

  export type sundayClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    teacher?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maxStudents?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    book?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutSundayClassNestedInput
  }

  export type sundayClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    teacher?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maxStudents?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    book?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sundayClassCreateManyInput = {
    id?: string
    nom: string
    teacher: string
    startTime: string
    endTime: string
    description: string
    churchId?: string | null
    createdAt?: Date | string
    maxStudents: string
    ageGroup: string
    book?: string | null
  }

  export type sundayClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    teacher?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maxStudents?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    book?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sundayClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    teacher?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maxStudents?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    book?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type expenseCreateInput = {
    id?: string
    amount: number
    category: string
    date: Date | string
    paymentMethod: string
    description: string
    church?: ChurchCreateNestedOneWithoutExpenseInput
  }

  export type expenseUncheckedCreateInput = {
    id?: string
    amount: number
    category: string
    date: Date | string
    paymentMethod: string
    description: string
    churchId?: string | null
  }

  export type expenseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutExpenseNestedInput
  }

  export type expenseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type expenseCreateManyInput = {
    id?: string
    amount: number
    category: string
    date: Date | string
    paymentMethod: string
    description: string
    churchId?: string | null
  }

  export type expenseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type expenseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offeringCreateInput = {
    id?: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    status?: string | null
    church?: ChurchCreateNestedOneWithoutOfferingInput
  }

  export type offeringUncheckedCreateInput = {
    id?: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
    status?: string | null
  }

  export type offeringUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutOfferingNestedInput
  }

  export type offeringUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offeringCreateManyInput = {
    id?: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
    status?: string | null
  }

  export type offeringUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offeringUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tithingCreateInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    church?: ChurchCreateNestedOneWithoutTithingInput
  }

  export type tithingUncheckedCreateInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
  }

  export type tithingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutTithingNestedInput
  }

  export type tithingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tithingCreateManyInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
  }

  export type tithingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type tithingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type donationCreateInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    church?: ChurchCreateNestedOneWithoutDonationInput
  }

  export type donationUncheckedCreateInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
  }

  export type donationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutDonationNestedInput
  }

  export type donationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type donationCreateManyInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
  }

  export type donationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type donationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type moissonCreateInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    church?: ChurchCreateNestedOneWithoutMoissonInput
  }

  export type moissonUncheckedCreateInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
  }

  export type moissonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutMoissonNestedInput
  }

  export type moissonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type moissonCreateManyInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    churchId?: string | null
  }

  export type moissonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type moissonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type comiteeCreateInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    church?: ChurchCreateNestedOneWithoutComiteesInput
    commiteeLeader?: UserCreateNestedManyWithoutLeadingComitteesInput
    commiteeMember?: UserCreateNestedManyWithoutMemberComitteesInput
  }

  export type comiteeUncheckedCreateInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    churchId?: string | null
    commiteeLeader?: UserUncheckedCreateNestedManyWithoutLeadingComitteesInput
    commiteeMember?: UserUncheckedCreateNestedManyWithoutMemberComitteesInput
  }

  export type comiteeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutComiteesNestedInput
    commiteeLeader?: UserUpdateManyWithoutLeadingComitteesNestedInput
    commiteeMember?: UserUpdateManyWithoutMemberComitteesNestedInput
  }

  export type comiteeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    commiteeLeader?: UserUncheckedUpdateManyWithoutLeadingComitteesNestedInput
    commiteeMember?: UserUncheckedUpdateManyWithoutMemberComitteesNestedInput
  }

  export type comiteeCreateManyInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    churchId?: string | null
  }

  export type comiteeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type comiteeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentCreateInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church?: ChurchCreateNestedOneWithoutAppointmentsInput
    assignedUsers?: UserCreateNestedManyWithoutUserAppointmentsInput
  }

  export type appointmentUncheckedCreateInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutUserAppointmentsInput
  }

  export type appointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneWithoutAppointmentsNestedInput
    assignedUsers?: UserUpdateManyWithoutUserAppointmentsNestedInput
  }

  export type appointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutUserAppointmentsNestedInput
  }

  export type appointmentCreateManyInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type appointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type appointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transfertCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurch: ChurchCreateNestedOneWithoutTransfersFromInput
    toChurch: ChurchCreateNestedOneWithoutTransfersToInput
    member: UserCreateNestedOneWithoutTransfersInput
  }

  export type transfertUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurchId: string
    toChurchId: string
    userId: string
  }

  export type transfertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurch?: ChurchUpdateOneRequiredWithoutTransfersFromNestedInput
    toChurch?: ChurchUpdateOneRequiredWithoutTransfersToNestedInput
    member?: UserUpdateOneRequiredWithoutTransfersNestedInput
  }

  export type transfertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurchId?: StringFieldUpdateOperationsInput | string
    toChurchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type transfertCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurchId: string
    toChurchId: string
    userId: string
  }

  export type transfertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transfertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurchId?: StringFieldUpdateOperationsInput | string
    toChurchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MissionCreateInput = {
    id?: string
    missionName: string
    description: string
    status: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presidentName?: string | null
    church?: ChurchCreateNestedManyWithoutMissionInput
  }

  export type MissionUncheckedCreateInput = {
    id?: string
    missionName: string
    description: string
    status: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presidentName?: string | null
    church?: ChurchUncheckedCreateNestedManyWithoutMissionInput
  }

  export type MissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    missionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presidentName?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateManyWithoutMissionNestedInput
  }

  export type MissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    missionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presidentName?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUncheckedUpdateManyWithoutMissionNestedInput
  }

  export type MissionCreateManyInput = {
    id?: string
    missionName: string
    description: string
    status: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presidentName?: string | null
  }

  export type MissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    missionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presidentName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    missionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presidentName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sanctionCreateInput = {
    id?: string
    name: string
    description: string
    startDate: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    endDate?: string | null
    church?: ChurchCreateNestedOneWithoutSanctionInput
  }

  export type sanctionUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    startDate: string
    status: string
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDate?: string | null
  }

  export type sanctionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutSanctionNestedInput
  }

  export type sanctionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sanctionCreateManyInput = {
    id?: string
    name: string
    description: string
    startDate: string
    status: string
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    endDate?: string | null
  }

  export type sanctionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sanctionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ministryCreateInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church?: ChurchCreateNestedOneWithoutMinistryInput
  }

  export type ministryUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ministryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneWithoutMinistryNestedInput
  }

  export type ministryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ministryCreateManyInput = {
    id?: string
    name: string
    description: string
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ministryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ministryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pasteurCreateInput = {
    id?: string
    pasteurName: string
    address: string
    phone: string
    status: string
    email: string
    church?: ChurchCreateNestedOneWithoutPasteurInput
  }

  export type pasteurUncheckedCreateInput = {
    id?: string
    pasteurName: string
    churchId?: string | null
    address: string
    phone: string
    status: string
    email: string
  }

  export type pasteurUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pasteurName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutPasteurNestedInput
  }

  export type pasteurUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pasteurName?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type pasteurCreateManyInput = {
    id?: string
    pasteurName: string
    churchId?: string | null
    address: string
    phone: string
    status: string
    email: string
  }

  export type pasteurUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pasteurName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type pasteurUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pasteurName?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type DepartementCreateInput = {
    id?: string
    name: string
    commune?: CommuneCreateNestedManyWithoutDepartementInput
  }

  export type DepartementUncheckedCreateInput = {
    id?: string
    name: string
    commune?: CommuneUncheckedCreateNestedManyWithoutDepartementInput
  }

  export type DepartementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commune?: CommuneUpdateManyWithoutDepartementNestedInput
  }

  export type DepartementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commune?: CommuneUncheckedUpdateManyWithoutDepartementNestedInput
  }

  export type DepartementCreateManyInput = {
    id?: string
    name: string
  }

  export type DepartementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CommuneCreateInput = {
    id?: string
    name: string
    departement: DepartementCreateNestedOneWithoutCommuneInput
    sectionCommunale?: SectionCommunaleCreateNestedManyWithoutCommuneInput
  }

  export type CommuneUncheckedCreateInput = {
    id?: string
    name: string
    departementId: string
    sectionCommunale?: SectionCommunaleUncheckedCreateNestedManyWithoutCommuneInput
  }

  export type CommuneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departement?: DepartementUpdateOneRequiredWithoutCommuneNestedInput
    sectionCommunale?: SectionCommunaleUpdateManyWithoutCommuneNestedInput
  }

  export type CommuneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departementId?: StringFieldUpdateOperationsInput | string
    sectionCommunale?: SectionCommunaleUncheckedUpdateManyWithoutCommuneNestedInput
  }

  export type CommuneCreateManyInput = {
    id?: string
    name: string
    departementId: string
  }

  export type CommuneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CommuneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departementId?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCommunaleCreateInput = {
    id?: string
    name: string
    commune: CommuneCreateNestedOneWithoutSectionCommunaleInput
  }

  export type SectionCommunaleUncheckedCreateInput = {
    id?: string
    name: string
    communeId: string
  }

  export type SectionCommunaleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commune?: CommuneUpdateOneRequiredWithoutSectionCommunaleNestedInput
  }

  export type SectionCommunaleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    communeId?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCommunaleCreateManyInput = {
    id?: string
    name: string
    communeId: string
  }

  export type SectionCommunaleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCommunaleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    communeId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PresenceListRelationFilter = {
    every?: PresenceWhereInput
    some?: PresenceWhereInput
    none?: PresenceWhereInput
  }

  export type ChurchNullableScalarRelationFilter = {
    is?: ChurchWhereInput | null
    isNot?: ChurchWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PresenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelevanceInput = {
    fields: ServiceOrderByRelevanceFieldEnum | ServiceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    churchId?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    churchId?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    churchId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumStatutPresenceFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPresence | EnumStatutPresenceFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPresence[]
    notIn?: $Enums.StatutPresence[]
    not?: NestedEnumStatutPresenceFilter<$PrismaModel> | $Enums.StatutPresence
  }

  export type ServiceScalarRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PresenceOrderByRelevanceInput = {
    fields: PresenceOrderByRelevanceFieldEnum | PresenceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PresenceCountOrderByAggregateInput = {
    id?: SortOrder
    statut?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
  }

  export type PresenceMaxOrderByAggregateInput = {
    id?: SortOrder
    statut?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
  }

  export type PresenceMinOrderByAggregateInput = {
    id?: SortOrder
    statut?: SortOrder
    utilisateurId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceId?: SortOrder
  }

  export type EnumStatutPresenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPresence | EnumStatutPresenceFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPresence[]
    notIn?: $Enums.StatutPresence[]
    not?: NestedEnumStatutPresenceWithAggregatesFilter<$PrismaModel> | $Enums.StatutPresence
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutPresenceFilter<$PrismaModel>
    _max?: NestedEnumStatutPresenceFilter<$PrismaModel>
  }

  export type ChurchListRelationFilter = {
    every?: ChurchWhereInput
    some?: ChurchWhereInput
    none?: ChurchWhereInput
  }

  export type ChurchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TtiOrderByRelevanceInput = {
    fields: TtiOrderByRelevanceFieldEnum | TtiOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TtiCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TtiMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TtiMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressOrderByRelevanceInput = {
    fields: AddressOrderByRelevanceFieldEnum | AddressOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    departement?: SortOrder
    commune?: SortOrder
    sectionCommunale?: SortOrder
    telephone?: SortOrder
    rue?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    departement?: SortOrder
    commune?: SortOrder
    sectionCommunale?: SortOrder
    telephone?: SortOrder
    rue?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    departement?: SortOrder
    commune?: SortOrder
    sectionCommunale?: SortOrder
    telephone?: SortOrder
    rue?: SortOrder
  }

  export type BaptismListRelationFilter = {
    every?: BaptismWhereInput
    some?: BaptismWhereInput
    none?: BaptismWhereInput
  }

  export type AddressNullableScalarRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type MissionNullableScalarRelationFilter = {
    is?: MissionWhereInput | null
    isNot?: MissionWhereInput | null
  }

  export type TtiNullableScalarRelationFilter = {
    is?: TtiWhereInput | null
    isNot?: TtiWhereInput | null
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type FuneralListRelationFilter = {
    every?: FuneralWhereInput
    some?: FuneralWhereInput
    none?: FuneralWhereInput
  }

  export type GroupeListRelationFilter = {
    every?: GroupeWhereInput
    some?: GroupeWhereInput
    none?: GroupeWhereInput
  }

  export type MariageListRelationFilter = {
    every?: MariageWhereInput
    some?: MariageWhereInput
    none?: MariageWhereInput
  }

  export type PresentationListRelationFilter = {
    every?: PresentationWhereInput
    some?: PresentationWhereInput
    none?: PresentationWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: appointmentWhereInput
    some?: appointmentWhereInput
    none?: appointmentWhereInput
  }

  export type ComiteeListRelationFilter = {
    every?: comiteeWhereInput
    some?: comiteeWhereInput
    none?: comiteeWhereInput
  }

  export type DeathListRelationFilter = {
    every?: deathWhereInput
    some?: deathWhereInput
    none?: deathWhereInput
  }

  export type DonationListRelationFilter = {
    every?: donationWhereInput
    some?: donationWhereInput
    none?: donationWhereInput
  }

  export type ExpenseListRelationFilter = {
    every?: expenseWhereInput
    some?: expenseWhereInput
    none?: expenseWhereInput
  }

  export type MinistryListRelationFilter = {
    every?: ministryWhereInput
    some?: ministryWhereInput
    none?: ministryWhereInput
  }

  export type MoissonListRelationFilter = {
    every?: moissonWhereInput
    some?: moissonWhereInput
    none?: moissonWhereInput
  }

  export type OfferingListRelationFilter = {
    every?: offeringWhereInput
    some?: offeringWhereInput
    none?: offeringWhereInput
  }

  export type PasteurListRelationFilter = {
    every?: pasteurWhereInput
    some?: pasteurWhereInput
    none?: pasteurWhereInput
  }

  export type SanctionListRelationFilter = {
    every?: sanctionWhereInput
    some?: sanctionWhereInput
    none?: sanctionWhereInput
  }

  export type SundayClassListRelationFilter = {
    every?: sundayClassWhereInput
    some?: sundayClassWhereInput
    none?: sundayClassWhereInput
  }

  export type TithingListRelationFilter = {
    every?: tithingWhereInput
    some?: tithingWhereInput
    none?: tithingWhereInput
  }

  export type TransfertListRelationFilter = {
    every?: transfertWhereInput
    some?: transfertWhereInput
    none?: transfertWhereInput
  }

  export type BaptismOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FuneralOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MariageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PresentationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type appointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type comiteeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type deathOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type donationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type expenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ministryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type moissonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type offeringOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pasteurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sanctionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sundayClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tithingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transfertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchOrderByRelevanceInput = {
    fields: ChurchOrderByRelevanceFieldEnum | ChurchOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChurchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    anthem?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrder
    missionId?: SortOrder
    email?: SortOrder
    mainPasteur?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    ttiId?: SortOrder
    addressId?: SortOrder
  }

  export type ChurchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    anthem?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrder
    missionId?: SortOrder
    email?: SortOrder
    mainPasteur?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    ttiId?: SortOrder
    addressId?: SortOrder
  }

  export type ChurchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    anthem?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    picture?: SortOrder
    missionId?: SortOrder
    email?: SortOrder
    mainPasteur?: SortOrder
    whatsapp?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    ttiId?: SortOrder
    addressId?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    baptismDate?: SortOrder
    baptismLocation?: SortOrder
    birthCity?: SortOrder
    birthCountry?: SortOrder
    birthDate?: SortOrder
    churchId?: SortOrder
    churchRole?: SortOrder
    city?: SortOrder
    country?: SortOrder
    envelopeNumber?: SortOrder
    etatCivil?: SortOrder
    facebook?: SortOrder
    firstname?: SortOrder
    instagram?: SortOrder
    password?: SortOrder
    picture?: SortOrder
    profession?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    sundayClass?: SortOrder
    lastname?: SortOrder
    membreActif?: SortOrder
    addressLine?: SortOrder
    homePhone?: SortOrder
    joinDate?: SortOrder
    mobilePhone?: SortOrder
    age?: SortOrder
    minister?: SortOrder
    plainPassword?: SortOrder
    personToContact?: SortOrder
    spouseFullName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    nif?: SortOrder
    groupeSanguin?: SortOrder
    istimothee?: SortOrder
    timotheeId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    baptismDate?: SortOrder
    baptismLocation?: SortOrder
    birthCity?: SortOrder
    birthCountry?: SortOrder
    birthDate?: SortOrder
    churchId?: SortOrder
    churchRole?: SortOrder
    city?: SortOrder
    country?: SortOrder
    envelopeNumber?: SortOrder
    etatCivil?: SortOrder
    facebook?: SortOrder
    firstname?: SortOrder
    instagram?: SortOrder
    password?: SortOrder
    picture?: SortOrder
    profession?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    sundayClass?: SortOrder
    lastname?: SortOrder
    membreActif?: SortOrder
    addressLine?: SortOrder
    homePhone?: SortOrder
    joinDate?: SortOrder
    mobilePhone?: SortOrder
    age?: SortOrder
    minister?: SortOrder
    plainPassword?: SortOrder
    personToContact?: SortOrder
    spouseFullName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    nif?: SortOrder
    groupeSanguin?: SortOrder
    istimothee?: SortOrder
    timotheeId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    baptismDate?: SortOrder
    baptismLocation?: SortOrder
    birthCity?: SortOrder
    birthCountry?: SortOrder
    birthDate?: SortOrder
    churchId?: SortOrder
    churchRole?: SortOrder
    city?: SortOrder
    country?: SortOrder
    envelopeNumber?: SortOrder
    etatCivil?: SortOrder
    facebook?: SortOrder
    firstname?: SortOrder
    instagram?: SortOrder
    password?: SortOrder
    picture?: SortOrder
    profession?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    sundayClass?: SortOrder
    lastname?: SortOrder
    membreActif?: SortOrder
    addressLine?: SortOrder
    homePhone?: SortOrder
    joinDate?: SortOrder
    mobilePhone?: SortOrder
    age?: SortOrder
    minister?: SortOrder
    plainPassword?: SortOrder
    personToContact?: SortOrder
    spouseFullName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    nif?: SortOrder
    groupeSanguin?: SortOrder
    istimothee?: SortOrder
    timotheeId?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type GroupeOrderByRelevanceInput = {
    fields: GroupeOrderByRelevanceFieldEnum | GroupeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GroupeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    picture?: SortOrder
    showToMembers?: SortOrder
    showToNonMembers?: SortOrder
    showMembers?: SortOrder
    showLeaders?: SortOrder
    meetingDays?: SortOrder
    meetingTime?: SortOrder
    meetingLocation?: SortOrder
    meetingFrequency?: SortOrder
    maxMembers?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ageGroup?: SortOrder
    minister?: SortOrder
  }

  export type GroupeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    picture?: SortOrder
    showToMembers?: SortOrder
    showToNonMembers?: SortOrder
    showMembers?: SortOrder
    showLeaders?: SortOrder
    meetingDays?: SortOrder
    meetingTime?: SortOrder
    meetingLocation?: SortOrder
    meetingFrequency?: SortOrder
    maxMembers?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ageGroup?: SortOrder
    minister?: SortOrder
  }

  export type GroupeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    picture?: SortOrder
    showToMembers?: SortOrder
    showToNonMembers?: SortOrder
    showMembers?: SortOrder
    showLeaders?: SortOrder
    meetingDays?: SortOrder
    meetingTime?: SortOrder
    meetingLocation?: SortOrder
    meetingFrequency?: SortOrder
    maxMembers?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ageGroup?: SortOrder
    minister?: SortOrder
  }

  export type EventOrderByRelevanceInput = {
    fields: EventOrderByRelevanceFieldEnum | EventOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    churchId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isRecurring?: SortOrder
    endPeriode?: SortOrder
    startPeriode?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    churchId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isRecurring?: SortOrder
    endPeriode?: SortOrder
    startPeriode?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    frequency?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    churchId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isRecurring?: SortOrder
    endPeriode?: SortOrder
    startPeriode?: SortOrder
  }

  export type MariageOrderByRelevanceInput = {
    fields: MariageOrderByRelevanceFieldEnum | MariageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MariageCountOrderByAggregateInput = {
    id?: SortOrder
    brideFullname?: SortOrder
    birthDate?: SortOrder
    groomFullname?: SortOrder
    goomBirthDate?: SortOrder
    weddingDate?: SortOrder
    weddingLocation?: SortOrder
    weddingCertificate?: SortOrder
    officiantName?: SortOrder
    churchId?: SortOrder
    brideCertificate?: SortOrder
    civilStateOfficer?: SortOrder
    grooomCertificate?: SortOrder
    witness?: SortOrder
    civilStateStateOfficer?: SortOrder
    witnessSignature?: SortOrder
  }

  export type MariageMaxOrderByAggregateInput = {
    id?: SortOrder
    brideFullname?: SortOrder
    birthDate?: SortOrder
    groomFullname?: SortOrder
    goomBirthDate?: SortOrder
    weddingDate?: SortOrder
    weddingLocation?: SortOrder
    weddingCertificate?: SortOrder
    officiantName?: SortOrder
    churchId?: SortOrder
    brideCertificate?: SortOrder
    civilStateOfficer?: SortOrder
    grooomCertificate?: SortOrder
    witness?: SortOrder
    civilStateStateOfficer?: SortOrder
    witnessSignature?: SortOrder
  }

  export type MariageMinOrderByAggregateInput = {
    id?: SortOrder
    brideFullname?: SortOrder
    birthDate?: SortOrder
    groomFullname?: SortOrder
    goomBirthDate?: SortOrder
    weddingDate?: SortOrder
    weddingLocation?: SortOrder
    weddingCertificate?: SortOrder
    officiantName?: SortOrder
    churchId?: SortOrder
    brideCertificate?: SortOrder
    civilStateOfficer?: SortOrder
    grooomCertificate?: SortOrder
    witness?: SortOrder
    civilStateStateOfficer?: SortOrder
    witnessSignature?: SortOrder
  }

  export type FuneralOrderByRelevanceInput = {
    fields: FuneralOrderByRelevanceFieldEnum | FuneralOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FuneralCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    birthDate?: SortOrder
    funeralDate?: SortOrder
    funeralTime?: SortOrder
    relationShip?: SortOrder
    email?: SortOrder
    deathCertificate?: SortOrder
    nextOfKin?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    funeralLocation?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
    telephone?: SortOrder
  }

  export type FuneralMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    birthDate?: SortOrder
    funeralDate?: SortOrder
    funeralTime?: SortOrder
    relationShip?: SortOrder
    email?: SortOrder
    deathCertificate?: SortOrder
    nextOfKin?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    funeralLocation?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
    telephone?: SortOrder
  }

  export type FuneralMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    birthDate?: SortOrder
    funeralDate?: SortOrder
    funeralTime?: SortOrder
    relationShip?: SortOrder
    email?: SortOrder
    deathCertificate?: SortOrder
    nextOfKin?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    funeralLocation?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
    telephone?: SortOrder
  }

  export type PresentationOrderByRelevanceInput = {
    fields: PresentationOrderByRelevanceFieldEnum | PresentationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PresentationCountOrderByAggregateInput = {
    id?: SortOrder
    placeOfBirth?: SortOrder
    birthCertificate?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    presentationDate?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    childName?: SortOrder
    dateOfBirth?: SortOrder
    witness?: SortOrder
  }

  export type PresentationMaxOrderByAggregateInput = {
    id?: SortOrder
    placeOfBirth?: SortOrder
    birthCertificate?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    presentationDate?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    childName?: SortOrder
    dateOfBirth?: SortOrder
    witness?: SortOrder
  }

  export type PresentationMinOrderByAggregateInput = {
    id?: SortOrder
    placeOfBirth?: SortOrder
    birthCertificate?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    presentationDate?: SortOrder
    officiantName?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    childName?: SortOrder
    dateOfBirth?: SortOrder
    witness?: SortOrder
  }

  export type BaptismOrderByRelevanceInput = {
    fields: BaptismOrderByRelevanceFieldEnum | BaptismOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BaptismCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    birthDate?: SortOrder
    placeOfBirth?: SortOrder
    baptismDate?: SortOrder
    baptismCertificate?: SortOrder
    officiantName?: SortOrder
    withness?: SortOrder
    previousChurch?: SortOrder
    testimony?: SortOrder
    churchId?: SortOrder
    conversionDate?: SortOrder
    status?: SortOrder
    baptismLocation?: SortOrder
    endDate?: SortOrder
    startDate?: SortOrder
  }

  export type BaptismMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    birthDate?: SortOrder
    placeOfBirth?: SortOrder
    baptismDate?: SortOrder
    baptismCertificate?: SortOrder
    officiantName?: SortOrder
    withness?: SortOrder
    previousChurch?: SortOrder
    testimony?: SortOrder
    churchId?: SortOrder
    conversionDate?: SortOrder
    status?: SortOrder
    baptismLocation?: SortOrder
    endDate?: SortOrder
    startDate?: SortOrder
  }

  export type BaptismMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    birthDate?: SortOrder
    placeOfBirth?: SortOrder
    baptismDate?: SortOrder
    baptismCertificate?: SortOrder
    officiantName?: SortOrder
    withness?: SortOrder
    previousChurch?: SortOrder
    testimony?: SortOrder
    churchId?: SortOrder
    conversionDate?: SortOrder
    status?: SortOrder
    baptismLocation?: SortOrder
    endDate?: SortOrder
    startDate?: SortOrder
  }

  export type deathOrderByRelevanceInput = {
    fields: deathOrderByRelevanceFieldEnum | deathOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type deathCountOrderByAggregateInput = {
    id?: SortOrder
    deathDate?: SortOrder
    deathPlace?: SortOrder
    deathCause?: SortOrder
    deathCertificate?: SortOrder
    churchId?: SortOrder
    deathTime?: SortOrder
    description?: SortOrder
    location?: SortOrder
    officiantName?: SortOrder
    relationShip?: SortOrder
    serviceDate?: SortOrder
    nextOfKin?: SortOrder
  }

  export type deathMaxOrderByAggregateInput = {
    id?: SortOrder
    deathDate?: SortOrder
    deathPlace?: SortOrder
    deathCause?: SortOrder
    deathCertificate?: SortOrder
    churchId?: SortOrder
    deathTime?: SortOrder
    description?: SortOrder
    location?: SortOrder
    officiantName?: SortOrder
    relationShip?: SortOrder
    serviceDate?: SortOrder
    nextOfKin?: SortOrder
  }

  export type deathMinOrderByAggregateInput = {
    id?: SortOrder
    deathDate?: SortOrder
    deathPlace?: SortOrder
    deathCause?: SortOrder
    deathCertificate?: SortOrder
    churchId?: SortOrder
    deathTime?: SortOrder
    description?: SortOrder
    location?: SortOrder
    officiantName?: SortOrder
    relationShip?: SortOrder
    serviceDate?: SortOrder
    nextOfKin?: SortOrder
  }

  export type sundayClassOrderByRelevanceInput = {
    fields: sundayClassOrderByRelevanceFieldEnum | sundayClassOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type sundayClassCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    teacher?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    maxStudents?: SortOrder
    ageGroup?: SortOrder
    book?: SortOrder
  }

  export type sundayClassMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    teacher?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    maxStudents?: SortOrder
    ageGroup?: SortOrder
    book?: SortOrder
  }

  export type sundayClassMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    teacher?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    maxStudents?: SortOrder
    ageGroup?: SortOrder
    book?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type expenseOrderByRelevanceInput = {
    fields: expenseOrderByRelevanceFieldEnum | expenseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type expenseCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    category?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
  }

  export type expenseAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type expenseMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    category?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
  }

  export type expenseMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    category?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
  }

  export type expenseSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type offeringOrderByRelevanceInput = {
    fields: offeringOrderByRelevanceFieldEnum | offeringOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type offeringCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
    status?: SortOrder
  }

  export type offeringAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type offeringMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
    status?: SortOrder
  }

  export type offeringMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
    status?: SortOrder
  }

  export type offeringSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type tithingOrderByRelevanceInput = {
    fields: tithingOrderByRelevanceFieldEnum | tithingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type tithingCountOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type tithingAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type tithingMaxOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type tithingMinOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type tithingSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type donationOrderByRelevanceInput = {
    fields: donationOrderByRelevanceFieldEnum | donationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type donationCountOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type donationAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type donationMaxOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type donationMinOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type donationSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type moissonOrderByRelevanceInput = {
    fields: moissonOrderByRelevanceFieldEnum | moissonOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type moissonCountOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type moissonAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type moissonMaxOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type moissonMinOrderByAggregateInput = {
    id?: SortOrder
    contributorName?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    paymentMethod?: SortOrder
    note?: SortOrder
    churchId?: SortOrder
  }

  export type moissonSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type comiteeOrderByRelevanceInput = {
    fields: comiteeOrderByRelevanceFieldEnum | comiteeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type comiteeCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    meetingDay?: SortOrder
    meetingTime?: SortOrder
    name?: SortOrder
    churchId?: SortOrder
  }

  export type comiteeMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    meetingDay?: SortOrder
    meetingTime?: SortOrder
    name?: SortOrder
    churchId?: SortOrder
  }

  export type comiteeMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    meetingDay?: SortOrder
    meetingTime?: SortOrder
    name?: SortOrder
    churchId?: SortOrder
  }

  export type appointmentOrderByRelevanceInput = {
    fields: appointmentOrderByRelevanceFieldEnum | appointmentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type appointmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    visibility?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type appointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    visibility?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type appointmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    visibility?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchScalarRelationFilter = {
    is?: ChurchWhereInput
    isNot?: ChurchWhereInput
  }

  export type transfertOrderByRelevanceInput = {
    fields: transfertOrderByRelevanceFieldEnum | transfertOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type transfertCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromChurchId?: SortOrder
    toChurchId?: SortOrder
    userId?: SortOrder
  }

  export type transfertMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromChurchId?: SortOrder
    toChurchId?: SortOrder
    userId?: SortOrder
  }

  export type transfertMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromChurchId?: SortOrder
    toChurchId?: SortOrder
    userId?: SortOrder
  }

  export type MissionOrderByRelevanceInput = {
    fields: MissionOrderByRelevanceFieldEnum | MissionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MissionCountOrderByAggregateInput = {
    id?: SortOrder
    missionName?: SortOrder
    description?: SortOrder
    status?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    presidentName?: SortOrder
  }

  export type MissionMaxOrderByAggregateInput = {
    id?: SortOrder
    missionName?: SortOrder
    description?: SortOrder
    status?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    presidentName?: SortOrder
  }

  export type MissionMinOrderByAggregateInput = {
    id?: SortOrder
    missionName?: SortOrder
    description?: SortOrder
    status?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    presidentName?: SortOrder
  }

  export type sanctionOrderByRelevanceInput = {
    fields: sanctionOrderByRelevanceFieldEnum | sanctionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type sanctionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    endDate?: SortOrder
  }

  export type sanctionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    endDate?: SortOrder
  }

  export type sanctionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    status?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    endDate?: SortOrder
  }

  export type ministryOrderByRelevanceInput = {
    fields: ministryOrderByRelevanceFieldEnum | ministryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ministryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ministryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ministryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type pasteurOrderByRelevanceInput = {
    fields: pasteurOrderByRelevanceFieldEnum | pasteurOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type pasteurCountOrderByAggregateInput = {
    id?: SortOrder
    pasteurName?: SortOrder
    churchId?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    email?: SortOrder
  }

  export type pasteurMaxOrderByAggregateInput = {
    id?: SortOrder
    pasteurName?: SortOrder
    churchId?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    email?: SortOrder
  }

  export type pasteurMinOrderByAggregateInput = {
    id?: SortOrder
    pasteurName?: SortOrder
    churchId?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    email?: SortOrder
  }

  export type CommuneListRelationFilter = {
    every?: CommuneWhereInput
    some?: CommuneWhereInput
    none?: CommuneWhereInput
  }

  export type CommuneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartementOrderByRelevanceInput = {
    fields: DepartementOrderByRelevanceFieldEnum | DepartementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DepartementCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartementMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartementMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartementScalarRelationFilter = {
    is?: DepartementWhereInput
    isNot?: DepartementWhereInput
  }

  export type SectionCommunaleListRelationFilter = {
    every?: SectionCommunaleWhereInput
    some?: SectionCommunaleWhereInput
    none?: SectionCommunaleWhereInput
  }

  export type SectionCommunaleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommuneOrderByRelevanceInput = {
    fields: CommuneOrderByRelevanceFieldEnum | CommuneOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CommuneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    departementId?: SortOrder
  }

  export type CommuneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    departementId?: SortOrder
  }

  export type CommuneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    departementId?: SortOrder
  }

  export type CommuneScalarRelationFilter = {
    is?: CommuneWhereInput
    isNot?: CommuneWhereInput
  }

  export type SectionCommunaleOrderByRelevanceInput = {
    fields: SectionCommunaleOrderByRelevanceFieldEnum | SectionCommunaleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SectionCommunaleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    communeId?: SortOrder
  }

  export type SectionCommunaleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    communeId?: SortOrder
  }

  export type SectionCommunaleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    communeId?: SortOrder
  }

  export type PresenceCreateNestedManyWithoutServiceInput = {
    create?: XOR<PresenceCreateWithoutServiceInput, PresenceUncheckedCreateWithoutServiceInput> | PresenceCreateWithoutServiceInput[] | PresenceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutServiceInput | PresenceCreateOrConnectWithoutServiceInput[]
    createMany?: PresenceCreateManyServiceInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type ChurchCreateNestedOneWithoutServicesInput = {
    create?: XOR<ChurchCreateWithoutServicesInput, ChurchUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutServicesInput
    connect?: ChurchWhereUniqueInput
  }

  export type PresenceUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<PresenceCreateWithoutServiceInput, PresenceUncheckedCreateWithoutServiceInput> | PresenceCreateWithoutServiceInput[] | PresenceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutServiceInput | PresenceCreateOrConnectWithoutServiceInput[]
    createMany?: PresenceCreateManyServiceInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PresenceUpdateManyWithoutServiceNestedInput = {
    create?: XOR<PresenceCreateWithoutServiceInput, PresenceUncheckedCreateWithoutServiceInput> | PresenceCreateWithoutServiceInput[] | PresenceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutServiceInput | PresenceCreateOrConnectWithoutServiceInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutServiceInput | PresenceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: PresenceCreateManyServiceInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutServiceInput | PresenceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutServiceInput | PresenceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type ChurchUpdateOneWithoutServicesNestedInput = {
    create?: XOR<ChurchCreateWithoutServicesInput, ChurchUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutServicesInput
    upsert?: ChurchUpsertWithoutServicesInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutServicesInput, ChurchUpdateWithoutServicesInput>, ChurchUncheckedUpdateWithoutServicesInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PresenceUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<PresenceCreateWithoutServiceInput, PresenceUncheckedCreateWithoutServiceInput> | PresenceCreateWithoutServiceInput[] | PresenceUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutServiceInput | PresenceCreateOrConnectWithoutServiceInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutServiceInput | PresenceUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: PresenceCreateManyServiceInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutServiceInput | PresenceUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutServiceInput | PresenceUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type ServiceCreateNestedOneWithoutPresencesInput = {
    create?: XOR<ServiceCreateWithoutPresencesInput, ServiceUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutPresencesInput
    connect?: ServiceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPresencesInput = {
    create?: XOR<UserCreateWithoutPresencesInput, UserUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPresencesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStatutPresenceFieldUpdateOperationsInput = {
    set?: $Enums.StatutPresence
  }

  export type ServiceUpdateOneRequiredWithoutPresencesNestedInput = {
    create?: XOR<ServiceCreateWithoutPresencesInput, ServiceUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutPresencesInput
    upsert?: ServiceUpsertWithoutPresencesInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutPresencesInput, ServiceUpdateWithoutPresencesInput>, ServiceUncheckedUpdateWithoutPresencesInput>
  }

  export type UserUpdateOneRequiredWithoutPresencesNestedInput = {
    create?: XOR<UserCreateWithoutPresencesInput, UserUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPresencesInput
    upsert?: UserUpsertWithoutPresencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPresencesInput, UserUpdateWithoutPresencesInput>, UserUncheckedUpdateWithoutPresencesInput>
  }

  export type ChurchCreateNestedManyWithoutTtiInput = {
    create?: XOR<ChurchCreateWithoutTtiInput, ChurchUncheckedCreateWithoutTtiInput> | ChurchCreateWithoutTtiInput[] | ChurchUncheckedCreateWithoutTtiInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutTtiInput | ChurchCreateOrConnectWithoutTtiInput[]
    createMany?: ChurchCreateManyTtiInputEnvelope
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
  }

  export type ChurchUncheckedCreateNestedManyWithoutTtiInput = {
    create?: XOR<ChurchCreateWithoutTtiInput, ChurchUncheckedCreateWithoutTtiInput> | ChurchCreateWithoutTtiInput[] | ChurchUncheckedCreateWithoutTtiInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutTtiInput | ChurchCreateOrConnectWithoutTtiInput[]
    createMany?: ChurchCreateManyTtiInputEnvelope
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
  }

  export type ChurchUpdateManyWithoutTtiNestedInput = {
    create?: XOR<ChurchCreateWithoutTtiInput, ChurchUncheckedCreateWithoutTtiInput> | ChurchCreateWithoutTtiInput[] | ChurchUncheckedCreateWithoutTtiInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutTtiInput | ChurchCreateOrConnectWithoutTtiInput[]
    upsert?: ChurchUpsertWithWhereUniqueWithoutTtiInput | ChurchUpsertWithWhereUniqueWithoutTtiInput[]
    createMany?: ChurchCreateManyTtiInputEnvelope
    set?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    disconnect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    delete?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    update?: ChurchUpdateWithWhereUniqueWithoutTtiInput | ChurchUpdateWithWhereUniqueWithoutTtiInput[]
    updateMany?: ChurchUpdateManyWithWhereWithoutTtiInput | ChurchUpdateManyWithWhereWithoutTtiInput[]
    deleteMany?: ChurchScalarWhereInput | ChurchScalarWhereInput[]
  }

  export type ChurchUncheckedUpdateManyWithoutTtiNestedInput = {
    create?: XOR<ChurchCreateWithoutTtiInput, ChurchUncheckedCreateWithoutTtiInput> | ChurchCreateWithoutTtiInput[] | ChurchUncheckedCreateWithoutTtiInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutTtiInput | ChurchCreateOrConnectWithoutTtiInput[]
    upsert?: ChurchUpsertWithWhereUniqueWithoutTtiInput | ChurchUpsertWithWhereUniqueWithoutTtiInput[]
    createMany?: ChurchCreateManyTtiInputEnvelope
    set?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    disconnect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    delete?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    update?: ChurchUpdateWithWhereUniqueWithoutTtiInput | ChurchUpdateWithWhereUniqueWithoutTtiInput[]
    updateMany?: ChurchUpdateManyWithWhereWithoutTtiInput | ChurchUpdateManyWithWhereWithoutTtiInput[]
    deleteMany?: ChurchScalarWhereInput | ChurchScalarWhereInput[]
  }

  export type ChurchCreateNestedOneWithoutFullAddressInput = {
    create?: XOR<ChurchCreateWithoutFullAddressInput, ChurchUncheckedCreateWithoutFullAddressInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFullAddressInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUncheckedCreateNestedOneWithoutFullAddressInput = {
    create?: XOR<ChurchCreateWithoutFullAddressInput, ChurchUncheckedCreateWithoutFullAddressInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFullAddressInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutFullAddressNestedInput = {
    create?: XOR<ChurchCreateWithoutFullAddressInput, ChurchUncheckedCreateWithoutFullAddressInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFullAddressInput
    upsert?: ChurchUpsertWithoutFullAddressInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutFullAddressInput, ChurchUpdateWithoutFullAddressInput>, ChurchUncheckedUpdateWithoutFullAddressInput>
  }

  export type ChurchUncheckedUpdateOneWithoutFullAddressNestedInput = {
    create?: XOR<ChurchCreateWithoutFullAddressInput, ChurchUncheckedCreateWithoutFullAddressInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFullAddressInput
    upsert?: ChurchUpsertWithoutFullAddressInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutFullAddressInput, ChurchUpdateWithoutFullAddressInput>, ChurchUncheckedUpdateWithoutFullAddressInput>
  }

  export type BaptismCreateNestedManyWithoutChurchInput = {
    create?: XOR<BaptismCreateWithoutChurchInput, BaptismUncheckedCreateWithoutChurchInput> | BaptismCreateWithoutChurchInput[] | BaptismUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: BaptismCreateOrConnectWithoutChurchInput | BaptismCreateOrConnectWithoutChurchInput[]
    createMany?: BaptismCreateManyChurchInputEnvelope
    connect?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
  }

  export type AddressCreateNestedOneWithoutChurchInput = {
    create?: XOR<AddressCreateWithoutChurchInput, AddressUncheckedCreateWithoutChurchInput>
    connectOrCreate?: AddressCreateOrConnectWithoutChurchInput
    connect?: AddressWhereUniqueInput
  }

  export type MissionCreateNestedOneWithoutChurchInput = {
    create?: XOR<MissionCreateWithoutChurchInput, MissionUncheckedCreateWithoutChurchInput>
    connectOrCreate?: MissionCreateOrConnectWithoutChurchInput
    connect?: MissionWhereUniqueInput
  }

  export type TtiCreateNestedOneWithoutChurchInput = {
    create?: XOR<TtiCreateWithoutChurchInput, TtiUncheckedCreateWithoutChurchInput>
    connectOrCreate?: TtiCreateOrConnectWithoutChurchInput
    connect?: TtiWhereUniqueInput
  }

  export type EventCreateNestedManyWithoutChurchInput = {
    create?: XOR<EventCreateWithoutChurchInput, EventUncheckedCreateWithoutChurchInput> | EventCreateWithoutChurchInput[] | EventUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: EventCreateOrConnectWithoutChurchInput | EventCreateOrConnectWithoutChurchInput[]
    createMany?: EventCreateManyChurchInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type FuneralCreateNestedManyWithoutChurchInput = {
    create?: XOR<FuneralCreateWithoutChurchInput, FuneralUncheckedCreateWithoutChurchInput> | FuneralCreateWithoutChurchInput[] | FuneralUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: FuneralCreateOrConnectWithoutChurchInput | FuneralCreateOrConnectWithoutChurchInput[]
    createMany?: FuneralCreateManyChurchInputEnvelope
    connect?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
  }

  export type GroupeCreateNestedManyWithoutChurchInput = {
    create?: XOR<GroupeCreateWithoutChurchInput, GroupeUncheckedCreateWithoutChurchInput> | GroupeCreateWithoutChurchInput[] | GroupeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutChurchInput | GroupeCreateOrConnectWithoutChurchInput[]
    createMany?: GroupeCreateManyChurchInputEnvelope
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
  }

  export type MariageCreateNestedManyWithoutChurchInput = {
    create?: XOR<MariageCreateWithoutChurchInput, MariageUncheckedCreateWithoutChurchInput> | MariageCreateWithoutChurchInput[] | MariageUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MariageCreateOrConnectWithoutChurchInput | MariageCreateOrConnectWithoutChurchInput[]
    createMany?: MariageCreateManyChurchInputEnvelope
    connect?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
  }

  export type PresentationCreateNestedManyWithoutChurchInput = {
    create?: XOR<PresentationCreateWithoutChurchInput, PresentationUncheckedCreateWithoutChurchInput> | PresentationCreateWithoutChurchInput[] | PresentationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutChurchInput | PresentationCreateOrConnectWithoutChurchInput[]
    createMany?: PresentationCreateManyChurchInputEnvelope
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutChurchInput = {
    create?: XOR<ServiceCreateWithoutChurchInput, ServiceUncheckedCreateWithoutChurchInput> | ServiceCreateWithoutChurchInput[] | ServiceUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutChurchInput | ServiceCreateOrConnectWithoutChurchInput[]
    createMany?: ServiceCreateManyChurchInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutChurchInput = {
    create?: XOR<UserCreateWithoutChurchInput, UserUncheckedCreateWithoutChurchInput> | UserCreateWithoutChurchInput[] | UserUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutChurchInput | UserCreateOrConnectWithoutChurchInput[]
    createMany?: UserCreateManyChurchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type appointmentCreateNestedManyWithoutChurchInput = {
    create?: XOR<appointmentCreateWithoutChurchInput, appointmentUncheckedCreateWithoutChurchInput> | appointmentCreateWithoutChurchInput[] | appointmentUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutChurchInput | appointmentCreateOrConnectWithoutChurchInput[]
    createMany?: appointmentCreateManyChurchInputEnvelope
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
  }

  export type comiteeCreateNestedManyWithoutChurchInput = {
    create?: XOR<comiteeCreateWithoutChurchInput, comiteeUncheckedCreateWithoutChurchInput> | comiteeCreateWithoutChurchInput[] | comiteeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutChurchInput | comiteeCreateOrConnectWithoutChurchInput[]
    createMany?: comiteeCreateManyChurchInputEnvelope
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
  }

  export type deathCreateNestedManyWithoutChurchInput = {
    create?: XOR<deathCreateWithoutChurchInput, deathUncheckedCreateWithoutChurchInput> | deathCreateWithoutChurchInput[] | deathUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: deathCreateOrConnectWithoutChurchInput | deathCreateOrConnectWithoutChurchInput[]
    createMany?: deathCreateManyChurchInputEnvelope
    connect?: deathWhereUniqueInput | deathWhereUniqueInput[]
  }

  export type donationCreateNestedManyWithoutChurchInput = {
    create?: XOR<donationCreateWithoutChurchInput, donationUncheckedCreateWithoutChurchInput> | donationCreateWithoutChurchInput[] | donationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: donationCreateOrConnectWithoutChurchInput | donationCreateOrConnectWithoutChurchInput[]
    createMany?: donationCreateManyChurchInputEnvelope
    connect?: donationWhereUniqueInput | donationWhereUniqueInput[]
  }

  export type expenseCreateNestedManyWithoutChurchInput = {
    create?: XOR<expenseCreateWithoutChurchInput, expenseUncheckedCreateWithoutChurchInput> | expenseCreateWithoutChurchInput[] | expenseUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutChurchInput | expenseCreateOrConnectWithoutChurchInput[]
    createMany?: expenseCreateManyChurchInputEnvelope
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
  }

  export type ministryCreateNestedManyWithoutChurchInput = {
    create?: XOR<ministryCreateWithoutChurchInput, ministryUncheckedCreateWithoutChurchInput> | ministryCreateWithoutChurchInput[] | ministryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ministryCreateOrConnectWithoutChurchInput | ministryCreateOrConnectWithoutChurchInput[]
    createMany?: ministryCreateManyChurchInputEnvelope
    connect?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
  }

  export type moissonCreateNestedManyWithoutChurchInput = {
    create?: XOR<moissonCreateWithoutChurchInput, moissonUncheckedCreateWithoutChurchInput> | moissonCreateWithoutChurchInput[] | moissonUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: moissonCreateOrConnectWithoutChurchInput | moissonCreateOrConnectWithoutChurchInput[]
    createMany?: moissonCreateManyChurchInputEnvelope
    connect?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
  }

  export type offeringCreateNestedManyWithoutChurchInput = {
    create?: XOR<offeringCreateWithoutChurchInput, offeringUncheckedCreateWithoutChurchInput> | offeringCreateWithoutChurchInput[] | offeringUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: offeringCreateOrConnectWithoutChurchInput | offeringCreateOrConnectWithoutChurchInput[]
    createMany?: offeringCreateManyChurchInputEnvelope
    connect?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
  }

  export type pasteurCreateNestedManyWithoutChurchInput = {
    create?: XOR<pasteurCreateWithoutChurchInput, pasteurUncheckedCreateWithoutChurchInput> | pasteurCreateWithoutChurchInput[] | pasteurUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: pasteurCreateOrConnectWithoutChurchInput | pasteurCreateOrConnectWithoutChurchInput[]
    createMany?: pasteurCreateManyChurchInputEnvelope
    connect?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
  }

  export type sanctionCreateNestedManyWithoutChurchInput = {
    create?: XOR<sanctionCreateWithoutChurchInput, sanctionUncheckedCreateWithoutChurchInput> | sanctionCreateWithoutChurchInput[] | sanctionUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sanctionCreateOrConnectWithoutChurchInput | sanctionCreateOrConnectWithoutChurchInput[]
    createMany?: sanctionCreateManyChurchInputEnvelope
    connect?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
  }

  export type sundayClassCreateNestedManyWithoutChurchInput = {
    create?: XOR<sundayClassCreateWithoutChurchInput, sundayClassUncheckedCreateWithoutChurchInput> | sundayClassCreateWithoutChurchInput[] | sundayClassUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sundayClassCreateOrConnectWithoutChurchInput | sundayClassCreateOrConnectWithoutChurchInput[]
    createMany?: sundayClassCreateManyChurchInputEnvelope
    connect?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
  }

  export type tithingCreateNestedManyWithoutChurchInput = {
    create?: XOR<tithingCreateWithoutChurchInput, tithingUncheckedCreateWithoutChurchInput> | tithingCreateWithoutChurchInput[] | tithingUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: tithingCreateOrConnectWithoutChurchInput | tithingCreateOrConnectWithoutChurchInput[]
    createMany?: tithingCreateManyChurchInputEnvelope
    connect?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
  }

  export type transfertCreateNestedManyWithoutFromChurchInput = {
    create?: XOR<transfertCreateWithoutFromChurchInput, transfertUncheckedCreateWithoutFromChurchInput> | transfertCreateWithoutFromChurchInput[] | transfertUncheckedCreateWithoutFromChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutFromChurchInput | transfertCreateOrConnectWithoutFromChurchInput[]
    createMany?: transfertCreateManyFromChurchInputEnvelope
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
  }

  export type transfertCreateNestedManyWithoutToChurchInput = {
    create?: XOR<transfertCreateWithoutToChurchInput, transfertUncheckedCreateWithoutToChurchInput> | transfertCreateWithoutToChurchInput[] | transfertUncheckedCreateWithoutToChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutToChurchInput | transfertCreateOrConnectWithoutToChurchInput[]
    createMany?: transfertCreateManyToChurchInputEnvelope
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
  }

  export type BaptismUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<BaptismCreateWithoutChurchInput, BaptismUncheckedCreateWithoutChurchInput> | BaptismCreateWithoutChurchInput[] | BaptismUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: BaptismCreateOrConnectWithoutChurchInput | BaptismCreateOrConnectWithoutChurchInput[]
    createMany?: BaptismCreateManyChurchInputEnvelope
    connect?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<EventCreateWithoutChurchInput, EventUncheckedCreateWithoutChurchInput> | EventCreateWithoutChurchInput[] | EventUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: EventCreateOrConnectWithoutChurchInput | EventCreateOrConnectWithoutChurchInput[]
    createMany?: EventCreateManyChurchInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type FuneralUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<FuneralCreateWithoutChurchInput, FuneralUncheckedCreateWithoutChurchInput> | FuneralCreateWithoutChurchInput[] | FuneralUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: FuneralCreateOrConnectWithoutChurchInput | FuneralCreateOrConnectWithoutChurchInput[]
    createMany?: FuneralCreateManyChurchInputEnvelope
    connect?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
  }

  export type GroupeUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<GroupeCreateWithoutChurchInput, GroupeUncheckedCreateWithoutChurchInput> | GroupeCreateWithoutChurchInput[] | GroupeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutChurchInput | GroupeCreateOrConnectWithoutChurchInput[]
    createMany?: GroupeCreateManyChurchInputEnvelope
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
  }

  export type MariageUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<MariageCreateWithoutChurchInput, MariageUncheckedCreateWithoutChurchInput> | MariageCreateWithoutChurchInput[] | MariageUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MariageCreateOrConnectWithoutChurchInput | MariageCreateOrConnectWithoutChurchInput[]
    createMany?: MariageCreateManyChurchInputEnvelope
    connect?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
  }

  export type PresentationUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<PresentationCreateWithoutChurchInput, PresentationUncheckedCreateWithoutChurchInput> | PresentationCreateWithoutChurchInput[] | PresentationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutChurchInput | PresentationCreateOrConnectWithoutChurchInput[]
    createMany?: PresentationCreateManyChurchInputEnvelope
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<ServiceCreateWithoutChurchInput, ServiceUncheckedCreateWithoutChurchInput> | ServiceCreateWithoutChurchInput[] | ServiceUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutChurchInput | ServiceCreateOrConnectWithoutChurchInput[]
    createMany?: ServiceCreateManyChurchInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<UserCreateWithoutChurchInput, UserUncheckedCreateWithoutChurchInput> | UserCreateWithoutChurchInput[] | UserUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutChurchInput | UserCreateOrConnectWithoutChurchInput[]
    createMany?: UserCreateManyChurchInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type appointmentUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<appointmentCreateWithoutChurchInput, appointmentUncheckedCreateWithoutChurchInput> | appointmentCreateWithoutChurchInput[] | appointmentUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutChurchInput | appointmentCreateOrConnectWithoutChurchInput[]
    createMany?: appointmentCreateManyChurchInputEnvelope
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
  }

  export type comiteeUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<comiteeCreateWithoutChurchInput, comiteeUncheckedCreateWithoutChurchInput> | comiteeCreateWithoutChurchInput[] | comiteeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutChurchInput | comiteeCreateOrConnectWithoutChurchInput[]
    createMany?: comiteeCreateManyChurchInputEnvelope
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
  }

  export type deathUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<deathCreateWithoutChurchInput, deathUncheckedCreateWithoutChurchInput> | deathCreateWithoutChurchInput[] | deathUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: deathCreateOrConnectWithoutChurchInput | deathCreateOrConnectWithoutChurchInput[]
    createMany?: deathCreateManyChurchInputEnvelope
    connect?: deathWhereUniqueInput | deathWhereUniqueInput[]
  }

  export type donationUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<donationCreateWithoutChurchInput, donationUncheckedCreateWithoutChurchInput> | donationCreateWithoutChurchInput[] | donationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: donationCreateOrConnectWithoutChurchInput | donationCreateOrConnectWithoutChurchInput[]
    createMany?: donationCreateManyChurchInputEnvelope
    connect?: donationWhereUniqueInput | donationWhereUniqueInput[]
  }

  export type expenseUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<expenseCreateWithoutChurchInput, expenseUncheckedCreateWithoutChurchInput> | expenseCreateWithoutChurchInput[] | expenseUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutChurchInput | expenseCreateOrConnectWithoutChurchInput[]
    createMany?: expenseCreateManyChurchInputEnvelope
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
  }

  export type ministryUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<ministryCreateWithoutChurchInput, ministryUncheckedCreateWithoutChurchInput> | ministryCreateWithoutChurchInput[] | ministryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ministryCreateOrConnectWithoutChurchInput | ministryCreateOrConnectWithoutChurchInput[]
    createMany?: ministryCreateManyChurchInputEnvelope
    connect?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
  }

  export type moissonUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<moissonCreateWithoutChurchInput, moissonUncheckedCreateWithoutChurchInput> | moissonCreateWithoutChurchInput[] | moissonUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: moissonCreateOrConnectWithoutChurchInput | moissonCreateOrConnectWithoutChurchInput[]
    createMany?: moissonCreateManyChurchInputEnvelope
    connect?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
  }

  export type offeringUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<offeringCreateWithoutChurchInput, offeringUncheckedCreateWithoutChurchInput> | offeringCreateWithoutChurchInput[] | offeringUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: offeringCreateOrConnectWithoutChurchInput | offeringCreateOrConnectWithoutChurchInput[]
    createMany?: offeringCreateManyChurchInputEnvelope
    connect?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
  }

  export type pasteurUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<pasteurCreateWithoutChurchInput, pasteurUncheckedCreateWithoutChurchInput> | pasteurCreateWithoutChurchInput[] | pasteurUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: pasteurCreateOrConnectWithoutChurchInput | pasteurCreateOrConnectWithoutChurchInput[]
    createMany?: pasteurCreateManyChurchInputEnvelope
    connect?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
  }

  export type sanctionUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<sanctionCreateWithoutChurchInput, sanctionUncheckedCreateWithoutChurchInput> | sanctionCreateWithoutChurchInput[] | sanctionUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sanctionCreateOrConnectWithoutChurchInput | sanctionCreateOrConnectWithoutChurchInput[]
    createMany?: sanctionCreateManyChurchInputEnvelope
    connect?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
  }

  export type sundayClassUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<sundayClassCreateWithoutChurchInput, sundayClassUncheckedCreateWithoutChurchInput> | sundayClassCreateWithoutChurchInput[] | sundayClassUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sundayClassCreateOrConnectWithoutChurchInput | sundayClassCreateOrConnectWithoutChurchInput[]
    createMany?: sundayClassCreateManyChurchInputEnvelope
    connect?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
  }

  export type tithingUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<tithingCreateWithoutChurchInput, tithingUncheckedCreateWithoutChurchInput> | tithingCreateWithoutChurchInput[] | tithingUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: tithingCreateOrConnectWithoutChurchInput | tithingCreateOrConnectWithoutChurchInput[]
    createMany?: tithingCreateManyChurchInputEnvelope
    connect?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
  }

  export type transfertUncheckedCreateNestedManyWithoutFromChurchInput = {
    create?: XOR<transfertCreateWithoutFromChurchInput, transfertUncheckedCreateWithoutFromChurchInput> | transfertCreateWithoutFromChurchInput[] | transfertUncheckedCreateWithoutFromChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutFromChurchInput | transfertCreateOrConnectWithoutFromChurchInput[]
    createMany?: transfertCreateManyFromChurchInputEnvelope
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
  }

  export type transfertUncheckedCreateNestedManyWithoutToChurchInput = {
    create?: XOR<transfertCreateWithoutToChurchInput, transfertUncheckedCreateWithoutToChurchInput> | transfertCreateWithoutToChurchInput[] | transfertUncheckedCreateWithoutToChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutToChurchInput | transfertCreateOrConnectWithoutToChurchInput[]
    createMany?: transfertCreateManyToChurchInputEnvelope
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
  }

  export type BaptismUpdateManyWithoutChurchNestedInput = {
    create?: XOR<BaptismCreateWithoutChurchInput, BaptismUncheckedCreateWithoutChurchInput> | BaptismCreateWithoutChurchInput[] | BaptismUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: BaptismCreateOrConnectWithoutChurchInput | BaptismCreateOrConnectWithoutChurchInput[]
    upsert?: BaptismUpsertWithWhereUniqueWithoutChurchInput | BaptismUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: BaptismCreateManyChurchInputEnvelope
    set?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    disconnect?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    delete?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    connect?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    update?: BaptismUpdateWithWhereUniqueWithoutChurchInput | BaptismUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: BaptismUpdateManyWithWhereWithoutChurchInput | BaptismUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: BaptismScalarWhereInput | BaptismScalarWhereInput[]
  }

  export type AddressUpdateOneWithoutChurchNestedInput = {
    create?: XOR<AddressCreateWithoutChurchInput, AddressUncheckedCreateWithoutChurchInput>
    connectOrCreate?: AddressCreateOrConnectWithoutChurchInput
    upsert?: AddressUpsertWithoutChurchInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutChurchInput, AddressUpdateWithoutChurchInput>, AddressUncheckedUpdateWithoutChurchInput>
  }

  export type MissionUpdateOneWithoutChurchNestedInput = {
    create?: XOR<MissionCreateWithoutChurchInput, MissionUncheckedCreateWithoutChurchInput>
    connectOrCreate?: MissionCreateOrConnectWithoutChurchInput
    upsert?: MissionUpsertWithoutChurchInput
    disconnect?: MissionWhereInput | boolean
    delete?: MissionWhereInput | boolean
    connect?: MissionWhereUniqueInput
    update?: XOR<XOR<MissionUpdateToOneWithWhereWithoutChurchInput, MissionUpdateWithoutChurchInput>, MissionUncheckedUpdateWithoutChurchInput>
  }

  export type TtiUpdateOneWithoutChurchNestedInput = {
    create?: XOR<TtiCreateWithoutChurchInput, TtiUncheckedCreateWithoutChurchInput>
    connectOrCreate?: TtiCreateOrConnectWithoutChurchInput
    upsert?: TtiUpsertWithoutChurchInput
    disconnect?: TtiWhereInput | boolean
    delete?: TtiWhereInput | boolean
    connect?: TtiWhereUniqueInput
    update?: XOR<XOR<TtiUpdateToOneWithWhereWithoutChurchInput, TtiUpdateWithoutChurchInput>, TtiUncheckedUpdateWithoutChurchInput>
  }

  export type EventUpdateManyWithoutChurchNestedInput = {
    create?: XOR<EventCreateWithoutChurchInput, EventUncheckedCreateWithoutChurchInput> | EventCreateWithoutChurchInput[] | EventUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: EventCreateOrConnectWithoutChurchInput | EventCreateOrConnectWithoutChurchInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutChurchInput | EventUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: EventCreateManyChurchInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutChurchInput | EventUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: EventUpdateManyWithWhereWithoutChurchInput | EventUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type FuneralUpdateManyWithoutChurchNestedInput = {
    create?: XOR<FuneralCreateWithoutChurchInput, FuneralUncheckedCreateWithoutChurchInput> | FuneralCreateWithoutChurchInput[] | FuneralUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: FuneralCreateOrConnectWithoutChurchInput | FuneralCreateOrConnectWithoutChurchInput[]
    upsert?: FuneralUpsertWithWhereUniqueWithoutChurchInput | FuneralUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: FuneralCreateManyChurchInputEnvelope
    set?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    disconnect?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    delete?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    connect?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    update?: FuneralUpdateWithWhereUniqueWithoutChurchInput | FuneralUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: FuneralUpdateManyWithWhereWithoutChurchInput | FuneralUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: FuneralScalarWhereInput | FuneralScalarWhereInput[]
  }

  export type GroupeUpdateManyWithoutChurchNestedInput = {
    create?: XOR<GroupeCreateWithoutChurchInput, GroupeUncheckedCreateWithoutChurchInput> | GroupeCreateWithoutChurchInput[] | GroupeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutChurchInput | GroupeCreateOrConnectWithoutChurchInput[]
    upsert?: GroupeUpsertWithWhereUniqueWithoutChurchInput | GroupeUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: GroupeCreateManyChurchInputEnvelope
    set?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    disconnect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    delete?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    update?: GroupeUpdateWithWhereUniqueWithoutChurchInput | GroupeUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: GroupeUpdateManyWithWhereWithoutChurchInput | GroupeUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: GroupeScalarWhereInput | GroupeScalarWhereInput[]
  }

  export type MariageUpdateManyWithoutChurchNestedInput = {
    create?: XOR<MariageCreateWithoutChurchInput, MariageUncheckedCreateWithoutChurchInput> | MariageCreateWithoutChurchInput[] | MariageUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MariageCreateOrConnectWithoutChurchInput | MariageCreateOrConnectWithoutChurchInput[]
    upsert?: MariageUpsertWithWhereUniqueWithoutChurchInput | MariageUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: MariageCreateManyChurchInputEnvelope
    set?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    disconnect?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    delete?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    connect?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    update?: MariageUpdateWithWhereUniqueWithoutChurchInput | MariageUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: MariageUpdateManyWithWhereWithoutChurchInput | MariageUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: MariageScalarWhereInput | MariageScalarWhereInput[]
  }

  export type PresentationUpdateManyWithoutChurchNestedInput = {
    create?: XOR<PresentationCreateWithoutChurchInput, PresentationUncheckedCreateWithoutChurchInput> | PresentationCreateWithoutChurchInput[] | PresentationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutChurchInput | PresentationCreateOrConnectWithoutChurchInput[]
    upsert?: PresentationUpsertWithWhereUniqueWithoutChurchInput | PresentationUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: PresentationCreateManyChurchInputEnvelope
    set?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    disconnect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    delete?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    update?: PresentationUpdateWithWhereUniqueWithoutChurchInput | PresentationUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: PresentationUpdateManyWithWhereWithoutChurchInput | PresentationUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ServiceCreateWithoutChurchInput, ServiceUncheckedCreateWithoutChurchInput> | ServiceCreateWithoutChurchInput[] | ServiceUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutChurchInput | ServiceCreateOrConnectWithoutChurchInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutChurchInput | ServiceUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ServiceCreateManyChurchInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutChurchInput | ServiceUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutChurchInput | ServiceUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type UserUpdateManyWithoutChurchNestedInput = {
    create?: XOR<UserCreateWithoutChurchInput, UserUncheckedCreateWithoutChurchInput> | UserCreateWithoutChurchInput[] | UserUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutChurchInput | UserCreateOrConnectWithoutChurchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutChurchInput | UserUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: UserCreateManyChurchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutChurchInput | UserUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutChurchInput | UserUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type appointmentUpdateManyWithoutChurchNestedInput = {
    create?: XOR<appointmentCreateWithoutChurchInput, appointmentUncheckedCreateWithoutChurchInput> | appointmentCreateWithoutChurchInput[] | appointmentUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutChurchInput | appointmentCreateOrConnectWithoutChurchInput[]
    upsert?: appointmentUpsertWithWhereUniqueWithoutChurchInput | appointmentUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: appointmentCreateManyChurchInputEnvelope
    set?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    disconnect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    delete?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    update?: appointmentUpdateWithWhereUniqueWithoutChurchInput | appointmentUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: appointmentUpdateManyWithWhereWithoutChurchInput | appointmentUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: appointmentScalarWhereInput | appointmentScalarWhereInput[]
  }

  export type comiteeUpdateManyWithoutChurchNestedInput = {
    create?: XOR<comiteeCreateWithoutChurchInput, comiteeUncheckedCreateWithoutChurchInput> | comiteeCreateWithoutChurchInput[] | comiteeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutChurchInput | comiteeCreateOrConnectWithoutChurchInput[]
    upsert?: comiteeUpsertWithWhereUniqueWithoutChurchInput | comiteeUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: comiteeCreateManyChurchInputEnvelope
    set?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    disconnect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    delete?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    update?: comiteeUpdateWithWhereUniqueWithoutChurchInput | comiteeUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: comiteeUpdateManyWithWhereWithoutChurchInput | comiteeUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
  }

  export type deathUpdateManyWithoutChurchNestedInput = {
    create?: XOR<deathCreateWithoutChurchInput, deathUncheckedCreateWithoutChurchInput> | deathCreateWithoutChurchInput[] | deathUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: deathCreateOrConnectWithoutChurchInput | deathCreateOrConnectWithoutChurchInput[]
    upsert?: deathUpsertWithWhereUniqueWithoutChurchInput | deathUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: deathCreateManyChurchInputEnvelope
    set?: deathWhereUniqueInput | deathWhereUniqueInput[]
    disconnect?: deathWhereUniqueInput | deathWhereUniqueInput[]
    delete?: deathWhereUniqueInput | deathWhereUniqueInput[]
    connect?: deathWhereUniqueInput | deathWhereUniqueInput[]
    update?: deathUpdateWithWhereUniqueWithoutChurchInput | deathUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: deathUpdateManyWithWhereWithoutChurchInput | deathUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: deathScalarWhereInput | deathScalarWhereInput[]
  }

  export type donationUpdateManyWithoutChurchNestedInput = {
    create?: XOR<donationCreateWithoutChurchInput, donationUncheckedCreateWithoutChurchInput> | donationCreateWithoutChurchInput[] | donationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: donationCreateOrConnectWithoutChurchInput | donationCreateOrConnectWithoutChurchInput[]
    upsert?: donationUpsertWithWhereUniqueWithoutChurchInput | donationUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: donationCreateManyChurchInputEnvelope
    set?: donationWhereUniqueInput | donationWhereUniqueInput[]
    disconnect?: donationWhereUniqueInput | donationWhereUniqueInput[]
    delete?: donationWhereUniqueInput | donationWhereUniqueInput[]
    connect?: donationWhereUniqueInput | donationWhereUniqueInput[]
    update?: donationUpdateWithWhereUniqueWithoutChurchInput | donationUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: donationUpdateManyWithWhereWithoutChurchInput | donationUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: donationScalarWhereInput | donationScalarWhereInput[]
  }

  export type expenseUpdateManyWithoutChurchNestedInput = {
    create?: XOR<expenseCreateWithoutChurchInput, expenseUncheckedCreateWithoutChurchInput> | expenseCreateWithoutChurchInput[] | expenseUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutChurchInput | expenseCreateOrConnectWithoutChurchInput[]
    upsert?: expenseUpsertWithWhereUniqueWithoutChurchInput | expenseUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: expenseCreateManyChurchInputEnvelope
    set?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    disconnect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    delete?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    update?: expenseUpdateWithWhereUniqueWithoutChurchInput | expenseUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: expenseUpdateManyWithWhereWithoutChurchInput | expenseUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: expenseScalarWhereInput | expenseScalarWhereInput[]
  }

  export type ministryUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ministryCreateWithoutChurchInput, ministryUncheckedCreateWithoutChurchInput> | ministryCreateWithoutChurchInput[] | ministryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ministryCreateOrConnectWithoutChurchInput | ministryCreateOrConnectWithoutChurchInput[]
    upsert?: ministryUpsertWithWhereUniqueWithoutChurchInput | ministryUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ministryCreateManyChurchInputEnvelope
    set?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    disconnect?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    delete?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    connect?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    update?: ministryUpdateWithWhereUniqueWithoutChurchInput | ministryUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ministryUpdateManyWithWhereWithoutChurchInput | ministryUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ministryScalarWhereInput | ministryScalarWhereInput[]
  }

  export type moissonUpdateManyWithoutChurchNestedInput = {
    create?: XOR<moissonCreateWithoutChurchInput, moissonUncheckedCreateWithoutChurchInput> | moissonCreateWithoutChurchInput[] | moissonUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: moissonCreateOrConnectWithoutChurchInput | moissonCreateOrConnectWithoutChurchInput[]
    upsert?: moissonUpsertWithWhereUniqueWithoutChurchInput | moissonUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: moissonCreateManyChurchInputEnvelope
    set?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    disconnect?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    delete?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    connect?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    update?: moissonUpdateWithWhereUniqueWithoutChurchInput | moissonUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: moissonUpdateManyWithWhereWithoutChurchInput | moissonUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: moissonScalarWhereInput | moissonScalarWhereInput[]
  }

  export type offeringUpdateManyWithoutChurchNestedInput = {
    create?: XOR<offeringCreateWithoutChurchInput, offeringUncheckedCreateWithoutChurchInput> | offeringCreateWithoutChurchInput[] | offeringUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: offeringCreateOrConnectWithoutChurchInput | offeringCreateOrConnectWithoutChurchInput[]
    upsert?: offeringUpsertWithWhereUniqueWithoutChurchInput | offeringUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: offeringCreateManyChurchInputEnvelope
    set?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    disconnect?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    delete?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    connect?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    update?: offeringUpdateWithWhereUniqueWithoutChurchInput | offeringUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: offeringUpdateManyWithWhereWithoutChurchInput | offeringUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: offeringScalarWhereInput | offeringScalarWhereInput[]
  }

  export type pasteurUpdateManyWithoutChurchNestedInput = {
    create?: XOR<pasteurCreateWithoutChurchInput, pasteurUncheckedCreateWithoutChurchInput> | pasteurCreateWithoutChurchInput[] | pasteurUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: pasteurCreateOrConnectWithoutChurchInput | pasteurCreateOrConnectWithoutChurchInput[]
    upsert?: pasteurUpsertWithWhereUniqueWithoutChurchInput | pasteurUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: pasteurCreateManyChurchInputEnvelope
    set?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    disconnect?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    delete?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    connect?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    update?: pasteurUpdateWithWhereUniqueWithoutChurchInput | pasteurUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: pasteurUpdateManyWithWhereWithoutChurchInput | pasteurUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: pasteurScalarWhereInput | pasteurScalarWhereInput[]
  }

  export type sanctionUpdateManyWithoutChurchNestedInput = {
    create?: XOR<sanctionCreateWithoutChurchInput, sanctionUncheckedCreateWithoutChurchInput> | sanctionCreateWithoutChurchInput[] | sanctionUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sanctionCreateOrConnectWithoutChurchInput | sanctionCreateOrConnectWithoutChurchInput[]
    upsert?: sanctionUpsertWithWhereUniqueWithoutChurchInput | sanctionUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: sanctionCreateManyChurchInputEnvelope
    set?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    disconnect?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    delete?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    connect?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    update?: sanctionUpdateWithWhereUniqueWithoutChurchInput | sanctionUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: sanctionUpdateManyWithWhereWithoutChurchInput | sanctionUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: sanctionScalarWhereInput | sanctionScalarWhereInput[]
  }

  export type sundayClassUpdateManyWithoutChurchNestedInput = {
    create?: XOR<sundayClassCreateWithoutChurchInput, sundayClassUncheckedCreateWithoutChurchInput> | sundayClassCreateWithoutChurchInput[] | sundayClassUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sundayClassCreateOrConnectWithoutChurchInput | sundayClassCreateOrConnectWithoutChurchInput[]
    upsert?: sundayClassUpsertWithWhereUniqueWithoutChurchInput | sundayClassUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: sundayClassCreateManyChurchInputEnvelope
    set?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    disconnect?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    delete?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    connect?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    update?: sundayClassUpdateWithWhereUniqueWithoutChurchInput | sundayClassUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: sundayClassUpdateManyWithWhereWithoutChurchInput | sundayClassUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: sundayClassScalarWhereInput | sundayClassScalarWhereInput[]
  }

  export type tithingUpdateManyWithoutChurchNestedInput = {
    create?: XOR<tithingCreateWithoutChurchInput, tithingUncheckedCreateWithoutChurchInput> | tithingCreateWithoutChurchInput[] | tithingUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: tithingCreateOrConnectWithoutChurchInput | tithingCreateOrConnectWithoutChurchInput[]
    upsert?: tithingUpsertWithWhereUniqueWithoutChurchInput | tithingUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: tithingCreateManyChurchInputEnvelope
    set?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    disconnect?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    delete?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    connect?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    update?: tithingUpdateWithWhereUniqueWithoutChurchInput | tithingUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: tithingUpdateManyWithWhereWithoutChurchInput | tithingUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: tithingScalarWhereInput | tithingScalarWhereInput[]
  }

  export type transfertUpdateManyWithoutFromChurchNestedInput = {
    create?: XOR<transfertCreateWithoutFromChurchInput, transfertUncheckedCreateWithoutFromChurchInput> | transfertCreateWithoutFromChurchInput[] | transfertUncheckedCreateWithoutFromChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutFromChurchInput | transfertCreateOrConnectWithoutFromChurchInput[]
    upsert?: transfertUpsertWithWhereUniqueWithoutFromChurchInput | transfertUpsertWithWhereUniqueWithoutFromChurchInput[]
    createMany?: transfertCreateManyFromChurchInputEnvelope
    set?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    disconnect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    delete?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    update?: transfertUpdateWithWhereUniqueWithoutFromChurchInput | transfertUpdateWithWhereUniqueWithoutFromChurchInput[]
    updateMany?: transfertUpdateManyWithWhereWithoutFromChurchInput | transfertUpdateManyWithWhereWithoutFromChurchInput[]
    deleteMany?: transfertScalarWhereInput | transfertScalarWhereInput[]
  }

  export type transfertUpdateManyWithoutToChurchNestedInput = {
    create?: XOR<transfertCreateWithoutToChurchInput, transfertUncheckedCreateWithoutToChurchInput> | transfertCreateWithoutToChurchInput[] | transfertUncheckedCreateWithoutToChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutToChurchInput | transfertCreateOrConnectWithoutToChurchInput[]
    upsert?: transfertUpsertWithWhereUniqueWithoutToChurchInput | transfertUpsertWithWhereUniqueWithoutToChurchInput[]
    createMany?: transfertCreateManyToChurchInputEnvelope
    set?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    disconnect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    delete?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    update?: transfertUpdateWithWhereUniqueWithoutToChurchInput | transfertUpdateWithWhereUniqueWithoutToChurchInput[]
    updateMany?: transfertUpdateManyWithWhereWithoutToChurchInput | transfertUpdateManyWithWhereWithoutToChurchInput[]
    deleteMany?: transfertScalarWhereInput | transfertScalarWhereInput[]
  }

  export type BaptismUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<BaptismCreateWithoutChurchInput, BaptismUncheckedCreateWithoutChurchInput> | BaptismCreateWithoutChurchInput[] | BaptismUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: BaptismCreateOrConnectWithoutChurchInput | BaptismCreateOrConnectWithoutChurchInput[]
    upsert?: BaptismUpsertWithWhereUniqueWithoutChurchInput | BaptismUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: BaptismCreateManyChurchInputEnvelope
    set?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    disconnect?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    delete?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    connect?: BaptismWhereUniqueInput | BaptismWhereUniqueInput[]
    update?: BaptismUpdateWithWhereUniqueWithoutChurchInput | BaptismUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: BaptismUpdateManyWithWhereWithoutChurchInput | BaptismUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: BaptismScalarWhereInput | BaptismScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<EventCreateWithoutChurchInput, EventUncheckedCreateWithoutChurchInput> | EventCreateWithoutChurchInput[] | EventUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: EventCreateOrConnectWithoutChurchInput | EventCreateOrConnectWithoutChurchInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutChurchInput | EventUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: EventCreateManyChurchInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutChurchInput | EventUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: EventUpdateManyWithWhereWithoutChurchInput | EventUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type FuneralUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<FuneralCreateWithoutChurchInput, FuneralUncheckedCreateWithoutChurchInput> | FuneralCreateWithoutChurchInput[] | FuneralUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: FuneralCreateOrConnectWithoutChurchInput | FuneralCreateOrConnectWithoutChurchInput[]
    upsert?: FuneralUpsertWithWhereUniqueWithoutChurchInput | FuneralUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: FuneralCreateManyChurchInputEnvelope
    set?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    disconnect?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    delete?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    connect?: FuneralWhereUniqueInput | FuneralWhereUniqueInput[]
    update?: FuneralUpdateWithWhereUniqueWithoutChurchInput | FuneralUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: FuneralUpdateManyWithWhereWithoutChurchInput | FuneralUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: FuneralScalarWhereInput | FuneralScalarWhereInput[]
  }

  export type GroupeUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<GroupeCreateWithoutChurchInput, GroupeUncheckedCreateWithoutChurchInput> | GroupeCreateWithoutChurchInput[] | GroupeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutChurchInput | GroupeCreateOrConnectWithoutChurchInput[]
    upsert?: GroupeUpsertWithWhereUniqueWithoutChurchInput | GroupeUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: GroupeCreateManyChurchInputEnvelope
    set?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    disconnect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    delete?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    update?: GroupeUpdateWithWhereUniqueWithoutChurchInput | GroupeUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: GroupeUpdateManyWithWhereWithoutChurchInput | GroupeUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: GroupeScalarWhereInput | GroupeScalarWhereInput[]
  }

  export type MariageUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<MariageCreateWithoutChurchInput, MariageUncheckedCreateWithoutChurchInput> | MariageCreateWithoutChurchInput[] | MariageUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MariageCreateOrConnectWithoutChurchInput | MariageCreateOrConnectWithoutChurchInput[]
    upsert?: MariageUpsertWithWhereUniqueWithoutChurchInput | MariageUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: MariageCreateManyChurchInputEnvelope
    set?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    disconnect?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    delete?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    connect?: MariageWhereUniqueInput | MariageWhereUniqueInput[]
    update?: MariageUpdateWithWhereUniqueWithoutChurchInput | MariageUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: MariageUpdateManyWithWhereWithoutChurchInput | MariageUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: MariageScalarWhereInput | MariageScalarWhereInput[]
  }

  export type PresentationUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<PresentationCreateWithoutChurchInput, PresentationUncheckedCreateWithoutChurchInput> | PresentationCreateWithoutChurchInput[] | PresentationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: PresentationCreateOrConnectWithoutChurchInput | PresentationCreateOrConnectWithoutChurchInput[]
    upsert?: PresentationUpsertWithWhereUniqueWithoutChurchInput | PresentationUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: PresentationCreateManyChurchInputEnvelope
    set?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    disconnect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    delete?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    connect?: PresentationWhereUniqueInput | PresentationWhereUniqueInput[]
    update?: PresentationUpdateWithWhereUniqueWithoutChurchInput | PresentationUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: PresentationUpdateManyWithWhereWithoutChurchInput | PresentationUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ServiceCreateWithoutChurchInput, ServiceUncheckedCreateWithoutChurchInput> | ServiceCreateWithoutChurchInput[] | ServiceUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutChurchInput | ServiceCreateOrConnectWithoutChurchInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutChurchInput | ServiceUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ServiceCreateManyChurchInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutChurchInput | ServiceUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutChurchInput | ServiceUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<UserCreateWithoutChurchInput, UserUncheckedCreateWithoutChurchInput> | UserCreateWithoutChurchInput[] | UserUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: UserCreateOrConnectWithoutChurchInput | UserCreateOrConnectWithoutChurchInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutChurchInput | UserUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: UserCreateManyChurchInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutChurchInput | UserUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: UserUpdateManyWithWhereWithoutChurchInput | UserUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type appointmentUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<appointmentCreateWithoutChurchInput, appointmentUncheckedCreateWithoutChurchInput> | appointmentCreateWithoutChurchInput[] | appointmentUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutChurchInput | appointmentCreateOrConnectWithoutChurchInput[]
    upsert?: appointmentUpsertWithWhereUniqueWithoutChurchInput | appointmentUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: appointmentCreateManyChurchInputEnvelope
    set?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    disconnect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    delete?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    update?: appointmentUpdateWithWhereUniqueWithoutChurchInput | appointmentUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: appointmentUpdateManyWithWhereWithoutChurchInput | appointmentUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: appointmentScalarWhereInput | appointmentScalarWhereInput[]
  }

  export type comiteeUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<comiteeCreateWithoutChurchInput, comiteeUncheckedCreateWithoutChurchInput> | comiteeCreateWithoutChurchInput[] | comiteeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutChurchInput | comiteeCreateOrConnectWithoutChurchInput[]
    upsert?: comiteeUpsertWithWhereUniqueWithoutChurchInput | comiteeUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: comiteeCreateManyChurchInputEnvelope
    set?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    disconnect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    delete?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    update?: comiteeUpdateWithWhereUniqueWithoutChurchInput | comiteeUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: comiteeUpdateManyWithWhereWithoutChurchInput | comiteeUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
  }

  export type deathUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<deathCreateWithoutChurchInput, deathUncheckedCreateWithoutChurchInput> | deathCreateWithoutChurchInput[] | deathUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: deathCreateOrConnectWithoutChurchInput | deathCreateOrConnectWithoutChurchInput[]
    upsert?: deathUpsertWithWhereUniqueWithoutChurchInput | deathUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: deathCreateManyChurchInputEnvelope
    set?: deathWhereUniqueInput | deathWhereUniqueInput[]
    disconnect?: deathWhereUniqueInput | deathWhereUniqueInput[]
    delete?: deathWhereUniqueInput | deathWhereUniqueInput[]
    connect?: deathWhereUniqueInput | deathWhereUniqueInput[]
    update?: deathUpdateWithWhereUniqueWithoutChurchInput | deathUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: deathUpdateManyWithWhereWithoutChurchInput | deathUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: deathScalarWhereInput | deathScalarWhereInput[]
  }

  export type donationUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<donationCreateWithoutChurchInput, donationUncheckedCreateWithoutChurchInput> | donationCreateWithoutChurchInput[] | donationUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: donationCreateOrConnectWithoutChurchInput | donationCreateOrConnectWithoutChurchInput[]
    upsert?: donationUpsertWithWhereUniqueWithoutChurchInput | donationUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: donationCreateManyChurchInputEnvelope
    set?: donationWhereUniqueInput | donationWhereUniqueInput[]
    disconnect?: donationWhereUniqueInput | donationWhereUniqueInput[]
    delete?: donationWhereUniqueInput | donationWhereUniqueInput[]
    connect?: donationWhereUniqueInput | donationWhereUniqueInput[]
    update?: donationUpdateWithWhereUniqueWithoutChurchInput | donationUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: donationUpdateManyWithWhereWithoutChurchInput | donationUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: donationScalarWhereInput | donationScalarWhereInput[]
  }

  export type expenseUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<expenseCreateWithoutChurchInput, expenseUncheckedCreateWithoutChurchInput> | expenseCreateWithoutChurchInput[] | expenseUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutChurchInput | expenseCreateOrConnectWithoutChurchInput[]
    upsert?: expenseUpsertWithWhereUniqueWithoutChurchInput | expenseUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: expenseCreateManyChurchInputEnvelope
    set?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    disconnect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    delete?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    update?: expenseUpdateWithWhereUniqueWithoutChurchInput | expenseUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: expenseUpdateManyWithWhereWithoutChurchInput | expenseUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: expenseScalarWhereInput | expenseScalarWhereInput[]
  }

  export type ministryUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ministryCreateWithoutChurchInput, ministryUncheckedCreateWithoutChurchInput> | ministryCreateWithoutChurchInput[] | ministryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ministryCreateOrConnectWithoutChurchInput | ministryCreateOrConnectWithoutChurchInput[]
    upsert?: ministryUpsertWithWhereUniqueWithoutChurchInput | ministryUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ministryCreateManyChurchInputEnvelope
    set?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    disconnect?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    delete?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    connect?: ministryWhereUniqueInput | ministryWhereUniqueInput[]
    update?: ministryUpdateWithWhereUniqueWithoutChurchInput | ministryUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ministryUpdateManyWithWhereWithoutChurchInput | ministryUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ministryScalarWhereInput | ministryScalarWhereInput[]
  }

  export type moissonUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<moissonCreateWithoutChurchInput, moissonUncheckedCreateWithoutChurchInput> | moissonCreateWithoutChurchInput[] | moissonUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: moissonCreateOrConnectWithoutChurchInput | moissonCreateOrConnectWithoutChurchInput[]
    upsert?: moissonUpsertWithWhereUniqueWithoutChurchInput | moissonUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: moissonCreateManyChurchInputEnvelope
    set?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    disconnect?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    delete?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    connect?: moissonWhereUniqueInput | moissonWhereUniqueInput[]
    update?: moissonUpdateWithWhereUniqueWithoutChurchInput | moissonUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: moissonUpdateManyWithWhereWithoutChurchInput | moissonUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: moissonScalarWhereInput | moissonScalarWhereInput[]
  }

  export type offeringUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<offeringCreateWithoutChurchInput, offeringUncheckedCreateWithoutChurchInput> | offeringCreateWithoutChurchInput[] | offeringUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: offeringCreateOrConnectWithoutChurchInput | offeringCreateOrConnectWithoutChurchInput[]
    upsert?: offeringUpsertWithWhereUniqueWithoutChurchInput | offeringUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: offeringCreateManyChurchInputEnvelope
    set?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    disconnect?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    delete?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    connect?: offeringWhereUniqueInput | offeringWhereUniqueInput[]
    update?: offeringUpdateWithWhereUniqueWithoutChurchInput | offeringUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: offeringUpdateManyWithWhereWithoutChurchInput | offeringUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: offeringScalarWhereInput | offeringScalarWhereInput[]
  }

  export type pasteurUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<pasteurCreateWithoutChurchInput, pasteurUncheckedCreateWithoutChurchInput> | pasteurCreateWithoutChurchInput[] | pasteurUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: pasteurCreateOrConnectWithoutChurchInput | pasteurCreateOrConnectWithoutChurchInput[]
    upsert?: pasteurUpsertWithWhereUniqueWithoutChurchInput | pasteurUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: pasteurCreateManyChurchInputEnvelope
    set?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    disconnect?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    delete?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    connect?: pasteurWhereUniqueInput | pasteurWhereUniqueInput[]
    update?: pasteurUpdateWithWhereUniqueWithoutChurchInput | pasteurUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: pasteurUpdateManyWithWhereWithoutChurchInput | pasteurUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: pasteurScalarWhereInput | pasteurScalarWhereInput[]
  }

  export type sanctionUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<sanctionCreateWithoutChurchInput, sanctionUncheckedCreateWithoutChurchInput> | sanctionCreateWithoutChurchInput[] | sanctionUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sanctionCreateOrConnectWithoutChurchInput | sanctionCreateOrConnectWithoutChurchInput[]
    upsert?: sanctionUpsertWithWhereUniqueWithoutChurchInput | sanctionUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: sanctionCreateManyChurchInputEnvelope
    set?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    disconnect?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    delete?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    connect?: sanctionWhereUniqueInput | sanctionWhereUniqueInput[]
    update?: sanctionUpdateWithWhereUniqueWithoutChurchInput | sanctionUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: sanctionUpdateManyWithWhereWithoutChurchInput | sanctionUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: sanctionScalarWhereInput | sanctionScalarWhereInput[]
  }

  export type sundayClassUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<sundayClassCreateWithoutChurchInput, sundayClassUncheckedCreateWithoutChurchInput> | sundayClassCreateWithoutChurchInput[] | sundayClassUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: sundayClassCreateOrConnectWithoutChurchInput | sundayClassCreateOrConnectWithoutChurchInput[]
    upsert?: sundayClassUpsertWithWhereUniqueWithoutChurchInput | sundayClassUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: sundayClassCreateManyChurchInputEnvelope
    set?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    disconnect?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    delete?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    connect?: sundayClassWhereUniqueInput | sundayClassWhereUniqueInput[]
    update?: sundayClassUpdateWithWhereUniqueWithoutChurchInput | sundayClassUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: sundayClassUpdateManyWithWhereWithoutChurchInput | sundayClassUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: sundayClassScalarWhereInput | sundayClassScalarWhereInput[]
  }

  export type tithingUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<tithingCreateWithoutChurchInput, tithingUncheckedCreateWithoutChurchInput> | tithingCreateWithoutChurchInput[] | tithingUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: tithingCreateOrConnectWithoutChurchInput | tithingCreateOrConnectWithoutChurchInput[]
    upsert?: tithingUpsertWithWhereUniqueWithoutChurchInput | tithingUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: tithingCreateManyChurchInputEnvelope
    set?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    disconnect?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    delete?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    connect?: tithingWhereUniqueInput | tithingWhereUniqueInput[]
    update?: tithingUpdateWithWhereUniqueWithoutChurchInput | tithingUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: tithingUpdateManyWithWhereWithoutChurchInput | tithingUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: tithingScalarWhereInput | tithingScalarWhereInput[]
  }

  export type transfertUncheckedUpdateManyWithoutFromChurchNestedInput = {
    create?: XOR<transfertCreateWithoutFromChurchInput, transfertUncheckedCreateWithoutFromChurchInput> | transfertCreateWithoutFromChurchInput[] | transfertUncheckedCreateWithoutFromChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutFromChurchInput | transfertCreateOrConnectWithoutFromChurchInput[]
    upsert?: transfertUpsertWithWhereUniqueWithoutFromChurchInput | transfertUpsertWithWhereUniqueWithoutFromChurchInput[]
    createMany?: transfertCreateManyFromChurchInputEnvelope
    set?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    disconnect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    delete?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    update?: transfertUpdateWithWhereUniqueWithoutFromChurchInput | transfertUpdateWithWhereUniqueWithoutFromChurchInput[]
    updateMany?: transfertUpdateManyWithWhereWithoutFromChurchInput | transfertUpdateManyWithWhereWithoutFromChurchInput[]
    deleteMany?: transfertScalarWhereInput | transfertScalarWhereInput[]
  }

  export type transfertUncheckedUpdateManyWithoutToChurchNestedInput = {
    create?: XOR<transfertCreateWithoutToChurchInput, transfertUncheckedCreateWithoutToChurchInput> | transfertCreateWithoutToChurchInput[] | transfertUncheckedCreateWithoutToChurchInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutToChurchInput | transfertCreateOrConnectWithoutToChurchInput[]
    upsert?: transfertUpsertWithWhereUniqueWithoutToChurchInput | transfertUpsertWithWhereUniqueWithoutToChurchInput[]
    createMany?: transfertCreateManyToChurchInputEnvelope
    set?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    disconnect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    delete?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    update?: transfertUpdateWithWhereUniqueWithoutToChurchInput | transfertUpdateWithWhereUniqueWithoutToChurchInput[]
    updateMany?: transfertUpdateManyWithWhereWithoutToChurchInput | transfertUpdateManyWithWhereWithoutToChurchInput[]
    deleteMany?: transfertScalarWhereInput | transfertScalarWhereInput[]
  }

  export type PresenceCreateNestedManyWithoutUserInput = {
    create?: XOR<PresenceCreateWithoutUserInput, PresenceUncheckedCreateWithoutUserInput> | PresenceCreateWithoutUserInput[] | PresenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutUserInput | PresenceCreateOrConnectWithoutUserInput[]
    createMany?: PresenceCreateManyUserInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type ChurchCreateNestedOneWithoutUsersInput = {
    create?: XOR<ChurchCreateWithoutUsersInput, ChurchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutUsersInput
    connect?: ChurchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTithesInput = {
    create?: XOR<UserCreateWithoutTithesInput, UserUncheckedCreateWithoutTithesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTithesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTimotheeInput = {
    create?: XOR<UserCreateWithoutTimotheeInput, UserUncheckedCreateWithoutTimotheeInput> | UserCreateWithoutTimotheeInput[] | UserUncheckedCreateWithoutTimotheeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTimotheeInput | UserCreateOrConnectWithoutTimotheeInput[]
    createMany?: UserCreateManyTimotheeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type transfertCreateNestedManyWithoutMemberInput = {
    create?: XOR<transfertCreateWithoutMemberInput, transfertUncheckedCreateWithoutMemberInput> | transfertCreateWithoutMemberInput[] | transfertUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutMemberInput | transfertCreateOrConnectWithoutMemberInput[]
    createMany?: transfertCreateManyMemberInputEnvelope
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
  }

  export type comiteeCreateNestedManyWithoutCommiteeLeaderInput = {
    create?: XOR<comiteeCreateWithoutCommiteeLeaderInput, comiteeUncheckedCreateWithoutCommiteeLeaderInput> | comiteeCreateWithoutCommiteeLeaderInput[] | comiteeUncheckedCreateWithoutCommiteeLeaderInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeLeaderInput | comiteeCreateOrConnectWithoutCommiteeLeaderInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
  }

  export type comiteeCreateNestedManyWithoutCommiteeMemberInput = {
    create?: XOR<comiteeCreateWithoutCommiteeMemberInput, comiteeUncheckedCreateWithoutCommiteeMemberInput> | comiteeCreateWithoutCommiteeMemberInput[] | comiteeUncheckedCreateWithoutCommiteeMemberInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeMemberInput | comiteeCreateOrConnectWithoutCommiteeMemberInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
  }

  export type GroupeCreateNestedManyWithoutUsersInput = {
    create?: XOR<GroupeCreateWithoutUsersInput, GroupeUncheckedCreateWithoutUsersInput> | GroupeCreateWithoutUsersInput[] | GroupeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutUsersInput | GroupeCreateOrConnectWithoutUsersInput[]
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
  }

  export type appointmentCreateNestedManyWithoutAssignedUsersInput = {
    create?: XOR<appointmentCreateWithoutAssignedUsersInput, appointmentUncheckedCreateWithoutAssignedUsersInput> | appointmentCreateWithoutAssignedUsersInput[] | appointmentUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutAssignedUsersInput | appointmentCreateOrConnectWithoutAssignedUsersInput[]
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
  }

  export type PresenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PresenceCreateWithoutUserInput, PresenceUncheckedCreateWithoutUserInput> | PresenceCreateWithoutUserInput[] | PresenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutUserInput | PresenceCreateOrConnectWithoutUserInput[]
    createMany?: PresenceCreateManyUserInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTimotheeInput = {
    create?: XOR<UserCreateWithoutTimotheeInput, UserUncheckedCreateWithoutTimotheeInput> | UserCreateWithoutTimotheeInput[] | UserUncheckedCreateWithoutTimotheeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTimotheeInput | UserCreateOrConnectWithoutTimotheeInput[]
    createMany?: UserCreateManyTimotheeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type transfertUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<transfertCreateWithoutMemberInput, transfertUncheckedCreateWithoutMemberInput> | transfertCreateWithoutMemberInput[] | transfertUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutMemberInput | transfertCreateOrConnectWithoutMemberInput[]
    createMany?: transfertCreateManyMemberInputEnvelope
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
  }

  export type comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput = {
    create?: XOR<comiteeCreateWithoutCommiteeLeaderInput, comiteeUncheckedCreateWithoutCommiteeLeaderInput> | comiteeCreateWithoutCommiteeLeaderInput[] | comiteeUncheckedCreateWithoutCommiteeLeaderInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeLeaderInput | comiteeCreateOrConnectWithoutCommiteeLeaderInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
  }

  export type comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput = {
    create?: XOR<comiteeCreateWithoutCommiteeMemberInput, comiteeUncheckedCreateWithoutCommiteeMemberInput> | comiteeCreateWithoutCommiteeMemberInput[] | comiteeUncheckedCreateWithoutCommiteeMemberInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeMemberInput | comiteeCreateOrConnectWithoutCommiteeMemberInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
  }

  export type GroupeUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<GroupeCreateWithoutUsersInput, GroupeUncheckedCreateWithoutUsersInput> | GroupeCreateWithoutUsersInput[] | GroupeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutUsersInput | GroupeCreateOrConnectWithoutUsersInput[]
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
  }

  export type appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput = {
    create?: XOR<appointmentCreateWithoutAssignedUsersInput, appointmentUncheckedCreateWithoutAssignedUsersInput> | appointmentCreateWithoutAssignedUsersInput[] | appointmentUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutAssignedUsersInput | appointmentCreateOrConnectWithoutAssignedUsersInput[]
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type PresenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<PresenceCreateWithoutUserInput, PresenceUncheckedCreateWithoutUserInput> | PresenceCreateWithoutUserInput[] | PresenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutUserInput | PresenceCreateOrConnectWithoutUserInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutUserInput | PresenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PresenceCreateManyUserInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutUserInput | PresenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutUserInput | PresenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type ChurchUpdateOneWithoutUsersNestedInput = {
    create?: XOR<ChurchCreateWithoutUsersInput, ChurchUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutUsersInput
    upsert?: ChurchUpsertWithoutUsersInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutUsersInput, ChurchUpdateWithoutUsersInput>, ChurchUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneWithoutTithesNestedInput = {
    create?: XOR<UserCreateWithoutTithesInput, UserUncheckedCreateWithoutTithesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTithesInput
    upsert?: UserUpsertWithoutTithesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTithesInput, UserUpdateWithoutTithesInput>, UserUncheckedUpdateWithoutTithesInput>
  }

  export type UserUpdateManyWithoutTimotheeNestedInput = {
    create?: XOR<UserCreateWithoutTimotheeInput, UserUncheckedCreateWithoutTimotheeInput> | UserCreateWithoutTimotheeInput[] | UserUncheckedCreateWithoutTimotheeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTimotheeInput | UserCreateOrConnectWithoutTimotheeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTimotheeInput | UserUpsertWithWhereUniqueWithoutTimotheeInput[]
    createMany?: UserCreateManyTimotheeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTimotheeInput | UserUpdateWithWhereUniqueWithoutTimotheeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTimotheeInput | UserUpdateManyWithWhereWithoutTimotheeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type transfertUpdateManyWithoutMemberNestedInput = {
    create?: XOR<transfertCreateWithoutMemberInput, transfertUncheckedCreateWithoutMemberInput> | transfertCreateWithoutMemberInput[] | transfertUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutMemberInput | transfertCreateOrConnectWithoutMemberInput[]
    upsert?: transfertUpsertWithWhereUniqueWithoutMemberInput | transfertUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: transfertCreateManyMemberInputEnvelope
    set?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    disconnect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    delete?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    update?: transfertUpdateWithWhereUniqueWithoutMemberInput | transfertUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: transfertUpdateManyWithWhereWithoutMemberInput | transfertUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: transfertScalarWhereInput | transfertScalarWhereInput[]
  }

  export type comiteeUpdateManyWithoutCommiteeLeaderNestedInput = {
    create?: XOR<comiteeCreateWithoutCommiteeLeaderInput, comiteeUncheckedCreateWithoutCommiteeLeaderInput> | comiteeCreateWithoutCommiteeLeaderInput[] | comiteeUncheckedCreateWithoutCommiteeLeaderInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeLeaderInput | comiteeCreateOrConnectWithoutCommiteeLeaderInput[]
    upsert?: comiteeUpsertWithWhereUniqueWithoutCommiteeLeaderInput | comiteeUpsertWithWhereUniqueWithoutCommiteeLeaderInput[]
    set?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    disconnect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    delete?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    update?: comiteeUpdateWithWhereUniqueWithoutCommiteeLeaderInput | comiteeUpdateWithWhereUniqueWithoutCommiteeLeaderInput[]
    updateMany?: comiteeUpdateManyWithWhereWithoutCommiteeLeaderInput | comiteeUpdateManyWithWhereWithoutCommiteeLeaderInput[]
    deleteMany?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
  }

  export type comiteeUpdateManyWithoutCommiteeMemberNestedInput = {
    create?: XOR<comiteeCreateWithoutCommiteeMemberInput, comiteeUncheckedCreateWithoutCommiteeMemberInput> | comiteeCreateWithoutCommiteeMemberInput[] | comiteeUncheckedCreateWithoutCommiteeMemberInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeMemberInput | comiteeCreateOrConnectWithoutCommiteeMemberInput[]
    upsert?: comiteeUpsertWithWhereUniqueWithoutCommiteeMemberInput | comiteeUpsertWithWhereUniqueWithoutCommiteeMemberInput[]
    set?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    disconnect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    delete?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    update?: comiteeUpdateWithWhereUniqueWithoutCommiteeMemberInput | comiteeUpdateWithWhereUniqueWithoutCommiteeMemberInput[]
    updateMany?: comiteeUpdateManyWithWhereWithoutCommiteeMemberInput | comiteeUpdateManyWithWhereWithoutCommiteeMemberInput[]
    deleteMany?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
  }

  export type GroupeUpdateManyWithoutUsersNestedInput = {
    create?: XOR<GroupeCreateWithoutUsersInput, GroupeUncheckedCreateWithoutUsersInput> | GroupeCreateWithoutUsersInput[] | GroupeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutUsersInput | GroupeCreateOrConnectWithoutUsersInput[]
    upsert?: GroupeUpsertWithWhereUniqueWithoutUsersInput | GroupeUpsertWithWhereUniqueWithoutUsersInput[]
    set?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    disconnect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    delete?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    update?: GroupeUpdateWithWhereUniqueWithoutUsersInput | GroupeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: GroupeUpdateManyWithWhereWithoutUsersInput | GroupeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: GroupeScalarWhereInput | GroupeScalarWhereInput[]
  }

  export type appointmentUpdateManyWithoutAssignedUsersNestedInput = {
    create?: XOR<appointmentCreateWithoutAssignedUsersInput, appointmentUncheckedCreateWithoutAssignedUsersInput> | appointmentCreateWithoutAssignedUsersInput[] | appointmentUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutAssignedUsersInput | appointmentCreateOrConnectWithoutAssignedUsersInput[]
    upsert?: appointmentUpsertWithWhereUniqueWithoutAssignedUsersInput | appointmentUpsertWithWhereUniqueWithoutAssignedUsersInput[]
    set?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    disconnect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    delete?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    update?: appointmentUpdateWithWhereUniqueWithoutAssignedUsersInput | appointmentUpdateWithWhereUniqueWithoutAssignedUsersInput[]
    updateMany?: appointmentUpdateManyWithWhereWithoutAssignedUsersInput | appointmentUpdateManyWithWhereWithoutAssignedUsersInput[]
    deleteMany?: appointmentScalarWhereInput | appointmentScalarWhereInput[]
  }

  export type PresenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PresenceCreateWithoutUserInput, PresenceUncheckedCreateWithoutUserInput> | PresenceCreateWithoutUserInput[] | PresenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutUserInput | PresenceCreateOrConnectWithoutUserInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutUserInput | PresenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PresenceCreateManyUserInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutUserInput | PresenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutUserInput | PresenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTimotheeNestedInput = {
    create?: XOR<UserCreateWithoutTimotheeInput, UserUncheckedCreateWithoutTimotheeInput> | UserCreateWithoutTimotheeInput[] | UserUncheckedCreateWithoutTimotheeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTimotheeInput | UserCreateOrConnectWithoutTimotheeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTimotheeInput | UserUpsertWithWhereUniqueWithoutTimotheeInput[]
    createMany?: UserCreateManyTimotheeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTimotheeInput | UserUpdateWithWhereUniqueWithoutTimotheeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTimotheeInput | UserUpdateManyWithWhereWithoutTimotheeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type transfertUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<transfertCreateWithoutMemberInput, transfertUncheckedCreateWithoutMemberInput> | transfertCreateWithoutMemberInput[] | transfertUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: transfertCreateOrConnectWithoutMemberInput | transfertCreateOrConnectWithoutMemberInput[]
    upsert?: transfertUpsertWithWhereUniqueWithoutMemberInput | transfertUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: transfertCreateManyMemberInputEnvelope
    set?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    disconnect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    delete?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    connect?: transfertWhereUniqueInput | transfertWhereUniqueInput[]
    update?: transfertUpdateWithWhereUniqueWithoutMemberInput | transfertUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: transfertUpdateManyWithWhereWithoutMemberInput | transfertUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: transfertScalarWhereInput | transfertScalarWhereInput[]
  }

  export type comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput = {
    create?: XOR<comiteeCreateWithoutCommiteeLeaderInput, comiteeUncheckedCreateWithoutCommiteeLeaderInput> | comiteeCreateWithoutCommiteeLeaderInput[] | comiteeUncheckedCreateWithoutCommiteeLeaderInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeLeaderInput | comiteeCreateOrConnectWithoutCommiteeLeaderInput[]
    upsert?: comiteeUpsertWithWhereUniqueWithoutCommiteeLeaderInput | comiteeUpsertWithWhereUniqueWithoutCommiteeLeaderInput[]
    set?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    disconnect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    delete?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    update?: comiteeUpdateWithWhereUniqueWithoutCommiteeLeaderInput | comiteeUpdateWithWhereUniqueWithoutCommiteeLeaderInput[]
    updateMany?: comiteeUpdateManyWithWhereWithoutCommiteeLeaderInput | comiteeUpdateManyWithWhereWithoutCommiteeLeaderInput[]
    deleteMany?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
  }

  export type comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput = {
    create?: XOR<comiteeCreateWithoutCommiteeMemberInput, comiteeUncheckedCreateWithoutCommiteeMemberInput> | comiteeCreateWithoutCommiteeMemberInput[] | comiteeUncheckedCreateWithoutCommiteeMemberInput[]
    connectOrCreate?: comiteeCreateOrConnectWithoutCommiteeMemberInput | comiteeCreateOrConnectWithoutCommiteeMemberInput[]
    upsert?: comiteeUpsertWithWhereUniqueWithoutCommiteeMemberInput | comiteeUpsertWithWhereUniqueWithoutCommiteeMemberInput[]
    set?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    disconnect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    delete?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    connect?: comiteeWhereUniqueInput | comiteeWhereUniqueInput[]
    update?: comiteeUpdateWithWhereUniqueWithoutCommiteeMemberInput | comiteeUpdateWithWhereUniqueWithoutCommiteeMemberInput[]
    updateMany?: comiteeUpdateManyWithWhereWithoutCommiteeMemberInput | comiteeUpdateManyWithWhereWithoutCommiteeMemberInput[]
    deleteMany?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
  }

  export type GroupeUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<GroupeCreateWithoutUsersInput, GroupeUncheckedCreateWithoutUsersInput> | GroupeCreateWithoutUsersInput[] | GroupeUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: GroupeCreateOrConnectWithoutUsersInput | GroupeCreateOrConnectWithoutUsersInput[]
    upsert?: GroupeUpsertWithWhereUniqueWithoutUsersInput | GroupeUpsertWithWhereUniqueWithoutUsersInput[]
    set?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    disconnect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    delete?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    connect?: GroupeWhereUniqueInput | GroupeWhereUniqueInput[]
    update?: GroupeUpdateWithWhereUniqueWithoutUsersInput | GroupeUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: GroupeUpdateManyWithWhereWithoutUsersInput | GroupeUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: GroupeScalarWhereInput | GroupeScalarWhereInput[]
  }

  export type appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput = {
    create?: XOR<appointmentCreateWithoutAssignedUsersInput, appointmentUncheckedCreateWithoutAssignedUsersInput> | appointmentCreateWithoutAssignedUsersInput[] | appointmentUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: appointmentCreateOrConnectWithoutAssignedUsersInput | appointmentCreateOrConnectWithoutAssignedUsersInput[]
    upsert?: appointmentUpsertWithWhereUniqueWithoutAssignedUsersInput | appointmentUpsertWithWhereUniqueWithoutAssignedUsersInput[]
    set?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    disconnect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    delete?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    connect?: appointmentWhereUniqueInput | appointmentWhereUniqueInput[]
    update?: appointmentUpdateWithWhereUniqueWithoutAssignedUsersInput | appointmentUpdateWithWhereUniqueWithoutAssignedUsersInput[]
    updateMany?: appointmentUpdateManyWithWhereWithoutAssignedUsersInput | appointmentUpdateManyWithWhereWithoutAssignedUsersInput[]
    deleteMany?: appointmentScalarWhereInput | appointmentScalarWhereInput[]
  }

  export type ChurchCreateNestedOneWithoutGroupsInput = {
    create?: XOR<ChurchCreateWithoutGroupsInput, ChurchUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutGroupsInput
    connect?: ChurchWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutGroupsInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ChurchUpdateOneWithoutGroupsNestedInput = {
    create?: XOR<ChurchCreateWithoutGroupsInput, ChurchUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutGroupsInput
    upsert?: ChurchUpsertWithoutGroupsInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutGroupsInput, ChurchUpdateWithoutGroupsInput>, ChurchUncheckedUpdateWithoutGroupsInput>
  }

  export type UserUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGroupsInput | UserUpsertWithWhereUniqueWithoutGroupsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGroupsInput | UserUpdateWithWhereUniqueWithoutGroupsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGroupsInput | UserUpdateManyWithWhereWithoutGroupsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput> | UserCreateWithoutGroupsInput[] | UserUncheckedCreateWithoutGroupsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGroupsInput | UserCreateOrConnectWithoutGroupsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGroupsInput | UserUpsertWithWhereUniqueWithoutGroupsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGroupsInput | UserUpdateWithWhereUniqueWithoutGroupsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGroupsInput | UserUpdateManyWithWhereWithoutGroupsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChurchCreateNestedOneWithoutEventsInput = {
    create?: XOR<ChurchCreateWithoutEventsInput, ChurchUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutEventsInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutEventsNestedInput = {
    create?: XOR<ChurchCreateWithoutEventsInput, ChurchUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutEventsInput
    upsert?: ChurchUpsertWithoutEventsInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutEventsInput, ChurchUpdateWithoutEventsInput>, ChurchUncheckedUpdateWithoutEventsInput>
  }

  export type ChurchCreateNestedOneWithoutMariagesInput = {
    create?: XOR<ChurchCreateWithoutMariagesInput, ChurchUncheckedCreateWithoutMariagesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMariagesInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutMariagesNestedInput = {
    create?: XOR<ChurchCreateWithoutMariagesInput, ChurchUncheckedCreateWithoutMariagesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMariagesInput
    upsert?: ChurchUpsertWithoutMariagesInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutMariagesInput, ChurchUpdateWithoutMariagesInput>, ChurchUncheckedUpdateWithoutMariagesInput>
  }

  export type ChurchCreateNestedOneWithoutFuneralsInput = {
    create?: XOR<ChurchCreateWithoutFuneralsInput, ChurchUncheckedCreateWithoutFuneralsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFuneralsInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutFuneralsNestedInput = {
    create?: XOR<ChurchCreateWithoutFuneralsInput, ChurchUncheckedCreateWithoutFuneralsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFuneralsInput
    upsert?: ChurchUpsertWithoutFuneralsInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutFuneralsInput, ChurchUpdateWithoutFuneralsInput>, ChurchUncheckedUpdateWithoutFuneralsInput>
  }

  export type ChurchCreateNestedOneWithoutPresentationsInput = {
    create?: XOR<ChurchCreateWithoutPresentationsInput, ChurchUncheckedCreateWithoutPresentationsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutPresentationsInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutPresentationsNestedInput = {
    create?: XOR<ChurchCreateWithoutPresentationsInput, ChurchUncheckedCreateWithoutPresentationsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutPresentationsInput
    upsert?: ChurchUpsertWithoutPresentationsInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutPresentationsInput, ChurchUpdateWithoutPresentationsInput>, ChurchUncheckedUpdateWithoutPresentationsInput>
  }

  export type ChurchCreateNestedOneWithoutBatismInput = {
    create?: XOR<ChurchCreateWithoutBatismInput, ChurchUncheckedCreateWithoutBatismInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutBatismInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutBatismNestedInput = {
    create?: XOR<ChurchCreateWithoutBatismInput, ChurchUncheckedCreateWithoutBatismInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutBatismInput
    upsert?: ChurchUpsertWithoutBatismInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutBatismInput, ChurchUpdateWithoutBatismInput>, ChurchUncheckedUpdateWithoutBatismInput>
  }

  export type ChurchCreateNestedOneWithoutDeathInput = {
    create?: XOR<ChurchCreateWithoutDeathInput, ChurchUncheckedCreateWithoutDeathInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutDeathInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutDeathNestedInput = {
    create?: XOR<ChurchCreateWithoutDeathInput, ChurchUncheckedCreateWithoutDeathInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutDeathInput
    upsert?: ChurchUpsertWithoutDeathInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutDeathInput, ChurchUpdateWithoutDeathInput>, ChurchUncheckedUpdateWithoutDeathInput>
  }

  export type ChurchCreateNestedOneWithoutSundayClassInput = {
    create?: XOR<ChurchCreateWithoutSundayClassInput, ChurchUncheckedCreateWithoutSundayClassInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutSundayClassInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutSundayClassNestedInput = {
    create?: XOR<ChurchCreateWithoutSundayClassInput, ChurchUncheckedCreateWithoutSundayClassInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutSundayClassInput
    upsert?: ChurchUpsertWithoutSundayClassInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutSundayClassInput, ChurchUpdateWithoutSundayClassInput>, ChurchUncheckedUpdateWithoutSundayClassInput>
  }

  export type ChurchCreateNestedOneWithoutExpenseInput = {
    create?: XOR<ChurchCreateWithoutExpenseInput, ChurchUncheckedCreateWithoutExpenseInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutExpenseInput
    connect?: ChurchWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChurchUpdateOneWithoutExpenseNestedInput = {
    create?: XOR<ChurchCreateWithoutExpenseInput, ChurchUncheckedCreateWithoutExpenseInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutExpenseInput
    upsert?: ChurchUpsertWithoutExpenseInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutExpenseInput, ChurchUpdateWithoutExpenseInput>, ChurchUncheckedUpdateWithoutExpenseInput>
  }

  export type ChurchCreateNestedOneWithoutOfferingInput = {
    create?: XOR<ChurchCreateWithoutOfferingInput, ChurchUncheckedCreateWithoutOfferingInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutOfferingInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutOfferingNestedInput = {
    create?: XOR<ChurchCreateWithoutOfferingInput, ChurchUncheckedCreateWithoutOfferingInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutOfferingInput
    upsert?: ChurchUpsertWithoutOfferingInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutOfferingInput, ChurchUpdateWithoutOfferingInput>, ChurchUncheckedUpdateWithoutOfferingInput>
  }

  export type ChurchCreateNestedOneWithoutTithingInput = {
    create?: XOR<ChurchCreateWithoutTithingInput, ChurchUncheckedCreateWithoutTithingInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutTithingInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutTithingNestedInput = {
    create?: XOR<ChurchCreateWithoutTithingInput, ChurchUncheckedCreateWithoutTithingInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutTithingInput
    upsert?: ChurchUpsertWithoutTithingInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutTithingInput, ChurchUpdateWithoutTithingInput>, ChurchUncheckedUpdateWithoutTithingInput>
  }

  export type ChurchCreateNestedOneWithoutDonationInput = {
    create?: XOR<ChurchCreateWithoutDonationInput, ChurchUncheckedCreateWithoutDonationInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutDonationInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutDonationNestedInput = {
    create?: XOR<ChurchCreateWithoutDonationInput, ChurchUncheckedCreateWithoutDonationInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutDonationInput
    upsert?: ChurchUpsertWithoutDonationInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutDonationInput, ChurchUpdateWithoutDonationInput>, ChurchUncheckedUpdateWithoutDonationInput>
  }

  export type ChurchCreateNestedOneWithoutMoissonInput = {
    create?: XOR<ChurchCreateWithoutMoissonInput, ChurchUncheckedCreateWithoutMoissonInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMoissonInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutMoissonNestedInput = {
    create?: XOR<ChurchCreateWithoutMoissonInput, ChurchUncheckedCreateWithoutMoissonInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMoissonInput
    upsert?: ChurchUpsertWithoutMoissonInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutMoissonInput, ChurchUpdateWithoutMoissonInput>, ChurchUncheckedUpdateWithoutMoissonInput>
  }

  export type ChurchCreateNestedOneWithoutComiteesInput = {
    create?: XOR<ChurchCreateWithoutComiteesInput, ChurchUncheckedCreateWithoutComiteesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutComiteesInput
    connect?: ChurchWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutLeadingComitteesInput = {
    create?: XOR<UserCreateWithoutLeadingComitteesInput, UserUncheckedCreateWithoutLeadingComitteesInput> | UserCreateWithoutLeadingComitteesInput[] | UserUncheckedCreateWithoutLeadingComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLeadingComitteesInput | UserCreateOrConnectWithoutLeadingComitteesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutMemberComitteesInput = {
    create?: XOR<UserCreateWithoutMemberComitteesInput, UserUncheckedCreateWithoutMemberComitteesInput> | UserCreateWithoutMemberComitteesInput[] | UserUncheckedCreateWithoutMemberComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberComitteesInput | UserCreateOrConnectWithoutMemberComitteesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutLeadingComitteesInput = {
    create?: XOR<UserCreateWithoutLeadingComitteesInput, UserUncheckedCreateWithoutLeadingComitteesInput> | UserCreateWithoutLeadingComitteesInput[] | UserUncheckedCreateWithoutLeadingComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLeadingComitteesInput | UserCreateOrConnectWithoutLeadingComitteesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutMemberComitteesInput = {
    create?: XOR<UserCreateWithoutMemberComitteesInput, UserUncheckedCreateWithoutMemberComitteesInput> | UserCreateWithoutMemberComitteesInput[] | UserUncheckedCreateWithoutMemberComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberComitteesInput | UserCreateOrConnectWithoutMemberComitteesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ChurchUpdateOneWithoutComiteesNestedInput = {
    create?: XOR<ChurchCreateWithoutComiteesInput, ChurchUncheckedCreateWithoutComiteesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutComiteesInput
    upsert?: ChurchUpsertWithoutComiteesInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutComiteesInput, ChurchUpdateWithoutComiteesInput>, ChurchUncheckedUpdateWithoutComiteesInput>
  }

  export type UserUpdateManyWithoutLeadingComitteesNestedInput = {
    create?: XOR<UserCreateWithoutLeadingComitteesInput, UserUncheckedCreateWithoutLeadingComitteesInput> | UserCreateWithoutLeadingComitteesInput[] | UserUncheckedCreateWithoutLeadingComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLeadingComitteesInput | UserCreateOrConnectWithoutLeadingComitteesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLeadingComitteesInput | UserUpsertWithWhereUniqueWithoutLeadingComitteesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLeadingComitteesInput | UserUpdateWithWhereUniqueWithoutLeadingComitteesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLeadingComitteesInput | UserUpdateManyWithWhereWithoutLeadingComitteesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutMemberComitteesNestedInput = {
    create?: XOR<UserCreateWithoutMemberComitteesInput, UserUncheckedCreateWithoutMemberComitteesInput> | UserCreateWithoutMemberComitteesInput[] | UserUncheckedCreateWithoutMemberComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberComitteesInput | UserCreateOrConnectWithoutMemberComitteesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMemberComitteesInput | UserUpsertWithWhereUniqueWithoutMemberComitteesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMemberComitteesInput | UserUpdateWithWhereUniqueWithoutMemberComitteesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMemberComitteesInput | UserUpdateManyWithWhereWithoutMemberComitteesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutLeadingComitteesNestedInput = {
    create?: XOR<UserCreateWithoutLeadingComitteesInput, UserUncheckedCreateWithoutLeadingComitteesInput> | UserCreateWithoutLeadingComitteesInput[] | UserUncheckedCreateWithoutLeadingComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLeadingComitteesInput | UserCreateOrConnectWithoutLeadingComitteesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLeadingComitteesInput | UserUpsertWithWhereUniqueWithoutLeadingComitteesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLeadingComitteesInput | UserUpdateWithWhereUniqueWithoutLeadingComitteesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLeadingComitteesInput | UserUpdateManyWithWhereWithoutLeadingComitteesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutMemberComitteesNestedInput = {
    create?: XOR<UserCreateWithoutMemberComitteesInput, UserUncheckedCreateWithoutMemberComitteesInput> | UserCreateWithoutMemberComitteesInput[] | UserUncheckedCreateWithoutMemberComitteesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMemberComitteesInput | UserCreateOrConnectWithoutMemberComitteesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMemberComitteesInput | UserUpsertWithWhereUniqueWithoutMemberComitteesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMemberComitteesInput | UserUpdateWithWhereUniqueWithoutMemberComitteesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMemberComitteesInput | UserUpdateManyWithWhereWithoutMemberComitteesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChurchCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<ChurchCreateWithoutAppointmentsInput, ChurchUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutAppointmentsInput
    connect?: ChurchWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutUserAppointmentsInput = {
    create?: XOR<UserCreateWithoutUserAppointmentsInput, UserUncheckedCreateWithoutUserAppointmentsInput> | UserCreateWithoutUserAppointmentsInput[] | UserUncheckedCreateWithoutUserAppointmentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserAppointmentsInput | UserCreateOrConnectWithoutUserAppointmentsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutUserAppointmentsInput = {
    create?: XOR<UserCreateWithoutUserAppointmentsInput, UserUncheckedCreateWithoutUserAppointmentsInput> | UserCreateWithoutUserAppointmentsInput[] | UserUncheckedCreateWithoutUserAppointmentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserAppointmentsInput | UserCreateOrConnectWithoutUserAppointmentsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ChurchUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<ChurchCreateWithoutAppointmentsInput, ChurchUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutAppointmentsInput
    upsert?: ChurchUpsertWithoutAppointmentsInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutAppointmentsInput, ChurchUpdateWithoutAppointmentsInput>, ChurchUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateManyWithoutUserAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutUserAppointmentsInput, UserUncheckedCreateWithoutUserAppointmentsInput> | UserCreateWithoutUserAppointmentsInput[] | UserUncheckedCreateWithoutUserAppointmentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserAppointmentsInput | UserCreateOrConnectWithoutUserAppointmentsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUserAppointmentsInput | UserUpsertWithWhereUniqueWithoutUserAppointmentsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUserAppointmentsInput | UserUpdateWithWhereUniqueWithoutUserAppointmentsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUserAppointmentsInput | UserUpdateManyWithWhereWithoutUserAppointmentsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutUserAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutUserAppointmentsInput, UserUncheckedCreateWithoutUserAppointmentsInput> | UserCreateWithoutUserAppointmentsInput[] | UserUncheckedCreateWithoutUserAppointmentsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUserAppointmentsInput | UserCreateOrConnectWithoutUserAppointmentsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUserAppointmentsInput | UserUpsertWithWhereUniqueWithoutUserAppointmentsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUserAppointmentsInput | UserUpdateWithWhereUniqueWithoutUserAppointmentsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUserAppointmentsInput | UserUpdateManyWithWhereWithoutUserAppointmentsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChurchCreateNestedOneWithoutTransfersFromInput = {
    create?: XOR<ChurchCreateWithoutTransfersFromInput, ChurchUncheckedCreateWithoutTransfersFromInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutTransfersFromInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchCreateNestedOneWithoutTransfersToInput = {
    create?: XOR<ChurchCreateWithoutTransfersToInput, ChurchUncheckedCreateWithoutTransfersToInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutTransfersToInput
    connect?: ChurchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransfersInput = {
    create?: XOR<UserCreateWithoutTransfersInput, UserUncheckedCreateWithoutTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransfersInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchUpdateOneRequiredWithoutTransfersFromNestedInput = {
    create?: XOR<ChurchCreateWithoutTransfersFromInput, ChurchUncheckedCreateWithoutTransfersFromInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutTransfersFromInput
    upsert?: ChurchUpsertWithoutTransfersFromInput
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutTransfersFromInput, ChurchUpdateWithoutTransfersFromInput>, ChurchUncheckedUpdateWithoutTransfersFromInput>
  }

  export type ChurchUpdateOneRequiredWithoutTransfersToNestedInput = {
    create?: XOR<ChurchCreateWithoutTransfersToInput, ChurchUncheckedCreateWithoutTransfersToInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutTransfersToInput
    upsert?: ChurchUpsertWithoutTransfersToInput
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutTransfersToInput, ChurchUpdateWithoutTransfersToInput>, ChurchUncheckedUpdateWithoutTransfersToInput>
  }

  export type UserUpdateOneRequiredWithoutTransfersNestedInput = {
    create?: XOR<UserCreateWithoutTransfersInput, UserUncheckedCreateWithoutTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransfersInput
    upsert?: UserUpsertWithoutTransfersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransfersInput, UserUpdateWithoutTransfersInput>, UserUncheckedUpdateWithoutTransfersInput>
  }

  export type ChurchCreateNestedManyWithoutMissionInput = {
    create?: XOR<ChurchCreateWithoutMissionInput, ChurchUncheckedCreateWithoutMissionInput> | ChurchCreateWithoutMissionInput[] | ChurchUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutMissionInput | ChurchCreateOrConnectWithoutMissionInput[]
    createMany?: ChurchCreateManyMissionInputEnvelope
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
  }

  export type ChurchUncheckedCreateNestedManyWithoutMissionInput = {
    create?: XOR<ChurchCreateWithoutMissionInput, ChurchUncheckedCreateWithoutMissionInput> | ChurchCreateWithoutMissionInput[] | ChurchUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutMissionInput | ChurchCreateOrConnectWithoutMissionInput[]
    createMany?: ChurchCreateManyMissionInputEnvelope
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
  }

  export type ChurchUpdateManyWithoutMissionNestedInput = {
    create?: XOR<ChurchCreateWithoutMissionInput, ChurchUncheckedCreateWithoutMissionInput> | ChurchCreateWithoutMissionInput[] | ChurchUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutMissionInput | ChurchCreateOrConnectWithoutMissionInput[]
    upsert?: ChurchUpsertWithWhereUniqueWithoutMissionInput | ChurchUpsertWithWhereUniqueWithoutMissionInput[]
    createMany?: ChurchCreateManyMissionInputEnvelope
    set?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    disconnect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    delete?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    update?: ChurchUpdateWithWhereUniqueWithoutMissionInput | ChurchUpdateWithWhereUniqueWithoutMissionInput[]
    updateMany?: ChurchUpdateManyWithWhereWithoutMissionInput | ChurchUpdateManyWithWhereWithoutMissionInput[]
    deleteMany?: ChurchScalarWhereInput | ChurchScalarWhereInput[]
  }

  export type ChurchUncheckedUpdateManyWithoutMissionNestedInput = {
    create?: XOR<ChurchCreateWithoutMissionInput, ChurchUncheckedCreateWithoutMissionInput> | ChurchCreateWithoutMissionInput[] | ChurchUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: ChurchCreateOrConnectWithoutMissionInput | ChurchCreateOrConnectWithoutMissionInput[]
    upsert?: ChurchUpsertWithWhereUniqueWithoutMissionInput | ChurchUpsertWithWhereUniqueWithoutMissionInput[]
    createMany?: ChurchCreateManyMissionInputEnvelope
    set?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    disconnect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    delete?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    connect?: ChurchWhereUniqueInput | ChurchWhereUniqueInput[]
    update?: ChurchUpdateWithWhereUniqueWithoutMissionInput | ChurchUpdateWithWhereUniqueWithoutMissionInput[]
    updateMany?: ChurchUpdateManyWithWhereWithoutMissionInput | ChurchUpdateManyWithWhereWithoutMissionInput[]
    deleteMany?: ChurchScalarWhereInput | ChurchScalarWhereInput[]
  }

  export type ChurchCreateNestedOneWithoutSanctionInput = {
    create?: XOR<ChurchCreateWithoutSanctionInput, ChurchUncheckedCreateWithoutSanctionInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutSanctionInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutSanctionNestedInput = {
    create?: XOR<ChurchCreateWithoutSanctionInput, ChurchUncheckedCreateWithoutSanctionInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutSanctionInput
    upsert?: ChurchUpsertWithoutSanctionInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutSanctionInput, ChurchUpdateWithoutSanctionInput>, ChurchUncheckedUpdateWithoutSanctionInput>
  }

  export type ChurchCreateNestedOneWithoutMinistryInput = {
    create?: XOR<ChurchCreateWithoutMinistryInput, ChurchUncheckedCreateWithoutMinistryInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMinistryInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutMinistryNestedInput = {
    create?: XOR<ChurchCreateWithoutMinistryInput, ChurchUncheckedCreateWithoutMinistryInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMinistryInput
    upsert?: ChurchUpsertWithoutMinistryInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutMinistryInput, ChurchUpdateWithoutMinistryInput>, ChurchUncheckedUpdateWithoutMinistryInput>
  }

  export type ChurchCreateNestedOneWithoutPasteurInput = {
    create?: XOR<ChurchCreateWithoutPasteurInput, ChurchUncheckedCreateWithoutPasteurInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutPasteurInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneWithoutPasteurNestedInput = {
    create?: XOR<ChurchCreateWithoutPasteurInput, ChurchUncheckedCreateWithoutPasteurInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutPasteurInput
    upsert?: ChurchUpsertWithoutPasteurInput
    disconnect?: ChurchWhereInput | boolean
    delete?: ChurchWhereInput | boolean
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutPasteurInput, ChurchUpdateWithoutPasteurInput>, ChurchUncheckedUpdateWithoutPasteurInput>
  }

  export type CommuneCreateNestedManyWithoutDepartementInput = {
    create?: XOR<CommuneCreateWithoutDepartementInput, CommuneUncheckedCreateWithoutDepartementInput> | CommuneCreateWithoutDepartementInput[] | CommuneUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: CommuneCreateOrConnectWithoutDepartementInput | CommuneCreateOrConnectWithoutDepartementInput[]
    createMany?: CommuneCreateManyDepartementInputEnvelope
    connect?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
  }

  export type CommuneUncheckedCreateNestedManyWithoutDepartementInput = {
    create?: XOR<CommuneCreateWithoutDepartementInput, CommuneUncheckedCreateWithoutDepartementInput> | CommuneCreateWithoutDepartementInput[] | CommuneUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: CommuneCreateOrConnectWithoutDepartementInput | CommuneCreateOrConnectWithoutDepartementInput[]
    createMany?: CommuneCreateManyDepartementInputEnvelope
    connect?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
  }

  export type CommuneUpdateManyWithoutDepartementNestedInput = {
    create?: XOR<CommuneCreateWithoutDepartementInput, CommuneUncheckedCreateWithoutDepartementInput> | CommuneCreateWithoutDepartementInput[] | CommuneUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: CommuneCreateOrConnectWithoutDepartementInput | CommuneCreateOrConnectWithoutDepartementInput[]
    upsert?: CommuneUpsertWithWhereUniqueWithoutDepartementInput | CommuneUpsertWithWhereUniqueWithoutDepartementInput[]
    createMany?: CommuneCreateManyDepartementInputEnvelope
    set?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    disconnect?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    delete?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    connect?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    update?: CommuneUpdateWithWhereUniqueWithoutDepartementInput | CommuneUpdateWithWhereUniqueWithoutDepartementInput[]
    updateMany?: CommuneUpdateManyWithWhereWithoutDepartementInput | CommuneUpdateManyWithWhereWithoutDepartementInput[]
    deleteMany?: CommuneScalarWhereInput | CommuneScalarWhereInput[]
  }

  export type CommuneUncheckedUpdateManyWithoutDepartementNestedInput = {
    create?: XOR<CommuneCreateWithoutDepartementInput, CommuneUncheckedCreateWithoutDepartementInput> | CommuneCreateWithoutDepartementInput[] | CommuneUncheckedCreateWithoutDepartementInput[]
    connectOrCreate?: CommuneCreateOrConnectWithoutDepartementInput | CommuneCreateOrConnectWithoutDepartementInput[]
    upsert?: CommuneUpsertWithWhereUniqueWithoutDepartementInput | CommuneUpsertWithWhereUniqueWithoutDepartementInput[]
    createMany?: CommuneCreateManyDepartementInputEnvelope
    set?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    disconnect?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    delete?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    connect?: CommuneWhereUniqueInput | CommuneWhereUniqueInput[]
    update?: CommuneUpdateWithWhereUniqueWithoutDepartementInput | CommuneUpdateWithWhereUniqueWithoutDepartementInput[]
    updateMany?: CommuneUpdateManyWithWhereWithoutDepartementInput | CommuneUpdateManyWithWhereWithoutDepartementInput[]
    deleteMany?: CommuneScalarWhereInput | CommuneScalarWhereInput[]
  }

  export type DepartementCreateNestedOneWithoutCommuneInput = {
    create?: XOR<DepartementCreateWithoutCommuneInput, DepartementUncheckedCreateWithoutCommuneInput>
    connectOrCreate?: DepartementCreateOrConnectWithoutCommuneInput
    connect?: DepartementWhereUniqueInput
  }

  export type SectionCommunaleCreateNestedManyWithoutCommuneInput = {
    create?: XOR<SectionCommunaleCreateWithoutCommuneInput, SectionCommunaleUncheckedCreateWithoutCommuneInput> | SectionCommunaleCreateWithoutCommuneInput[] | SectionCommunaleUncheckedCreateWithoutCommuneInput[]
    connectOrCreate?: SectionCommunaleCreateOrConnectWithoutCommuneInput | SectionCommunaleCreateOrConnectWithoutCommuneInput[]
    createMany?: SectionCommunaleCreateManyCommuneInputEnvelope
    connect?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
  }

  export type SectionCommunaleUncheckedCreateNestedManyWithoutCommuneInput = {
    create?: XOR<SectionCommunaleCreateWithoutCommuneInput, SectionCommunaleUncheckedCreateWithoutCommuneInput> | SectionCommunaleCreateWithoutCommuneInput[] | SectionCommunaleUncheckedCreateWithoutCommuneInput[]
    connectOrCreate?: SectionCommunaleCreateOrConnectWithoutCommuneInput | SectionCommunaleCreateOrConnectWithoutCommuneInput[]
    createMany?: SectionCommunaleCreateManyCommuneInputEnvelope
    connect?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
  }

  export type DepartementUpdateOneRequiredWithoutCommuneNestedInput = {
    create?: XOR<DepartementCreateWithoutCommuneInput, DepartementUncheckedCreateWithoutCommuneInput>
    connectOrCreate?: DepartementCreateOrConnectWithoutCommuneInput
    upsert?: DepartementUpsertWithoutCommuneInput
    connect?: DepartementWhereUniqueInput
    update?: XOR<XOR<DepartementUpdateToOneWithWhereWithoutCommuneInput, DepartementUpdateWithoutCommuneInput>, DepartementUncheckedUpdateWithoutCommuneInput>
  }

  export type SectionCommunaleUpdateManyWithoutCommuneNestedInput = {
    create?: XOR<SectionCommunaleCreateWithoutCommuneInput, SectionCommunaleUncheckedCreateWithoutCommuneInput> | SectionCommunaleCreateWithoutCommuneInput[] | SectionCommunaleUncheckedCreateWithoutCommuneInput[]
    connectOrCreate?: SectionCommunaleCreateOrConnectWithoutCommuneInput | SectionCommunaleCreateOrConnectWithoutCommuneInput[]
    upsert?: SectionCommunaleUpsertWithWhereUniqueWithoutCommuneInput | SectionCommunaleUpsertWithWhereUniqueWithoutCommuneInput[]
    createMany?: SectionCommunaleCreateManyCommuneInputEnvelope
    set?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    disconnect?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    delete?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    connect?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    update?: SectionCommunaleUpdateWithWhereUniqueWithoutCommuneInput | SectionCommunaleUpdateWithWhereUniqueWithoutCommuneInput[]
    updateMany?: SectionCommunaleUpdateManyWithWhereWithoutCommuneInput | SectionCommunaleUpdateManyWithWhereWithoutCommuneInput[]
    deleteMany?: SectionCommunaleScalarWhereInput | SectionCommunaleScalarWhereInput[]
  }

  export type SectionCommunaleUncheckedUpdateManyWithoutCommuneNestedInput = {
    create?: XOR<SectionCommunaleCreateWithoutCommuneInput, SectionCommunaleUncheckedCreateWithoutCommuneInput> | SectionCommunaleCreateWithoutCommuneInput[] | SectionCommunaleUncheckedCreateWithoutCommuneInput[]
    connectOrCreate?: SectionCommunaleCreateOrConnectWithoutCommuneInput | SectionCommunaleCreateOrConnectWithoutCommuneInput[]
    upsert?: SectionCommunaleUpsertWithWhereUniqueWithoutCommuneInput | SectionCommunaleUpsertWithWhereUniqueWithoutCommuneInput[]
    createMany?: SectionCommunaleCreateManyCommuneInputEnvelope
    set?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    disconnect?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    delete?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    connect?: SectionCommunaleWhereUniqueInput | SectionCommunaleWhereUniqueInput[]
    update?: SectionCommunaleUpdateWithWhereUniqueWithoutCommuneInput | SectionCommunaleUpdateWithWhereUniqueWithoutCommuneInput[]
    updateMany?: SectionCommunaleUpdateManyWithWhereWithoutCommuneInput | SectionCommunaleUpdateManyWithWhereWithoutCommuneInput[]
    deleteMany?: SectionCommunaleScalarWhereInput | SectionCommunaleScalarWhereInput[]
  }

  export type CommuneCreateNestedOneWithoutSectionCommunaleInput = {
    create?: XOR<CommuneCreateWithoutSectionCommunaleInput, CommuneUncheckedCreateWithoutSectionCommunaleInput>
    connectOrCreate?: CommuneCreateOrConnectWithoutSectionCommunaleInput
    connect?: CommuneWhereUniqueInput
  }

  export type CommuneUpdateOneRequiredWithoutSectionCommunaleNestedInput = {
    create?: XOR<CommuneCreateWithoutSectionCommunaleInput, CommuneUncheckedCreateWithoutSectionCommunaleInput>
    connectOrCreate?: CommuneCreateOrConnectWithoutSectionCommunaleInput
    upsert?: CommuneUpsertWithoutSectionCommunaleInput
    connect?: CommuneWhereUniqueInput
    update?: XOR<XOR<CommuneUpdateToOneWithWhereWithoutSectionCommunaleInput, CommuneUpdateWithoutSectionCommunaleInput>, CommuneUncheckedUpdateWithoutSectionCommunaleInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatutPresenceFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPresence | EnumStatutPresenceFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPresence[]
    notIn?: $Enums.StatutPresence[]
    not?: NestedEnumStatutPresenceFilter<$PrismaModel> | $Enums.StatutPresence
  }

  export type NestedEnumStatutPresenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPresence | EnumStatutPresenceFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPresence[]
    notIn?: $Enums.StatutPresence[]
    not?: NestedEnumStatutPresenceWithAggregatesFilter<$PrismaModel> | $Enums.StatutPresence
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutPresenceFilter<$PrismaModel>
    _max?: NestedEnumStatutPresenceFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PresenceCreateWithoutServiceInput = {
    id?: string
    statut: $Enums.StatutPresence
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateWithoutServiceInput = {
    id?: string
    statut: $Enums.StatutPresence
    utilisateurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceCreateOrConnectWithoutServiceInput = {
    where: PresenceWhereUniqueInput
    create: XOR<PresenceCreateWithoutServiceInput, PresenceUncheckedCreateWithoutServiceInput>
  }

  export type PresenceCreateManyServiceInputEnvelope = {
    data: PresenceCreateManyServiceInput | PresenceCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ChurchCreateWithoutServicesInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutServicesInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutServicesInput, ChurchUncheckedCreateWithoutServicesInput>
  }

  export type PresenceUpsertWithWhereUniqueWithoutServiceInput = {
    where: PresenceWhereUniqueInput
    update: XOR<PresenceUpdateWithoutServiceInput, PresenceUncheckedUpdateWithoutServiceInput>
    create: XOR<PresenceCreateWithoutServiceInput, PresenceUncheckedCreateWithoutServiceInput>
  }

  export type PresenceUpdateWithWhereUniqueWithoutServiceInput = {
    where: PresenceWhereUniqueInput
    data: XOR<PresenceUpdateWithoutServiceInput, PresenceUncheckedUpdateWithoutServiceInput>
  }

  export type PresenceUpdateManyWithWhereWithoutServiceInput = {
    where: PresenceScalarWhereInput
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyWithoutServiceInput>
  }

  export type PresenceScalarWhereInput = {
    AND?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
    OR?: PresenceScalarWhereInput[]
    NOT?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
    id?: StringFilter<"Presence"> | string
    statut?: EnumStatutPresenceFilter<"Presence"> | $Enums.StatutPresence
    utilisateurId?: StringFilter<"Presence"> | string
    createdAt?: DateTimeFilter<"Presence"> | Date | string
    updatedAt?: DateTimeFilter<"Presence"> | Date | string
    serviceId?: StringFilter<"Presence"> | string
  }

  export type ChurchUpsertWithoutServicesInput = {
    update: XOR<ChurchUpdateWithoutServicesInput, ChurchUncheckedUpdateWithoutServicesInput>
    create: XOR<ChurchCreateWithoutServicesInput, ChurchUncheckedCreateWithoutServicesInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutServicesInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutServicesInput, ChurchUncheckedUpdateWithoutServicesInput>
  }

  export type ChurchUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ServiceCreateWithoutPresencesInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church?: ChurchCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateWithoutPresencesInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    churchId?: string | null
  }

  export type ServiceCreateOrConnectWithoutPresencesInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutPresencesInput, ServiceUncheckedCreateWithoutPresencesInput>
  }

  export type UserCreateWithoutPresencesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutPresencesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutPresencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPresencesInput, UserUncheckedCreateWithoutPresencesInput>
  }

  export type ServiceUpsertWithoutPresencesInput = {
    update: XOR<ServiceUpdateWithoutPresencesInput, ServiceUncheckedUpdateWithoutPresencesInput>
    create: XOR<ServiceCreateWithoutPresencesInput, ServiceUncheckedCreateWithoutPresencesInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutPresencesInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutPresencesInput, ServiceUncheckedUpdateWithoutPresencesInput>
  }

  export type ServiceUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutPresencesInput = {
    update: XOR<UserUpdateWithoutPresencesInput, UserUncheckedUpdateWithoutPresencesInput>
    create: XOR<UserCreateWithoutPresencesInput, UserUncheckedCreateWithoutPresencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPresencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPresencesInput, UserUncheckedUpdateWithoutPresencesInput>
  }

  export type UserUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type ChurchCreateWithoutTtiInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutTtiInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutTtiInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutTtiInput, ChurchUncheckedCreateWithoutTtiInput>
  }

  export type ChurchCreateManyTtiInputEnvelope = {
    data: ChurchCreateManyTtiInput | ChurchCreateManyTtiInput[]
    skipDuplicates?: boolean
  }

  export type ChurchUpsertWithWhereUniqueWithoutTtiInput = {
    where: ChurchWhereUniqueInput
    update: XOR<ChurchUpdateWithoutTtiInput, ChurchUncheckedUpdateWithoutTtiInput>
    create: XOR<ChurchCreateWithoutTtiInput, ChurchUncheckedCreateWithoutTtiInput>
  }

  export type ChurchUpdateWithWhereUniqueWithoutTtiInput = {
    where: ChurchWhereUniqueInput
    data: XOR<ChurchUpdateWithoutTtiInput, ChurchUncheckedUpdateWithoutTtiInput>
  }

  export type ChurchUpdateManyWithWhereWithoutTtiInput = {
    where: ChurchScalarWhereInput
    data: XOR<ChurchUpdateManyMutationInput, ChurchUncheckedUpdateManyWithoutTtiInput>
  }

  export type ChurchScalarWhereInput = {
    AND?: ChurchScalarWhereInput | ChurchScalarWhereInput[]
    OR?: ChurchScalarWhereInput[]
    NOT?: ChurchScalarWhereInput | ChurchScalarWhereInput[]
    id?: StringFilter<"Church"> | string
    name?: StringFilter<"Church"> | string
    quantity?: StringFilter<"Church"> | string
    address?: StringNullableFilter<"Church"> | string | null
    phone?: StringNullableFilter<"Church"> | string | null
    anthem?: StringNullableFilter<"Church"> | string | null
    facebook?: StringNullableFilter<"Church"> | string | null
    instagram?: StringNullableFilter<"Church"> | string | null
    createdAt?: DateTimeFilter<"Church"> | Date | string
    updatedAt?: DateTimeFilter<"Church"> | Date | string
    picture?: StringNullableFilter<"Church"> | string | null
    missionId?: StringNullableFilter<"Church"> | string | null
    email?: StringNullableFilter<"Church"> | string | null
    mainPasteur?: StringNullableFilter<"Church"> | string | null
    whatsapp?: StringNullableFilter<"Church"> | string | null
    latitude?: StringNullableFilter<"Church"> | string | null
    longitude?: StringNullableFilter<"Church"> | string | null
    ttiId?: StringNullableFilter<"Church"> | string | null
    addressId?: StringNullableFilter<"Church"> | string | null
  }

  export type ChurchCreateWithoutFullAddressInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutFullAddressInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutFullAddressInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutFullAddressInput, ChurchUncheckedCreateWithoutFullAddressInput>
  }

  export type ChurchUpsertWithoutFullAddressInput = {
    update: XOR<ChurchUpdateWithoutFullAddressInput, ChurchUncheckedUpdateWithoutFullAddressInput>
    create: XOR<ChurchCreateWithoutFullAddressInput, ChurchUncheckedCreateWithoutFullAddressInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutFullAddressInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutFullAddressInput, ChurchUncheckedUpdateWithoutFullAddressInput>
  }

  export type ChurchUpdateWithoutFullAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutFullAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type BaptismCreateWithoutChurchInput = {
    id?: string
    fullName: string
    birthDate: Date | string
    placeOfBirth: string
    baptismDate: Date | string
    baptismCertificate?: string | null
    officiantName: string
    withness: string
    previousChurch: string
    testimony: string
    conversionDate: Date | string
    status?: string | null
    baptismLocation: string
    endDate?: string | null
    startDate?: string | null
  }

  export type BaptismUncheckedCreateWithoutChurchInput = {
    id?: string
    fullName: string
    birthDate: Date | string
    placeOfBirth: string
    baptismDate: Date | string
    baptismCertificate?: string | null
    officiantName: string
    withness: string
    previousChurch: string
    testimony: string
    conversionDate: Date | string
    status?: string | null
    baptismLocation: string
    endDate?: string | null
    startDate?: string | null
  }

  export type BaptismCreateOrConnectWithoutChurchInput = {
    where: BaptismWhereUniqueInput
    create: XOR<BaptismCreateWithoutChurchInput, BaptismUncheckedCreateWithoutChurchInput>
  }

  export type BaptismCreateManyChurchInputEnvelope = {
    data: BaptismCreateManyChurchInput | BaptismCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type AddressCreateWithoutChurchInput = {
    id?: string
    country?: string | null
    departement?: string | null
    commune?: string | null
    sectionCommunale?: string | null
    telephone?: string | null
    rue?: string | null
  }

  export type AddressUncheckedCreateWithoutChurchInput = {
    id?: string
    country?: string | null
    departement?: string | null
    commune?: string | null
    sectionCommunale?: string | null
    telephone?: string | null
    rue?: string | null
  }

  export type AddressCreateOrConnectWithoutChurchInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutChurchInput, AddressUncheckedCreateWithoutChurchInput>
  }

  export type MissionCreateWithoutChurchInput = {
    id?: string
    missionName: string
    description: string
    status: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presidentName?: string | null
  }

  export type MissionUncheckedCreateWithoutChurchInput = {
    id?: string
    missionName: string
    description: string
    status: string
    location: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presidentName?: string | null
  }

  export type MissionCreateOrConnectWithoutChurchInput = {
    where: MissionWhereUniqueInput
    create: XOR<MissionCreateWithoutChurchInput, MissionUncheckedCreateWithoutChurchInput>
  }

  export type TtiCreateWithoutChurchInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TtiUncheckedCreateWithoutChurchInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TtiCreateOrConnectWithoutChurchInput = {
    where: TtiWhereUniqueInput
    create: XOR<TtiCreateWithoutChurchInput, TtiUncheckedCreateWithoutChurchInput>
  }

  export type EventCreateWithoutChurchInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    frequency: string
    startDate: string
    endDate: string
    createAt?: Date | string
    updateAt?: Date | string
    isRecurring?: boolean
    endPeriode?: string | null
    startPeriode?: string | null
  }

  export type EventUncheckedCreateWithoutChurchInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    frequency: string
    startDate: string
    endDate: string
    createAt?: Date | string
    updateAt?: Date | string
    isRecurring?: boolean
    endPeriode?: string | null
    startPeriode?: string | null
  }

  export type EventCreateOrConnectWithoutChurchInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutChurchInput, EventUncheckedCreateWithoutChurchInput>
  }

  export type EventCreateManyChurchInputEnvelope = {
    data: EventCreateManyChurchInput | EventCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type FuneralCreateWithoutChurchInput = {
    id?: string
    fullname: string
    birthDate: Date | string
    funeralDate: Date | string
    funeralTime: string
    relationShip: string
    email: string
    deathCertificate?: string | null
    nextOfKin: string
    officiantName: string
    description: string
    funeralLocation: string
    createdAt?: Date | string
    status?: string
    updatedAt?: Date | string
    telephone?: string | null
  }

  export type FuneralUncheckedCreateWithoutChurchInput = {
    id?: string
    fullname: string
    birthDate: Date | string
    funeralDate: Date | string
    funeralTime: string
    relationShip: string
    email: string
    deathCertificate?: string | null
    nextOfKin: string
    officiantName: string
    description: string
    funeralLocation: string
    createdAt?: Date | string
    status?: string
    updatedAt?: Date | string
    telephone?: string | null
  }

  export type FuneralCreateOrConnectWithoutChurchInput = {
    where: FuneralWhereUniqueInput
    create: XOR<FuneralCreateWithoutChurchInput, FuneralUncheckedCreateWithoutChurchInput>
  }

  export type FuneralCreateManyChurchInputEnvelope = {
    data: FuneralCreateManyChurchInput | FuneralCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type GroupeCreateWithoutChurchInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
    users?: UserCreateNestedManyWithoutGroupsInput
  }

  export type GroupeUncheckedCreateWithoutChurchInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
    users?: UserUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupeCreateOrConnectWithoutChurchInput = {
    where: GroupeWhereUniqueInput
    create: XOR<GroupeCreateWithoutChurchInput, GroupeUncheckedCreateWithoutChurchInput>
  }

  export type GroupeCreateManyChurchInputEnvelope = {
    data: GroupeCreateManyChurchInput | GroupeCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type MariageCreateWithoutChurchInput = {
    id?: string
    brideFullname: string
    birthDate: Date | string
    groomFullname: string
    goomBirthDate: Date | string
    weddingDate: Date | string
    weddingLocation: string
    weddingCertificate?: string | null
    officiantName: string
    brideCertificate?: string | null
    civilStateOfficer?: string | null
    grooomCertificate?: string | null
    witness?: string | null
    civilStateStateOfficer?: string | null
    witnessSignature?: string | null
  }

  export type MariageUncheckedCreateWithoutChurchInput = {
    id?: string
    brideFullname: string
    birthDate: Date | string
    groomFullname: string
    goomBirthDate: Date | string
    weddingDate: Date | string
    weddingLocation: string
    weddingCertificate?: string | null
    officiantName: string
    brideCertificate?: string | null
    civilStateOfficer?: string | null
    grooomCertificate?: string | null
    witness?: string | null
    civilStateStateOfficer?: string | null
    witnessSignature?: string | null
  }

  export type MariageCreateOrConnectWithoutChurchInput = {
    where: MariageWhereUniqueInput
    create: XOR<MariageCreateWithoutChurchInput, MariageUncheckedCreateWithoutChurchInput>
  }

  export type MariageCreateManyChurchInputEnvelope = {
    data: MariageCreateManyChurchInput | MariageCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type PresentationCreateWithoutChurchInput = {
    id?: string
    placeOfBirth: string
    birthCertificate?: string | null
    fatherName: string
    motherName: string
    phone: string
    address: string
    presentationDate: Date | string
    officiantName: string
    description?: string | null
    childName: string
    dateOfBirth: Date | string
    witness: string
  }

  export type PresentationUncheckedCreateWithoutChurchInput = {
    id?: string
    placeOfBirth: string
    birthCertificate?: string | null
    fatherName: string
    motherName: string
    phone: string
    address: string
    presentationDate: Date | string
    officiantName: string
    description?: string | null
    childName: string
    dateOfBirth: Date | string
    witness: string
  }

  export type PresentationCreateOrConnectWithoutChurchInput = {
    where: PresentationWhereUniqueInput
    create: XOR<PresentationCreateWithoutChurchInput, PresentationUncheckedCreateWithoutChurchInput>
  }

  export type PresentationCreateManyChurchInputEnvelope = {
    data: PresentationCreateManyChurchInput | PresentationCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutChurchInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presences?: PresenceCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutChurchInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
    presences?: PresenceUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutChurchInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutChurchInput, ServiceUncheckedCreateWithoutChurchInput>
  }

  export type ServiceCreateManyChurchInputEnvelope = {
    data: ServiceCreateManyChurchInput | ServiceCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutChurchInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchInput, UserUncheckedCreateWithoutChurchInput>
  }

  export type UserCreateManyChurchInputEnvelope = {
    data: UserCreateManyChurchInput | UserCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type appointmentCreateWithoutChurchInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserCreateNestedManyWithoutUserAppointmentsInput
  }

  export type appointmentUncheckedCreateWithoutChurchInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutUserAppointmentsInput
  }

  export type appointmentCreateOrConnectWithoutChurchInput = {
    where: appointmentWhereUniqueInput
    create: XOR<appointmentCreateWithoutChurchInput, appointmentUncheckedCreateWithoutChurchInput>
  }

  export type appointmentCreateManyChurchInputEnvelope = {
    data: appointmentCreateManyChurchInput | appointmentCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type comiteeCreateWithoutChurchInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    commiteeLeader?: UserCreateNestedManyWithoutLeadingComitteesInput
    commiteeMember?: UserCreateNestedManyWithoutMemberComitteesInput
  }

  export type comiteeUncheckedCreateWithoutChurchInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    commiteeLeader?: UserUncheckedCreateNestedManyWithoutLeadingComitteesInput
    commiteeMember?: UserUncheckedCreateNestedManyWithoutMemberComitteesInput
  }

  export type comiteeCreateOrConnectWithoutChurchInput = {
    where: comiteeWhereUniqueInput
    create: XOR<comiteeCreateWithoutChurchInput, comiteeUncheckedCreateWithoutChurchInput>
  }

  export type comiteeCreateManyChurchInputEnvelope = {
    data: comiteeCreateManyChurchInput | comiteeCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type deathCreateWithoutChurchInput = {
    id?: string
    deathDate: Date | string
    deathPlace: string
    deathCause: string
    deathCertificate?: string | null
    deathTime: string
    description?: string | null
    location: string
    officiantName: string
    relationShip: string
    serviceDate: Date | string
    nextOfKin: string
  }

  export type deathUncheckedCreateWithoutChurchInput = {
    id?: string
    deathDate: Date | string
    deathPlace: string
    deathCause: string
    deathCertificate?: string | null
    deathTime: string
    description?: string | null
    location: string
    officiantName: string
    relationShip: string
    serviceDate: Date | string
    nextOfKin: string
  }

  export type deathCreateOrConnectWithoutChurchInput = {
    where: deathWhereUniqueInput
    create: XOR<deathCreateWithoutChurchInput, deathUncheckedCreateWithoutChurchInput>
  }

  export type deathCreateManyChurchInputEnvelope = {
    data: deathCreateManyChurchInput | deathCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type donationCreateWithoutChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type donationUncheckedCreateWithoutChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type donationCreateOrConnectWithoutChurchInput = {
    where: donationWhereUniqueInput
    create: XOR<donationCreateWithoutChurchInput, donationUncheckedCreateWithoutChurchInput>
  }

  export type donationCreateManyChurchInputEnvelope = {
    data: donationCreateManyChurchInput | donationCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type expenseCreateWithoutChurchInput = {
    id?: string
    amount: number
    category: string
    date: Date | string
    paymentMethod: string
    description: string
  }

  export type expenseUncheckedCreateWithoutChurchInput = {
    id?: string
    amount: number
    category: string
    date: Date | string
    paymentMethod: string
    description: string
  }

  export type expenseCreateOrConnectWithoutChurchInput = {
    where: expenseWhereUniqueInput
    create: XOR<expenseCreateWithoutChurchInput, expenseUncheckedCreateWithoutChurchInput>
  }

  export type expenseCreateManyChurchInputEnvelope = {
    data: expenseCreateManyChurchInput | expenseCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type ministryCreateWithoutChurchInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ministryUncheckedCreateWithoutChurchInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ministryCreateOrConnectWithoutChurchInput = {
    where: ministryWhereUniqueInput
    create: XOR<ministryCreateWithoutChurchInput, ministryUncheckedCreateWithoutChurchInput>
  }

  export type ministryCreateManyChurchInputEnvelope = {
    data: ministryCreateManyChurchInput | ministryCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type moissonCreateWithoutChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type moissonUncheckedCreateWithoutChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type moissonCreateOrConnectWithoutChurchInput = {
    where: moissonWhereUniqueInput
    create: XOR<moissonCreateWithoutChurchInput, moissonUncheckedCreateWithoutChurchInput>
  }

  export type moissonCreateManyChurchInputEnvelope = {
    data: moissonCreateManyChurchInput | moissonCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type offeringCreateWithoutChurchInput = {
    id?: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    status?: string | null
  }

  export type offeringUncheckedCreateWithoutChurchInput = {
    id?: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    status?: string | null
  }

  export type offeringCreateOrConnectWithoutChurchInput = {
    where: offeringWhereUniqueInput
    create: XOR<offeringCreateWithoutChurchInput, offeringUncheckedCreateWithoutChurchInput>
  }

  export type offeringCreateManyChurchInputEnvelope = {
    data: offeringCreateManyChurchInput | offeringCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type pasteurCreateWithoutChurchInput = {
    id?: string
    pasteurName: string
    address: string
    phone: string
    status: string
    email: string
  }

  export type pasteurUncheckedCreateWithoutChurchInput = {
    id?: string
    pasteurName: string
    address: string
    phone: string
    status: string
    email: string
  }

  export type pasteurCreateOrConnectWithoutChurchInput = {
    where: pasteurWhereUniqueInput
    create: XOR<pasteurCreateWithoutChurchInput, pasteurUncheckedCreateWithoutChurchInput>
  }

  export type pasteurCreateManyChurchInputEnvelope = {
    data: pasteurCreateManyChurchInput | pasteurCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type sanctionCreateWithoutChurchInput = {
    id?: string
    name: string
    description: string
    startDate: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    endDate?: string | null
  }

  export type sanctionUncheckedCreateWithoutChurchInput = {
    id?: string
    name: string
    description: string
    startDate: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    endDate?: string | null
  }

  export type sanctionCreateOrConnectWithoutChurchInput = {
    where: sanctionWhereUniqueInput
    create: XOR<sanctionCreateWithoutChurchInput, sanctionUncheckedCreateWithoutChurchInput>
  }

  export type sanctionCreateManyChurchInputEnvelope = {
    data: sanctionCreateManyChurchInput | sanctionCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type sundayClassCreateWithoutChurchInput = {
    id?: string
    nom: string
    teacher: string
    startTime: string
    endTime: string
    description: string
    createdAt?: Date | string
    maxStudents: string
    ageGroup: string
    book?: string | null
  }

  export type sundayClassUncheckedCreateWithoutChurchInput = {
    id?: string
    nom: string
    teacher: string
    startTime: string
    endTime: string
    description: string
    createdAt?: Date | string
    maxStudents: string
    ageGroup: string
    book?: string | null
  }

  export type sundayClassCreateOrConnectWithoutChurchInput = {
    where: sundayClassWhereUniqueInput
    create: XOR<sundayClassCreateWithoutChurchInput, sundayClassUncheckedCreateWithoutChurchInput>
  }

  export type sundayClassCreateManyChurchInputEnvelope = {
    data: sundayClassCreateManyChurchInput | sundayClassCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type tithingCreateWithoutChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type tithingUncheckedCreateWithoutChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type tithingCreateOrConnectWithoutChurchInput = {
    where: tithingWhereUniqueInput
    create: XOR<tithingCreateWithoutChurchInput, tithingUncheckedCreateWithoutChurchInput>
  }

  export type tithingCreateManyChurchInputEnvelope = {
    data: tithingCreateManyChurchInput | tithingCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type transfertCreateWithoutFromChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    toChurch: ChurchCreateNestedOneWithoutTransfersToInput
    member: UserCreateNestedOneWithoutTransfersInput
  }

  export type transfertUncheckedCreateWithoutFromChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    toChurchId: string
    userId: string
  }

  export type transfertCreateOrConnectWithoutFromChurchInput = {
    where: transfertWhereUniqueInput
    create: XOR<transfertCreateWithoutFromChurchInput, transfertUncheckedCreateWithoutFromChurchInput>
  }

  export type transfertCreateManyFromChurchInputEnvelope = {
    data: transfertCreateManyFromChurchInput | transfertCreateManyFromChurchInput[]
    skipDuplicates?: boolean
  }

  export type transfertCreateWithoutToChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurch: ChurchCreateNestedOneWithoutTransfersFromInput
    member: UserCreateNestedOneWithoutTransfersInput
  }

  export type transfertUncheckedCreateWithoutToChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurchId: string
    userId: string
  }

  export type transfertCreateOrConnectWithoutToChurchInput = {
    where: transfertWhereUniqueInput
    create: XOR<transfertCreateWithoutToChurchInput, transfertUncheckedCreateWithoutToChurchInput>
  }

  export type transfertCreateManyToChurchInputEnvelope = {
    data: transfertCreateManyToChurchInput | transfertCreateManyToChurchInput[]
    skipDuplicates?: boolean
  }

  export type BaptismUpsertWithWhereUniqueWithoutChurchInput = {
    where: BaptismWhereUniqueInput
    update: XOR<BaptismUpdateWithoutChurchInput, BaptismUncheckedUpdateWithoutChurchInput>
    create: XOR<BaptismCreateWithoutChurchInput, BaptismUncheckedCreateWithoutChurchInput>
  }

  export type BaptismUpdateWithWhereUniqueWithoutChurchInput = {
    where: BaptismWhereUniqueInput
    data: XOR<BaptismUpdateWithoutChurchInput, BaptismUncheckedUpdateWithoutChurchInput>
  }

  export type BaptismUpdateManyWithWhereWithoutChurchInput = {
    where: BaptismScalarWhereInput
    data: XOR<BaptismUpdateManyMutationInput, BaptismUncheckedUpdateManyWithoutChurchInput>
  }

  export type BaptismScalarWhereInput = {
    AND?: BaptismScalarWhereInput | BaptismScalarWhereInput[]
    OR?: BaptismScalarWhereInput[]
    NOT?: BaptismScalarWhereInput | BaptismScalarWhereInput[]
    id?: StringFilter<"Baptism"> | string
    fullName?: StringFilter<"Baptism"> | string
    birthDate?: DateTimeFilter<"Baptism"> | Date | string
    placeOfBirth?: StringFilter<"Baptism"> | string
    baptismDate?: DateTimeFilter<"Baptism"> | Date | string
    baptismCertificate?: StringNullableFilter<"Baptism"> | string | null
    officiantName?: StringFilter<"Baptism"> | string
    withness?: StringFilter<"Baptism"> | string
    previousChurch?: StringFilter<"Baptism"> | string
    testimony?: StringFilter<"Baptism"> | string
    churchId?: StringNullableFilter<"Baptism"> | string | null
    conversionDate?: DateTimeFilter<"Baptism"> | Date | string
    status?: StringNullableFilter<"Baptism"> | string | null
    baptismLocation?: StringFilter<"Baptism"> | string
    endDate?: StringNullableFilter<"Baptism"> | string | null
    startDate?: StringNullableFilter<"Baptism"> | string | null
  }

  export type AddressUpsertWithoutChurchInput = {
    update: XOR<AddressUpdateWithoutChurchInput, AddressUncheckedUpdateWithoutChurchInput>
    create: XOR<AddressCreateWithoutChurchInput, AddressUncheckedCreateWithoutChurchInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutChurchInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutChurchInput, AddressUncheckedUpdateWithoutChurchInput>
  }

  export type AddressUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    commune?: NullableStringFieldUpdateOperationsInput | string | null
    sectionCommunale?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    rue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    commune?: NullableStringFieldUpdateOperationsInput | string | null
    sectionCommunale?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    rue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissionUpsertWithoutChurchInput = {
    update: XOR<MissionUpdateWithoutChurchInput, MissionUncheckedUpdateWithoutChurchInput>
    create: XOR<MissionCreateWithoutChurchInput, MissionUncheckedCreateWithoutChurchInput>
    where?: MissionWhereInput
  }

  export type MissionUpdateToOneWithWhereWithoutChurchInput = {
    where?: MissionWhereInput
    data: XOR<MissionUpdateWithoutChurchInput, MissionUncheckedUpdateWithoutChurchInput>
  }

  export type MissionUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    missionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presidentName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissionUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    missionName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presidentName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TtiUpsertWithoutChurchInput = {
    update: XOR<TtiUpdateWithoutChurchInput, TtiUncheckedUpdateWithoutChurchInput>
    create: XOR<TtiCreateWithoutChurchInput, TtiUncheckedCreateWithoutChurchInput>
    where?: TtiWhereInput
  }

  export type TtiUpdateToOneWithWhereWithoutChurchInput = {
    where?: TtiWhereInput
    data: XOR<TtiUpdateWithoutChurchInput, TtiUncheckedUpdateWithoutChurchInput>
  }

  export type TtiUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TtiUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutChurchInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutChurchInput, EventUncheckedUpdateWithoutChurchInput>
    create: XOR<EventCreateWithoutChurchInput, EventUncheckedCreateWithoutChurchInput>
  }

  export type EventUpdateWithWhereUniqueWithoutChurchInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutChurchInput, EventUncheckedUpdateWithoutChurchInput>
  }

  export type EventUpdateManyWithWhereWithoutChurchInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutChurchInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    location?: StringNullableFilter<"Event"> | string | null
    frequency?: StringFilter<"Event"> | string
    startDate?: StringFilter<"Event"> | string
    endDate?: StringFilter<"Event"> | string
    churchId?: StringNullableFilter<"Event"> | string | null
    createAt?: DateTimeFilter<"Event"> | Date | string
    updateAt?: DateTimeFilter<"Event"> | Date | string
    isRecurring?: BoolFilter<"Event"> | boolean
    endPeriode?: StringNullableFilter<"Event"> | string | null
    startPeriode?: StringNullableFilter<"Event"> | string | null
  }

  export type FuneralUpsertWithWhereUniqueWithoutChurchInput = {
    where: FuneralWhereUniqueInput
    update: XOR<FuneralUpdateWithoutChurchInput, FuneralUncheckedUpdateWithoutChurchInput>
    create: XOR<FuneralCreateWithoutChurchInput, FuneralUncheckedCreateWithoutChurchInput>
  }

  export type FuneralUpdateWithWhereUniqueWithoutChurchInput = {
    where: FuneralWhereUniqueInput
    data: XOR<FuneralUpdateWithoutChurchInput, FuneralUncheckedUpdateWithoutChurchInput>
  }

  export type FuneralUpdateManyWithWhereWithoutChurchInput = {
    where: FuneralScalarWhereInput
    data: XOR<FuneralUpdateManyMutationInput, FuneralUncheckedUpdateManyWithoutChurchInput>
  }

  export type FuneralScalarWhereInput = {
    AND?: FuneralScalarWhereInput | FuneralScalarWhereInput[]
    OR?: FuneralScalarWhereInput[]
    NOT?: FuneralScalarWhereInput | FuneralScalarWhereInput[]
    id?: StringFilter<"Funeral"> | string
    fullname?: StringFilter<"Funeral"> | string
    birthDate?: DateTimeFilter<"Funeral"> | Date | string
    funeralDate?: DateTimeFilter<"Funeral"> | Date | string
    funeralTime?: StringFilter<"Funeral"> | string
    relationShip?: StringFilter<"Funeral"> | string
    email?: StringFilter<"Funeral"> | string
    deathCertificate?: StringNullableFilter<"Funeral"> | string | null
    nextOfKin?: StringFilter<"Funeral"> | string
    officiantName?: StringFilter<"Funeral"> | string
    description?: StringFilter<"Funeral"> | string
    funeralLocation?: StringFilter<"Funeral"> | string
    churchId?: StringNullableFilter<"Funeral"> | string | null
    createdAt?: DateTimeFilter<"Funeral"> | Date | string
    status?: StringFilter<"Funeral"> | string
    updatedAt?: DateTimeFilter<"Funeral"> | Date | string
    telephone?: StringNullableFilter<"Funeral"> | string | null
  }

  export type GroupeUpsertWithWhereUniqueWithoutChurchInput = {
    where: GroupeWhereUniqueInput
    update: XOR<GroupeUpdateWithoutChurchInput, GroupeUncheckedUpdateWithoutChurchInput>
    create: XOR<GroupeCreateWithoutChurchInput, GroupeUncheckedCreateWithoutChurchInput>
  }

  export type GroupeUpdateWithWhereUniqueWithoutChurchInput = {
    where: GroupeWhereUniqueInput
    data: XOR<GroupeUpdateWithoutChurchInput, GroupeUncheckedUpdateWithoutChurchInput>
  }

  export type GroupeUpdateManyWithWhereWithoutChurchInput = {
    where: GroupeScalarWhereInput
    data: XOR<GroupeUpdateManyMutationInput, GroupeUncheckedUpdateManyWithoutChurchInput>
  }

  export type GroupeScalarWhereInput = {
    AND?: GroupeScalarWhereInput | GroupeScalarWhereInput[]
    OR?: GroupeScalarWhereInput[]
    NOT?: GroupeScalarWhereInput | GroupeScalarWhereInput[]
    id?: StringFilter<"Groupe"> | string
    name?: StringFilter<"Groupe"> | string
    description?: StringNullableFilter<"Groupe"> | string | null
    picture?: StringNullableFilter<"Groupe"> | string | null
    showToMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showToNonMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showMembers?: BoolNullableFilter<"Groupe"> | boolean | null
    showLeaders?: BoolNullableFilter<"Groupe"> | boolean | null
    meetingDays?: StringNullableFilter<"Groupe"> | string | null
    meetingTime?: StringNullableFilter<"Groupe"> | string | null
    meetingLocation?: StringNullableFilter<"Groupe"> | string | null
    meetingFrequency?: StringNullableFilter<"Groupe"> | string | null
    maxMembers?: StringNullableFilter<"Groupe"> | string | null
    churchId?: StringNullableFilter<"Groupe"> | string | null
    createdAt?: DateTimeFilter<"Groupe"> | Date | string
    updatedAt?: DateTimeFilter<"Groupe"> | Date | string
    ageGroup?: StringNullableFilter<"Groupe"> | string | null
    minister?: StringNullableFilter<"Groupe"> | string | null
  }

  export type MariageUpsertWithWhereUniqueWithoutChurchInput = {
    where: MariageWhereUniqueInput
    update: XOR<MariageUpdateWithoutChurchInput, MariageUncheckedUpdateWithoutChurchInput>
    create: XOR<MariageCreateWithoutChurchInput, MariageUncheckedCreateWithoutChurchInput>
  }

  export type MariageUpdateWithWhereUniqueWithoutChurchInput = {
    where: MariageWhereUniqueInput
    data: XOR<MariageUpdateWithoutChurchInput, MariageUncheckedUpdateWithoutChurchInput>
  }

  export type MariageUpdateManyWithWhereWithoutChurchInput = {
    where: MariageScalarWhereInput
    data: XOR<MariageUpdateManyMutationInput, MariageUncheckedUpdateManyWithoutChurchInput>
  }

  export type MariageScalarWhereInput = {
    AND?: MariageScalarWhereInput | MariageScalarWhereInput[]
    OR?: MariageScalarWhereInput[]
    NOT?: MariageScalarWhereInput | MariageScalarWhereInput[]
    id?: StringFilter<"Mariage"> | string
    brideFullname?: StringFilter<"Mariage"> | string
    birthDate?: DateTimeFilter<"Mariage"> | Date | string
    groomFullname?: StringFilter<"Mariage"> | string
    goomBirthDate?: DateTimeFilter<"Mariage"> | Date | string
    weddingDate?: DateTimeFilter<"Mariage"> | Date | string
    weddingLocation?: StringFilter<"Mariage"> | string
    weddingCertificate?: StringNullableFilter<"Mariage"> | string | null
    officiantName?: StringFilter<"Mariage"> | string
    churchId?: StringNullableFilter<"Mariage"> | string | null
    brideCertificate?: StringNullableFilter<"Mariage"> | string | null
    civilStateOfficer?: StringNullableFilter<"Mariage"> | string | null
    grooomCertificate?: StringNullableFilter<"Mariage"> | string | null
    witness?: StringNullableFilter<"Mariage"> | string | null
    civilStateStateOfficer?: StringNullableFilter<"Mariage"> | string | null
    witnessSignature?: StringNullableFilter<"Mariage"> | string | null
  }

  export type PresentationUpsertWithWhereUniqueWithoutChurchInput = {
    where: PresentationWhereUniqueInput
    update: XOR<PresentationUpdateWithoutChurchInput, PresentationUncheckedUpdateWithoutChurchInput>
    create: XOR<PresentationCreateWithoutChurchInput, PresentationUncheckedCreateWithoutChurchInput>
  }

  export type PresentationUpdateWithWhereUniqueWithoutChurchInput = {
    where: PresentationWhereUniqueInput
    data: XOR<PresentationUpdateWithoutChurchInput, PresentationUncheckedUpdateWithoutChurchInput>
  }

  export type PresentationUpdateManyWithWhereWithoutChurchInput = {
    where: PresentationScalarWhereInput
    data: XOR<PresentationUpdateManyMutationInput, PresentationUncheckedUpdateManyWithoutChurchInput>
  }

  export type PresentationScalarWhereInput = {
    AND?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
    OR?: PresentationScalarWhereInput[]
    NOT?: PresentationScalarWhereInput | PresentationScalarWhereInput[]
    id?: StringFilter<"Presentation"> | string
    placeOfBirth?: StringFilter<"Presentation"> | string
    birthCertificate?: StringNullableFilter<"Presentation"> | string | null
    fatherName?: StringFilter<"Presentation"> | string
    motherName?: StringFilter<"Presentation"> | string
    phone?: StringFilter<"Presentation"> | string
    address?: StringFilter<"Presentation"> | string
    presentationDate?: DateTimeFilter<"Presentation"> | Date | string
    officiantName?: StringFilter<"Presentation"> | string
    description?: StringNullableFilter<"Presentation"> | string | null
    churchId?: StringNullableFilter<"Presentation"> | string | null
    childName?: StringFilter<"Presentation"> | string
    dateOfBirth?: DateTimeFilter<"Presentation"> | Date | string
    witness?: StringFilter<"Presentation"> | string
  }

  export type ServiceUpsertWithWhereUniqueWithoutChurchInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutChurchInput, ServiceUncheckedUpdateWithoutChurchInput>
    create: XOR<ServiceCreateWithoutChurchInput, ServiceUncheckedCreateWithoutChurchInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutChurchInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutChurchInput, ServiceUncheckedUpdateWithoutChurchInput>
  }

  export type ServiceUpdateManyWithWhereWithoutChurchInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutChurchInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    OR?: ServiceScalarWhereInput[]
    NOT?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    id?: StringFilter<"Service"> | string
    nom?: StringFilter<"Service"> | string
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    churchId?: StringNullableFilter<"Service"> | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutChurchInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutChurchInput, UserUncheckedUpdateWithoutChurchInput>
    create: XOR<UserCreateWithoutChurchInput, UserUncheckedCreateWithoutChurchInput>
  }

  export type UserUpdateWithWhereUniqueWithoutChurchInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutChurchInput, UserUncheckedUpdateWithoutChurchInput>
  }

  export type UserUpdateManyWithWhereWithoutChurchInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutChurchInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringNullableFilter<"User"> | string | null
    baptismDate?: StringNullableFilter<"User"> | string | null
    baptismLocation?: StringNullableFilter<"User"> | string | null
    birthCity?: StringNullableFilter<"User"> | string | null
    birthCountry?: StringNullableFilter<"User"> | string | null
    birthDate?: StringNullableFilter<"User"> | string | null
    churchId?: StringNullableFilter<"User"> | string | null
    churchRole?: StringNullableFilter<"User"> | string | null
    city?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    envelopeNumber?: StringNullableFilter<"User"> | string | null
    etatCivil?: StringNullableFilter<"User"> | string | null
    facebook?: StringNullableFilter<"User"> | string | null
    firstname?: StringFilter<"User"> | string
    instagram?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    picture?: StringNullableFilter<"User"> | string | null
    profession?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    sex?: StringNullableFilter<"User"> | string | null
    sundayClass?: StringNullableFilter<"User"> | string | null
    lastname?: StringFilter<"User"> | string
    membreActif?: BoolFilter<"User"> | boolean
    addressLine?: StringNullableFilter<"User"> | string | null
    homePhone?: StringNullableFilter<"User"> | string | null
    joinDate?: StringNullableFilter<"User"> | string | null
    mobilePhone?: StringNullableFilter<"User"> | string | null
    age?: StringNullableFilter<"User"> | string | null
    minister?: StringNullableFilter<"User"> | string | null
    plainPassword?: StringNullableFilter<"User"> | string | null
    personToContact?: StringNullableFilter<"User"> | string | null
    spouseFullName?: StringNullableFilter<"User"> | string | null
    latitude?: StringNullableFilter<"User"> | string | null
    longitude?: StringNullableFilter<"User"> | string | null
    nif?: StringNullableFilter<"User"> | string | null
    groupeSanguin?: StringNullableFilter<"User"> | string | null
    istimothee?: BoolNullableFilter<"User"> | boolean | null
    timotheeId?: StringNullableFilter<"User"> | string | null
  }

  export type appointmentUpsertWithWhereUniqueWithoutChurchInput = {
    where: appointmentWhereUniqueInput
    update: XOR<appointmentUpdateWithoutChurchInput, appointmentUncheckedUpdateWithoutChurchInput>
    create: XOR<appointmentCreateWithoutChurchInput, appointmentUncheckedCreateWithoutChurchInput>
  }

  export type appointmentUpdateWithWhereUniqueWithoutChurchInput = {
    where: appointmentWhereUniqueInput
    data: XOR<appointmentUpdateWithoutChurchInput, appointmentUncheckedUpdateWithoutChurchInput>
  }

  export type appointmentUpdateManyWithWhereWithoutChurchInput = {
    where: appointmentScalarWhereInput
    data: XOR<appointmentUpdateManyMutationInput, appointmentUncheckedUpdateManyWithoutChurchInput>
  }

  export type appointmentScalarWhereInput = {
    AND?: appointmentScalarWhereInput | appointmentScalarWhereInput[]
    OR?: appointmentScalarWhereInput[]
    NOT?: appointmentScalarWhereInput | appointmentScalarWhereInput[]
    id?: StringFilter<"appointment"> | string
    name?: StringFilter<"appointment"> | string
    visibility?: StringNullableFilter<"appointment"> | string | null
    description?: StringFilter<"appointment"> | string
    date?: DateTimeFilter<"appointment"> | Date | string
    time?: StringFilter<"appointment"> | string
    duration?: StringFilter<"appointment"> | string
    notes?: StringFilter<"appointment"> | string
    churchId?: StringNullableFilter<"appointment"> | string | null
    createdAt?: DateTimeFilter<"appointment"> | Date | string
    updatedAt?: DateTimeFilter<"appointment"> | Date | string
  }

  export type comiteeUpsertWithWhereUniqueWithoutChurchInput = {
    where: comiteeWhereUniqueInput
    update: XOR<comiteeUpdateWithoutChurchInput, comiteeUncheckedUpdateWithoutChurchInput>
    create: XOR<comiteeCreateWithoutChurchInput, comiteeUncheckedCreateWithoutChurchInput>
  }

  export type comiteeUpdateWithWhereUniqueWithoutChurchInput = {
    where: comiteeWhereUniqueInput
    data: XOR<comiteeUpdateWithoutChurchInput, comiteeUncheckedUpdateWithoutChurchInput>
  }

  export type comiteeUpdateManyWithWhereWithoutChurchInput = {
    where: comiteeScalarWhereInput
    data: XOR<comiteeUpdateManyMutationInput, comiteeUncheckedUpdateManyWithoutChurchInput>
  }

  export type comiteeScalarWhereInput = {
    AND?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
    OR?: comiteeScalarWhereInput[]
    NOT?: comiteeScalarWhereInput | comiteeScalarWhereInput[]
    id?: StringFilter<"comitee"> | string
    description?: StringFilter<"comitee"> | string
    meetingDay?: StringFilter<"comitee"> | string
    meetingTime?: StringFilter<"comitee"> | string
    name?: StringFilter<"comitee"> | string
    churchId?: StringNullableFilter<"comitee"> | string | null
  }

  export type deathUpsertWithWhereUniqueWithoutChurchInput = {
    where: deathWhereUniqueInput
    update: XOR<deathUpdateWithoutChurchInput, deathUncheckedUpdateWithoutChurchInput>
    create: XOR<deathCreateWithoutChurchInput, deathUncheckedCreateWithoutChurchInput>
  }

  export type deathUpdateWithWhereUniqueWithoutChurchInput = {
    where: deathWhereUniqueInput
    data: XOR<deathUpdateWithoutChurchInput, deathUncheckedUpdateWithoutChurchInput>
  }

  export type deathUpdateManyWithWhereWithoutChurchInput = {
    where: deathScalarWhereInput
    data: XOR<deathUpdateManyMutationInput, deathUncheckedUpdateManyWithoutChurchInput>
  }

  export type deathScalarWhereInput = {
    AND?: deathScalarWhereInput | deathScalarWhereInput[]
    OR?: deathScalarWhereInput[]
    NOT?: deathScalarWhereInput | deathScalarWhereInput[]
    id?: StringFilter<"death"> | string
    deathDate?: DateTimeFilter<"death"> | Date | string
    deathPlace?: StringFilter<"death"> | string
    deathCause?: StringFilter<"death"> | string
    deathCertificate?: StringNullableFilter<"death"> | string | null
    churchId?: StringNullableFilter<"death"> | string | null
    deathTime?: StringFilter<"death"> | string
    description?: StringNullableFilter<"death"> | string | null
    location?: StringFilter<"death"> | string
    officiantName?: StringFilter<"death"> | string
    relationShip?: StringFilter<"death"> | string
    serviceDate?: DateTimeFilter<"death"> | Date | string
    nextOfKin?: StringFilter<"death"> | string
  }

  export type donationUpsertWithWhereUniqueWithoutChurchInput = {
    where: donationWhereUniqueInput
    update: XOR<donationUpdateWithoutChurchInput, donationUncheckedUpdateWithoutChurchInput>
    create: XOR<donationCreateWithoutChurchInput, donationUncheckedCreateWithoutChurchInput>
  }

  export type donationUpdateWithWhereUniqueWithoutChurchInput = {
    where: donationWhereUniqueInput
    data: XOR<donationUpdateWithoutChurchInput, donationUncheckedUpdateWithoutChurchInput>
  }

  export type donationUpdateManyWithWhereWithoutChurchInput = {
    where: donationScalarWhereInput
    data: XOR<donationUpdateManyMutationInput, donationUncheckedUpdateManyWithoutChurchInput>
  }

  export type donationScalarWhereInput = {
    AND?: donationScalarWhereInput | donationScalarWhereInput[]
    OR?: donationScalarWhereInput[]
    NOT?: donationScalarWhereInput | donationScalarWhereInput[]
    id?: StringFilter<"donation"> | string
    contributorName?: StringFilter<"donation"> | string
    amount?: IntFilter<"donation"> | number
    date?: DateTimeFilter<"donation"> | Date | string
    paymentMethod?: StringFilter<"donation"> | string
    note?: StringFilter<"donation"> | string
    churchId?: StringNullableFilter<"donation"> | string | null
  }

  export type expenseUpsertWithWhereUniqueWithoutChurchInput = {
    where: expenseWhereUniqueInput
    update: XOR<expenseUpdateWithoutChurchInput, expenseUncheckedUpdateWithoutChurchInput>
    create: XOR<expenseCreateWithoutChurchInput, expenseUncheckedCreateWithoutChurchInput>
  }

  export type expenseUpdateWithWhereUniqueWithoutChurchInput = {
    where: expenseWhereUniqueInput
    data: XOR<expenseUpdateWithoutChurchInput, expenseUncheckedUpdateWithoutChurchInput>
  }

  export type expenseUpdateManyWithWhereWithoutChurchInput = {
    where: expenseScalarWhereInput
    data: XOR<expenseUpdateManyMutationInput, expenseUncheckedUpdateManyWithoutChurchInput>
  }

  export type expenseScalarWhereInput = {
    AND?: expenseScalarWhereInput | expenseScalarWhereInput[]
    OR?: expenseScalarWhereInput[]
    NOT?: expenseScalarWhereInput | expenseScalarWhereInput[]
    id?: StringFilter<"expense"> | string
    amount?: IntFilter<"expense"> | number
    category?: StringFilter<"expense"> | string
    date?: DateTimeFilter<"expense"> | Date | string
    paymentMethod?: StringFilter<"expense"> | string
    description?: StringFilter<"expense"> | string
    churchId?: StringNullableFilter<"expense"> | string | null
  }

  export type ministryUpsertWithWhereUniqueWithoutChurchInput = {
    where: ministryWhereUniqueInput
    update: XOR<ministryUpdateWithoutChurchInput, ministryUncheckedUpdateWithoutChurchInput>
    create: XOR<ministryCreateWithoutChurchInput, ministryUncheckedCreateWithoutChurchInput>
  }

  export type ministryUpdateWithWhereUniqueWithoutChurchInput = {
    where: ministryWhereUniqueInput
    data: XOR<ministryUpdateWithoutChurchInput, ministryUncheckedUpdateWithoutChurchInput>
  }

  export type ministryUpdateManyWithWhereWithoutChurchInput = {
    where: ministryScalarWhereInput
    data: XOR<ministryUpdateManyMutationInput, ministryUncheckedUpdateManyWithoutChurchInput>
  }

  export type ministryScalarWhereInput = {
    AND?: ministryScalarWhereInput | ministryScalarWhereInput[]
    OR?: ministryScalarWhereInput[]
    NOT?: ministryScalarWhereInput | ministryScalarWhereInput[]
    id?: StringFilter<"ministry"> | string
    name?: StringFilter<"ministry"> | string
    description?: StringFilter<"ministry"> | string
    churchId?: StringNullableFilter<"ministry"> | string | null
    createdAt?: DateTimeFilter<"ministry"> | Date | string
    updatedAt?: DateTimeFilter<"ministry"> | Date | string
  }

  export type moissonUpsertWithWhereUniqueWithoutChurchInput = {
    where: moissonWhereUniqueInput
    update: XOR<moissonUpdateWithoutChurchInput, moissonUncheckedUpdateWithoutChurchInput>
    create: XOR<moissonCreateWithoutChurchInput, moissonUncheckedCreateWithoutChurchInput>
  }

  export type moissonUpdateWithWhereUniqueWithoutChurchInput = {
    where: moissonWhereUniqueInput
    data: XOR<moissonUpdateWithoutChurchInput, moissonUncheckedUpdateWithoutChurchInput>
  }

  export type moissonUpdateManyWithWhereWithoutChurchInput = {
    where: moissonScalarWhereInput
    data: XOR<moissonUpdateManyMutationInput, moissonUncheckedUpdateManyWithoutChurchInput>
  }

  export type moissonScalarWhereInput = {
    AND?: moissonScalarWhereInput | moissonScalarWhereInput[]
    OR?: moissonScalarWhereInput[]
    NOT?: moissonScalarWhereInput | moissonScalarWhereInput[]
    id?: StringFilter<"moisson"> | string
    contributorName?: StringFilter<"moisson"> | string
    amount?: IntFilter<"moisson"> | number
    date?: DateTimeFilter<"moisson"> | Date | string
    paymentMethod?: StringFilter<"moisson"> | string
    note?: StringFilter<"moisson"> | string
    churchId?: StringNullableFilter<"moisson"> | string | null
  }

  export type offeringUpsertWithWhereUniqueWithoutChurchInput = {
    where: offeringWhereUniqueInput
    update: XOR<offeringUpdateWithoutChurchInput, offeringUncheckedUpdateWithoutChurchInput>
    create: XOR<offeringCreateWithoutChurchInput, offeringUncheckedCreateWithoutChurchInput>
  }

  export type offeringUpdateWithWhereUniqueWithoutChurchInput = {
    where: offeringWhereUniqueInput
    data: XOR<offeringUpdateWithoutChurchInput, offeringUncheckedUpdateWithoutChurchInput>
  }

  export type offeringUpdateManyWithWhereWithoutChurchInput = {
    where: offeringScalarWhereInput
    data: XOR<offeringUpdateManyMutationInput, offeringUncheckedUpdateManyWithoutChurchInput>
  }

  export type offeringScalarWhereInput = {
    AND?: offeringScalarWhereInput | offeringScalarWhereInput[]
    OR?: offeringScalarWhereInput[]
    NOT?: offeringScalarWhereInput | offeringScalarWhereInput[]
    id?: StringFilter<"offering"> | string
    amount?: IntFilter<"offering"> | number
    date?: DateTimeFilter<"offering"> | Date | string
    paymentMethod?: StringFilter<"offering"> | string
    note?: StringFilter<"offering"> | string
    churchId?: StringNullableFilter<"offering"> | string | null
    status?: StringNullableFilter<"offering"> | string | null
  }

  export type pasteurUpsertWithWhereUniqueWithoutChurchInput = {
    where: pasteurWhereUniqueInput
    update: XOR<pasteurUpdateWithoutChurchInput, pasteurUncheckedUpdateWithoutChurchInput>
    create: XOR<pasteurCreateWithoutChurchInput, pasteurUncheckedCreateWithoutChurchInput>
  }

  export type pasteurUpdateWithWhereUniqueWithoutChurchInput = {
    where: pasteurWhereUniqueInput
    data: XOR<pasteurUpdateWithoutChurchInput, pasteurUncheckedUpdateWithoutChurchInput>
  }

  export type pasteurUpdateManyWithWhereWithoutChurchInput = {
    where: pasteurScalarWhereInput
    data: XOR<pasteurUpdateManyMutationInput, pasteurUncheckedUpdateManyWithoutChurchInput>
  }

  export type pasteurScalarWhereInput = {
    AND?: pasteurScalarWhereInput | pasteurScalarWhereInput[]
    OR?: pasteurScalarWhereInput[]
    NOT?: pasteurScalarWhereInput | pasteurScalarWhereInput[]
    id?: StringFilter<"pasteur"> | string
    pasteurName?: StringFilter<"pasteur"> | string
    churchId?: StringNullableFilter<"pasteur"> | string | null
    address?: StringFilter<"pasteur"> | string
    phone?: StringFilter<"pasteur"> | string
    status?: StringFilter<"pasteur"> | string
    email?: StringFilter<"pasteur"> | string
  }

  export type sanctionUpsertWithWhereUniqueWithoutChurchInput = {
    where: sanctionWhereUniqueInput
    update: XOR<sanctionUpdateWithoutChurchInput, sanctionUncheckedUpdateWithoutChurchInput>
    create: XOR<sanctionCreateWithoutChurchInput, sanctionUncheckedCreateWithoutChurchInput>
  }

  export type sanctionUpdateWithWhereUniqueWithoutChurchInput = {
    where: sanctionWhereUniqueInput
    data: XOR<sanctionUpdateWithoutChurchInput, sanctionUncheckedUpdateWithoutChurchInput>
  }

  export type sanctionUpdateManyWithWhereWithoutChurchInput = {
    where: sanctionScalarWhereInput
    data: XOR<sanctionUpdateManyMutationInput, sanctionUncheckedUpdateManyWithoutChurchInput>
  }

  export type sanctionScalarWhereInput = {
    AND?: sanctionScalarWhereInput | sanctionScalarWhereInput[]
    OR?: sanctionScalarWhereInput[]
    NOT?: sanctionScalarWhereInput | sanctionScalarWhereInput[]
    id?: StringFilter<"sanction"> | string
    name?: StringFilter<"sanction"> | string
    description?: StringFilter<"sanction"> | string
    startDate?: StringFilter<"sanction"> | string
    status?: StringFilter<"sanction"> | string
    churchId?: StringNullableFilter<"sanction"> | string | null
    createdAt?: DateTimeFilter<"sanction"> | Date | string
    updatedAt?: DateTimeFilter<"sanction"> | Date | string
    endDate?: StringNullableFilter<"sanction"> | string | null
  }

  export type sundayClassUpsertWithWhereUniqueWithoutChurchInput = {
    where: sundayClassWhereUniqueInput
    update: XOR<sundayClassUpdateWithoutChurchInput, sundayClassUncheckedUpdateWithoutChurchInput>
    create: XOR<sundayClassCreateWithoutChurchInput, sundayClassUncheckedCreateWithoutChurchInput>
  }

  export type sundayClassUpdateWithWhereUniqueWithoutChurchInput = {
    where: sundayClassWhereUniqueInput
    data: XOR<sundayClassUpdateWithoutChurchInput, sundayClassUncheckedUpdateWithoutChurchInput>
  }

  export type sundayClassUpdateManyWithWhereWithoutChurchInput = {
    where: sundayClassScalarWhereInput
    data: XOR<sundayClassUpdateManyMutationInput, sundayClassUncheckedUpdateManyWithoutChurchInput>
  }

  export type sundayClassScalarWhereInput = {
    AND?: sundayClassScalarWhereInput | sundayClassScalarWhereInput[]
    OR?: sundayClassScalarWhereInput[]
    NOT?: sundayClassScalarWhereInput | sundayClassScalarWhereInput[]
    id?: StringFilter<"sundayClass"> | string
    nom?: StringFilter<"sundayClass"> | string
    teacher?: StringFilter<"sundayClass"> | string
    startTime?: StringFilter<"sundayClass"> | string
    endTime?: StringFilter<"sundayClass"> | string
    description?: StringFilter<"sundayClass"> | string
    churchId?: StringNullableFilter<"sundayClass"> | string | null
    createdAt?: DateTimeFilter<"sundayClass"> | Date | string
    maxStudents?: StringFilter<"sundayClass"> | string
    ageGroup?: StringFilter<"sundayClass"> | string
    book?: StringNullableFilter<"sundayClass"> | string | null
  }

  export type tithingUpsertWithWhereUniqueWithoutChurchInput = {
    where: tithingWhereUniqueInput
    update: XOR<tithingUpdateWithoutChurchInput, tithingUncheckedUpdateWithoutChurchInput>
    create: XOR<tithingCreateWithoutChurchInput, tithingUncheckedCreateWithoutChurchInput>
  }

  export type tithingUpdateWithWhereUniqueWithoutChurchInput = {
    where: tithingWhereUniqueInput
    data: XOR<tithingUpdateWithoutChurchInput, tithingUncheckedUpdateWithoutChurchInput>
  }

  export type tithingUpdateManyWithWhereWithoutChurchInput = {
    where: tithingScalarWhereInput
    data: XOR<tithingUpdateManyMutationInput, tithingUncheckedUpdateManyWithoutChurchInput>
  }

  export type tithingScalarWhereInput = {
    AND?: tithingScalarWhereInput | tithingScalarWhereInput[]
    OR?: tithingScalarWhereInput[]
    NOT?: tithingScalarWhereInput | tithingScalarWhereInput[]
    id?: StringFilter<"tithing"> | string
    contributorName?: StringFilter<"tithing"> | string
    amount?: IntFilter<"tithing"> | number
    date?: DateTimeFilter<"tithing"> | Date | string
    paymentMethod?: StringFilter<"tithing"> | string
    note?: StringFilter<"tithing"> | string
    churchId?: StringNullableFilter<"tithing"> | string | null
  }

  export type transfertUpsertWithWhereUniqueWithoutFromChurchInput = {
    where: transfertWhereUniqueInput
    update: XOR<transfertUpdateWithoutFromChurchInput, transfertUncheckedUpdateWithoutFromChurchInput>
    create: XOR<transfertCreateWithoutFromChurchInput, transfertUncheckedCreateWithoutFromChurchInput>
  }

  export type transfertUpdateWithWhereUniqueWithoutFromChurchInput = {
    where: transfertWhereUniqueInput
    data: XOR<transfertUpdateWithoutFromChurchInput, transfertUncheckedUpdateWithoutFromChurchInput>
  }

  export type transfertUpdateManyWithWhereWithoutFromChurchInput = {
    where: transfertScalarWhereInput
    data: XOR<transfertUpdateManyMutationInput, transfertUncheckedUpdateManyWithoutFromChurchInput>
  }

  export type transfertScalarWhereInput = {
    AND?: transfertScalarWhereInput | transfertScalarWhereInput[]
    OR?: transfertScalarWhereInput[]
    NOT?: transfertScalarWhereInput | transfertScalarWhereInput[]
    id?: StringFilter<"transfert"> | string
    createdAt?: DateTimeFilter<"transfert"> | Date | string
    updatedAt?: DateTimeFilter<"transfert"> | Date | string
    fromChurchId?: StringFilter<"transfert"> | string
    toChurchId?: StringFilter<"transfert"> | string
    userId?: StringFilter<"transfert"> | string
  }

  export type transfertUpsertWithWhereUniqueWithoutToChurchInput = {
    where: transfertWhereUniqueInput
    update: XOR<transfertUpdateWithoutToChurchInput, transfertUncheckedUpdateWithoutToChurchInput>
    create: XOR<transfertCreateWithoutToChurchInput, transfertUncheckedCreateWithoutToChurchInput>
  }

  export type transfertUpdateWithWhereUniqueWithoutToChurchInput = {
    where: transfertWhereUniqueInput
    data: XOR<transfertUpdateWithoutToChurchInput, transfertUncheckedUpdateWithoutToChurchInput>
  }

  export type transfertUpdateManyWithWhereWithoutToChurchInput = {
    where: transfertScalarWhereInput
    data: XOR<transfertUpdateManyMutationInput, transfertUncheckedUpdateManyWithoutToChurchInput>
  }

  export type PresenceCreateWithoutUserInput = {
    id?: string
    statut: $Enums.StatutPresence
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateWithoutUserInput = {
    id?: string
    statut: $Enums.StatutPresence
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type PresenceCreateOrConnectWithoutUserInput = {
    where: PresenceWhereUniqueInput
    create: XOR<PresenceCreateWithoutUserInput, PresenceUncheckedCreateWithoutUserInput>
  }

  export type PresenceCreateManyUserInputEnvelope = {
    data: PresenceCreateManyUserInput | PresenceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChurchCreateWithoutUsersInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutUsersInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutUsersInput, ChurchUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutTithesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutTithesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutTithesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTithesInput, UserUncheckedCreateWithoutTithesInput>
  }

  export type UserCreateWithoutTimotheeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutTimotheeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutTimotheeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimotheeInput, UserUncheckedCreateWithoutTimotheeInput>
  }

  export type UserCreateManyTimotheeInputEnvelope = {
    data: UserCreateManyTimotheeInput | UserCreateManyTimotheeInput[]
    skipDuplicates?: boolean
  }

  export type transfertCreateWithoutMemberInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurch: ChurchCreateNestedOneWithoutTransfersFromInput
    toChurch: ChurchCreateNestedOneWithoutTransfersToInput
  }

  export type transfertUncheckedCreateWithoutMemberInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurchId: string
    toChurchId: string
  }

  export type transfertCreateOrConnectWithoutMemberInput = {
    where: transfertWhereUniqueInput
    create: XOR<transfertCreateWithoutMemberInput, transfertUncheckedCreateWithoutMemberInput>
  }

  export type transfertCreateManyMemberInputEnvelope = {
    data: transfertCreateManyMemberInput | transfertCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type comiteeCreateWithoutCommiteeLeaderInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    church?: ChurchCreateNestedOneWithoutComiteesInput
    commiteeMember?: UserCreateNestedManyWithoutMemberComitteesInput
  }

  export type comiteeUncheckedCreateWithoutCommiteeLeaderInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    churchId?: string | null
    commiteeMember?: UserUncheckedCreateNestedManyWithoutMemberComitteesInput
  }

  export type comiteeCreateOrConnectWithoutCommiteeLeaderInput = {
    where: comiteeWhereUniqueInput
    create: XOR<comiteeCreateWithoutCommiteeLeaderInput, comiteeUncheckedCreateWithoutCommiteeLeaderInput>
  }

  export type comiteeCreateWithoutCommiteeMemberInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    church?: ChurchCreateNestedOneWithoutComiteesInput
    commiteeLeader?: UserCreateNestedManyWithoutLeadingComitteesInput
  }

  export type comiteeUncheckedCreateWithoutCommiteeMemberInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
    churchId?: string | null
    commiteeLeader?: UserUncheckedCreateNestedManyWithoutLeadingComitteesInput
  }

  export type comiteeCreateOrConnectWithoutCommiteeMemberInput = {
    where: comiteeWhereUniqueInput
    create: XOR<comiteeCreateWithoutCommiteeMemberInput, comiteeUncheckedCreateWithoutCommiteeMemberInput>
  }

  export type GroupeCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
    church?: ChurchCreateNestedOneWithoutGroupsInput
  }

  export type GroupeUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
  }

  export type GroupeCreateOrConnectWithoutUsersInput = {
    where: GroupeWhereUniqueInput
    create: XOR<GroupeCreateWithoutUsersInput, GroupeUncheckedCreateWithoutUsersInput>
  }

  export type appointmentCreateWithoutAssignedUsersInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church?: ChurchCreateNestedOneWithoutAppointmentsInput
  }

  export type appointmentUncheckedCreateWithoutAssignedUsersInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    churchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type appointmentCreateOrConnectWithoutAssignedUsersInput = {
    where: appointmentWhereUniqueInput
    create: XOR<appointmentCreateWithoutAssignedUsersInput, appointmentUncheckedCreateWithoutAssignedUsersInput>
  }

  export type PresenceUpsertWithWhereUniqueWithoutUserInput = {
    where: PresenceWhereUniqueInput
    update: XOR<PresenceUpdateWithoutUserInput, PresenceUncheckedUpdateWithoutUserInput>
    create: XOR<PresenceCreateWithoutUserInput, PresenceUncheckedCreateWithoutUserInput>
  }

  export type PresenceUpdateWithWhereUniqueWithoutUserInput = {
    where: PresenceWhereUniqueInput
    data: XOR<PresenceUpdateWithoutUserInput, PresenceUncheckedUpdateWithoutUserInput>
  }

  export type PresenceUpdateManyWithWhereWithoutUserInput = {
    where: PresenceScalarWhereInput
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyWithoutUserInput>
  }

  export type ChurchUpsertWithoutUsersInput = {
    update: XOR<ChurchUpdateWithoutUsersInput, ChurchUncheckedUpdateWithoutUsersInput>
    create: XOR<ChurchCreateWithoutUsersInput, ChurchUncheckedCreateWithoutUsersInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutUsersInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutUsersInput, ChurchUncheckedUpdateWithoutUsersInput>
  }

  export type ChurchUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type UserUpsertWithoutTithesInput = {
    update: XOR<UserUpdateWithoutTithesInput, UserUncheckedUpdateWithoutTithesInput>
    create: XOR<UserCreateWithoutTithesInput, UserUncheckedCreateWithoutTithesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTithesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTithesInput, UserUncheckedUpdateWithoutTithesInput>
  }

  export type UserUpdateWithoutTithesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTithesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutTimotheeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTimotheeInput, UserUncheckedUpdateWithoutTimotheeInput>
    create: XOR<UserCreateWithoutTimotheeInput, UserUncheckedCreateWithoutTimotheeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTimotheeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTimotheeInput, UserUncheckedUpdateWithoutTimotheeInput>
  }

  export type UserUpdateManyWithWhereWithoutTimotheeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTimotheeInput>
  }

  export type transfertUpsertWithWhereUniqueWithoutMemberInput = {
    where: transfertWhereUniqueInput
    update: XOR<transfertUpdateWithoutMemberInput, transfertUncheckedUpdateWithoutMemberInput>
    create: XOR<transfertCreateWithoutMemberInput, transfertUncheckedCreateWithoutMemberInput>
  }

  export type transfertUpdateWithWhereUniqueWithoutMemberInput = {
    where: transfertWhereUniqueInput
    data: XOR<transfertUpdateWithoutMemberInput, transfertUncheckedUpdateWithoutMemberInput>
  }

  export type transfertUpdateManyWithWhereWithoutMemberInput = {
    where: transfertScalarWhereInput
    data: XOR<transfertUpdateManyMutationInput, transfertUncheckedUpdateManyWithoutMemberInput>
  }

  export type comiteeUpsertWithWhereUniqueWithoutCommiteeLeaderInput = {
    where: comiteeWhereUniqueInput
    update: XOR<comiteeUpdateWithoutCommiteeLeaderInput, comiteeUncheckedUpdateWithoutCommiteeLeaderInput>
    create: XOR<comiteeCreateWithoutCommiteeLeaderInput, comiteeUncheckedCreateWithoutCommiteeLeaderInput>
  }

  export type comiteeUpdateWithWhereUniqueWithoutCommiteeLeaderInput = {
    where: comiteeWhereUniqueInput
    data: XOR<comiteeUpdateWithoutCommiteeLeaderInput, comiteeUncheckedUpdateWithoutCommiteeLeaderInput>
  }

  export type comiteeUpdateManyWithWhereWithoutCommiteeLeaderInput = {
    where: comiteeScalarWhereInput
    data: XOR<comiteeUpdateManyMutationInput, comiteeUncheckedUpdateManyWithoutCommiteeLeaderInput>
  }

  export type comiteeUpsertWithWhereUniqueWithoutCommiteeMemberInput = {
    where: comiteeWhereUniqueInput
    update: XOR<comiteeUpdateWithoutCommiteeMemberInput, comiteeUncheckedUpdateWithoutCommiteeMemberInput>
    create: XOR<comiteeCreateWithoutCommiteeMemberInput, comiteeUncheckedCreateWithoutCommiteeMemberInput>
  }

  export type comiteeUpdateWithWhereUniqueWithoutCommiteeMemberInput = {
    where: comiteeWhereUniqueInput
    data: XOR<comiteeUpdateWithoutCommiteeMemberInput, comiteeUncheckedUpdateWithoutCommiteeMemberInput>
  }

  export type comiteeUpdateManyWithWhereWithoutCommiteeMemberInput = {
    where: comiteeScalarWhereInput
    data: XOR<comiteeUpdateManyMutationInput, comiteeUncheckedUpdateManyWithoutCommiteeMemberInput>
  }

  export type GroupeUpsertWithWhereUniqueWithoutUsersInput = {
    where: GroupeWhereUniqueInput
    update: XOR<GroupeUpdateWithoutUsersInput, GroupeUncheckedUpdateWithoutUsersInput>
    create: XOR<GroupeCreateWithoutUsersInput, GroupeUncheckedCreateWithoutUsersInput>
  }

  export type GroupeUpdateWithWhereUniqueWithoutUsersInput = {
    where: GroupeWhereUniqueInput
    data: XOR<GroupeUpdateWithoutUsersInput, GroupeUncheckedUpdateWithoutUsersInput>
  }

  export type GroupeUpdateManyWithWhereWithoutUsersInput = {
    where: GroupeScalarWhereInput
    data: XOR<GroupeUpdateManyMutationInput, GroupeUncheckedUpdateManyWithoutUsersInput>
  }

  export type appointmentUpsertWithWhereUniqueWithoutAssignedUsersInput = {
    where: appointmentWhereUniqueInput
    update: XOR<appointmentUpdateWithoutAssignedUsersInput, appointmentUncheckedUpdateWithoutAssignedUsersInput>
    create: XOR<appointmentCreateWithoutAssignedUsersInput, appointmentUncheckedCreateWithoutAssignedUsersInput>
  }

  export type appointmentUpdateWithWhereUniqueWithoutAssignedUsersInput = {
    where: appointmentWhereUniqueInput
    data: XOR<appointmentUpdateWithoutAssignedUsersInput, appointmentUncheckedUpdateWithoutAssignedUsersInput>
  }

  export type appointmentUpdateManyWithWhereWithoutAssignedUsersInput = {
    where: appointmentScalarWhereInput
    data: XOR<appointmentUpdateManyMutationInput, appointmentUncheckedUpdateManyWithoutAssignedUsersInput>
  }

  export type ChurchCreateWithoutGroupsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutGroupsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutGroupsInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutGroupsInput, ChurchUncheckedCreateWithoutGroupsInput>
  }

  export type UserCreateWithoutGroupsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutGroupsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutGroupsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput>
  }

  export type ChurchUpsertWithoutGroupsInput = {
    update: XOR<ChurchUpdateWithoutGroupsInput, ChurchUncheckedUpdateWithoutGroupsInput>
    create: XOR<ChurchCreateWithoutGroupsInput, ChurchUncheckedCreateWithoutGroupsInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutGroupsInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutGroupsInput, ChurchUncheckedUpdateWithoutGroupsInput>
  }

  export type ChurchUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutGroupsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutGroupsInput, UserUncheckedUpdateWithoutGroupsInput>
    create: XOR<UserCreateWithoutGroupsInput, UserUncheckedCreateWithoutGroupsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutGroupsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutGroupsInput, UserUncheckedUpdateWithoutGroupsInput>
  }

  export type UserUpdateManyWithWhereWithoutGroupsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutGroupsInput>
  }

  export type ChurchCreateWithoutEventsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutEventsInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutEventsInput, ChurchUncheckedCreateWithoutEventsInput>
  }

  export type ChurchUpsertWithoutEventsInput = {
    update: XOR<ChurchUpdateWithoutEventsInput, ChurchUncheckedUpdateWithoutEventsInput>
    create: XOR<ChurchCreateWithoutEventsInput, ChurchUncheckedCreateWithoutEventsInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutEventsInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutEventsInput, ChurchUncheckedUpdateWithoutEventsInput>
  }

  export type ChurchUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutMariagesInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutMariagesInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutMariagesInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutMariagesInput, ChurchUncheckedCreateWithoutMariagesInput>
  }

  export type ChurchUpsertWithoutMariagesInput = {
    update: XOR<ChurchUpdateWithoutMariagesInput, ChurchUncheckedUpdateWithoutMariagesInput>
    create: XOR<ChurchCreateWithoutMariagesInput, ChurchUncheckedCreateWithoutMariagesInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutMariagesInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutMariagesInput, ChurchUncheckedUpdateWithoutMariagesInput>
  }

  export type ChurchUpdateWithoutMariagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutMariagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutFuneralsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutFuneralsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutFuneralsInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutFuneralsInput, ChurchUncheckedCreateWithoutFuneralsInput>
  }

  export type ChurchUpsertWithoutFuneralsInput = {
    update: XOR<ChurchUpdateWithoutFuneralsInput, ChurchUncheckedUpdateWithoutFuneralsInput>
    create: XOR<ChurchCreateWithoutFuneralsInput, ChurchUncheckedCreateWithoutFuneralsInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutFuneralsInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutFuneralsInput, ChurchUncheckedUpdateWithoutFuneralsInput>
  }

  export type ChurchUpdateWithoutFuneralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutFuneralsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutPresentationsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutPresentationsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutPresentationsInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutPresentationsInput, ChurchUncheckedCreateWithoutPresentationsInput>
  }

  export type ChurchUpsertWithoutPresentationsInput = {
    update: XOR<ChurchUpdateWithoutPresentationsInput, ChurchUncheckedUpdateWithoutPresentationsInput>
    create: XOR<ChurchCreateWithoutPresentationsInput, ChurchUncheckedCreateWithoutPresentationsInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutPresentationsInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutPresentationsInput, ChurchUncheckedUpdateWithoutPresentationsInput>
  }

  export type ChurchUpdateWithoutPresentationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutPresentationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutBatismInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutBatismInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutBatismInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutBatismInput, ChurchUncheckedCreateWithoutBatismInput>
  }

  export type ChurchUpsertWithoutBatismInput = {
    update: XOR<ChurchUpdateWithoutBatismInput, ChurchUncheckedUpdateWithoutBatismInput>
    create: XOR<ChurchCreateWithoutBatismInput, ChurchUncheckedCreateWithoutBatismInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutBatismInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutBatismInput, ChurchUncheckedUpdateWithoutBatismInput>
  }

  export type ChurchUpdateWithoutBatismInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutBatismInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutDeathInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutDeathInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutDeathInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutDeathInput, ChurchUncheckedCreateWithoutDeathInput>
  }

  export type ChurchUpsertWithoutDeathInput = {
    update: XOR<ChurchUpdateWithoutDeathInput, ChurchUncheckedUpdateWithoutDeathInput>
    create: XOR<ChurchCreateWithoutDeathInput, ChurchUncheckedCreateWithoutDeathInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutDeathInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutDeathInput, ChurchUncheckedUpdateWithoutDeathInput>
  }

  export type ChurchUpdateWithoutDeathInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutDeathInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutSundayClassInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutSundayClassInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutSundayClassInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutSundayClassInput, ChurchUncheckedCreateWithoutSundayClassInput>
  }

  export type ChurchUpsertWithoutSundayClassInput = {
    update: XOR<ChurchUpdateWithoutSundayClassInput, ChurchUncheckedUpdateWithoutSundayClassInput>
    create: XOR<ChurchCreateWithoutSundayClassInput, ChurchUncheckedCreateWithoutSundayClassInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutSundayClassInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutSundayClassInput, ChurchUncheckedUpdateWithoutSundayClassInput>
  }

  export type ChurchUpdateWithoutSundayClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutSundayClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutExpenseInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutExpenseInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutExpenseInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutExpenseInput, ChurchUncheckedCreateWithoutExpenseInput>
  }

  export type ChurchUpsertWithoutExpenseInput = {
    update: XOR<ChurchUpdateWithoutExpenseInput, ChurchUncheckedUpdateWithoutExpenseInput>
    create: XOR<ChurchCreateWithoutExpenseInput, ChurchUncheckedCreateWithoutExpenseInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutExpenseInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutExpenseInput, ChurchUncheckedUpdateWithoutExpenseInput>
  }

  export type ChurchUpdateWithoutExpenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutExpenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutOfferingInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutOfferingInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutOfferingInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutOfferingInput, ChurchUncheckedCreateWithoutOfferingInput>
  }

  export type ChurchUpsertWithoutOfferingInput = {
    update: XOR<ChurchUpdateWithoutOfferingInput, ChurchUncheckedUpdateWithoutOfferingInput>
    create: XOR<ChurchCreateWithoutOfferingInput, ChurchUncheckedCreateWithoutOfferingInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutOfferingInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutOfferingInput, ChurchUncheckedUpdateWithoutOfferingInput>
  }

  export type ChurchUpdateWithoutOfferingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutOfferingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutTithingInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutTithingInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutTithingInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutTithingInput, ChurchUncheckedCreateWithoutTithingInput>
  }

  export type ChurchUpsertWithoutTithingInput = {
    update: XOR<ChurchUpdateWithoutTithingInput, ChurchUncheckedUpdateWithoutTithingInput>
    create: XOR<ChurchCreateWithoutTithingInput, ChurchUncheckedCreateWithoutTithingInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutTithingInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutTithingInput, ChurchUncheckedUpdateWithoutTithingInput>
  }

  export type ChurchUpdateWithoutTithingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutTithingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutDonationInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutDonationInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutDonationInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutDonationInput, ChurchUncheckedCreateWithoutDonationInput>
  }

  export type ChurchUpsertWithoutDonationInput = {
    update: XOR<ChurchUpdateWithoutDonationInput, ChurchUncheckedUpdateWithoutDonationInput>
    create: XOR<ChurchCreateWithoutDonationInput, ChurchUncheckedCreateWithoutDonationInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutDonationInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutDonationInput, ChurchUncheckedUpdateWithoutDonationInput>
  }

  export type ChurchUpdateWithoutDonationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutDonationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutMoissonInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutMoissonInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutMoissonInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutMoissonInput, ChurchUncheckedCreateWithoutMoissonInput>
  }

  export type ChurchUpsertWithoutMoissonInput = {
    update: XOR<ChurchUpdateWithoutMoissonInput, ChurchUncheckedUpdateWithoutMoissonInput>
    create: XOR<ChurchCreateWithoutMoissonInput, ChurchUncheckedCreateWithoutMoissonInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutMoissonInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutMoissonInput, ChurchUncheckedUpdateWithoutMoissonInput>
  }

  export type ChurchUpdateWithoutMoissonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutMoissonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutComiteesInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutComiteesInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutComiteesInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutComiteesInput, ChurchUncheckedCreateWithoutComiteesInput>
  }

  export type UserCreateWithoutLeadingComitteesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutLeadingComitteesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutLeadingComitteesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLeadingComitteesInput, UserUncheckedCreateWithoutLeadingComitteesInput>
  }

  export type UserCreateWithoutMemberComitteesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutMemberComitteesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutMemberComitteesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemberComitteesInput, UserUncheckedCreateWithoutMemberComitteesInput>
  }

  export type ChurchUpsertWithoutComiteesInput = {
    update: XOR<ChurchUpdateWithoutComiteesInput, ChurchUncheckedUpdateWithoutComiteesInput>
    create: XOR<ChurchCreateWithoutComiteesInput, ChurchUncheckedCreateWithoutComiteesInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutComiteesInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutComiteesInput, ChurchUncheckedUpdateWithoutComiteesInput>
  }

  export type ChurchUpdateWithoutComiteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutComiteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutLeadingComitteesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLeadingComitteesInput, UserUncheckedUpdateWithoutLeadingComitteesInput>
    create: XOR<UserCreateWithoutLeadingComitteesInput, UserUncheckedCreateWithoutLeadingComitteesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLeadingComitteesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLeadingComitteesInput, UserUncheckedUpdateWithoutLeadingComitteesInput>
  }

  export type UserUpdateManyWithWhereWithoutLeadingComitteesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLeadingComitteesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutMemberComitteesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutMemberComitteesInput, UserUncheckedUpdateWithoutMemberComitteesInput>
    create: XOR<UserCreateWithoutMemberComitteesInput, UserUncheckedCreateWithoutMemberComitteesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutMemberComitteesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutMemberComitteesInput, UserUncheckedUpdateWithoutMemberComitteesInput>
  }

  export type UserUpdateManyWithWhereWithoutMemberComitteesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMemberComitteesInput>
  }

  export type ChurchCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutAppointmentsInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutAppointmentsInput, ChurchUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutUserAppointmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    transfers?: transfertCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutUserAppointmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    transfers?: transfertUncheckedCreateNestedManyWithoutMemberInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutUserAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAppointmentsInput, UserUncheckedCreateWithoutUserAppointmentsInput>
  }

  export type ChurchUpsertWithoutAppointmentsInput = {
    update: XOR<ChurchUpdateWithoutAppointmentsInput, ChurchUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<ChurchCreateWithoutAppointmentsInput, ChurchUncheckedCreateWithoutAppointmentsInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutAppointmentsInput, ChurchUncheckedUpdateWithoutAppointmentsInput>
  }

  export type ChurchUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutUserAppointmentsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUserAppointmentsInput, UserUncheckedUpdateWithoutUserAppointmentsInput>
    create: XOR<UserCreateWithoutUserAppointmentsInput, UserUncheckedCreateWithoutUserAppointmentsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUserAppointmentsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUserAppointmentsInput, UserUncheckedUpdateWithoutUserAppointmentsInput>
  }

  export type UserUpdateManyWithWhereWithoutUserAppointmentsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserAppointmentsInput>
  }

  export type ChurchCreateWithoutTransfersFromInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutTransfersFromInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutTransfersFromInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutTransfersFromInput, ChurchUncheckedCreateWithoutTransfersFromInput>
  }

  export type ChurchCreateWithoutTransfersToInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
  }

  export type ChurchUncheckedCreateWithoutTransfersToInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
  }

  export type ChurchCreateOrConnectWithoutTransfersToInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutTransfersToInput, ChurchUncheckedCreateWithoutTransfersToInput>
  }

  export type UserCreateWithoutTransfersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    presences?: PresenceCreateNestedManyWithoutUserInput
    church?: ChurchCreateNestedOneWithoutUsersInput
    timothee?: UserCreateNestedOneWithoutTithesInput
    tithes?: UserCreateNestedManyWithoutTimotheeInput
    leadingComittees?: comiteeCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserUncheckedCreateWithoutTransfersInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
    presences?: PresenceUncheckedCreateNestedManyWithoutUserInput
    tithes?: UserUncheckedCreateNestedManyWithoutTimotheeInput
    leadingComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeLeaderInput
    memberComittees?: comiteeUncheckedCreateNestedManyWithoutCommiteeMemberInput
    groups?: GroupeUncheckedCreateNestedManyWithoutUsersInput
    userAppointments?: appointmentUncheckedCreateNestedManyWithoutAssignedUsersInput
  }

  export type UserCreateOrConnectWithoutTransfersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransfersInput, UserUncheckedCreateWithoutTransfersInput>
  }

  export type ChurchUpsertWithoutTransfersFromInput = {
    update: XOR<ChurchUpdateWithoutTransfersFromInput, ChurchUncheckedUpdateWithoutTransfersFromInput>
    create: XOR<ChurchCreateWithoutTransfersFromInput, ChurchUncheckedCreateWithoutTransfersFromInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutTransfersFromInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutTransfersFromInput, ChurchUncheckedUpdateWithoutTransfersFromInput>
  }

  export type ChurchUpdateWithoutTransfersFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutTransfersFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUpsertWithoutTransfersToInput = {
    update: XOR<ChurchUpdateWithoutTransfersToInput, ChurchUncheckedUpdateWithoutTransfersToInput>
    create: XOR<ChurchCreateWithoutTransfersToInput, ChurchUncheckedCreateWithoutTransfersToInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutTransfersToInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutTransfersToInput, ChurchUncheckedUpdateWithoutTransfersToInput>
  }

  export type ChurchUpdateWithoutTransfersToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutTransfersToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
  }

  export type UserUpsertWithoutTransfersInput = {
    update: XOR<UserUpdateWithoutTransfersInput, UserUncheckedUpdateWithoutTransfersInput>
    create: XOR<UserCreateWithoutTransfersInput, UserUncheckedCreateWithoutTransfersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransfersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransfersInput, UserUncheckedUpdateWithoutTransfersInput>
  }

  export type UserUpdateWithoutTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type ChurchCreateWithoutMissionInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutMissionInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutMissionInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutMissionInput, ChurchUncheckedCreateWithoutMissionInput>
  }

  export type ChurchCreateManyMissionInputEnvelope = {
    data: ChurchCreateManyMissionInput | ChurchCreateManyMissionInput[]
    skipDuplicates?: boolean
  }

  export type ChurchUpsertWithWhereUniqueWithoutMissionInput = {
    where: ChurchWhereUniqueInput
    update: XOR<ChurchUpdateWithoutMissionInput, ChurchUncheckedUpdateWithoutMissionInput>
    create: XOR<ChurchCreateWithoutMissionInput, ChurchUncheckedCreateWithoutMissionInput>
  }

  export type ChurchUpdateWithWhereUniqueWithoutMissionInput = {
    where: ChurchWhereUniqueInput
    data: XOR<ChurchUpdateWithoutMissionInput, ChurchUncheckedUpdateWithoutMissionInput>
  }

  export type ChurchUpdateManyWithWhereWithoutMissionInput = {
    where: ChurchScalarWhereInput
    data: XOR<ChurchUpdateManyMutationInput, ChurchUncheckedUpdateManyWithoutMissionInput>
  }

  export type ChurchCreateWithoutSanctionInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutSanctionInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutSanctionInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutSanctionInput, ChurchUncheckedCreateWithoutSanctionInput>
  }

  export type ChurchUpsertWithoutSanctionInput = {
    update: XOR<ChurchUpdateWithoutSanctionInput, ChurchUncheckedUpdateWithoutSanctionInput>
    create: XOR<ChurchCreateWithoutSanctionInput, ChurchUncheckedCreateWithoutSanctionInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutSanctionInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutSanctionInput, ChurchUncheckedUpdateWithoutSanctionInput>
  }

  export type ChurchUpdateWithoutSanctionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutSanctionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutMinistryInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    pasteur?: pasteurCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutMinistryInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    pasteur?: pasteurUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutMinistryInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutMinistryInput, ChurchUncheckedCreateWithoutMinistryInput>
  }

  export type ChurchUpsertWithoutMinistryInput = {
    update: XOR<ChurchUpdateWithoutMinistryInput, ChurchUncheckedUpdateWithoutMinistryInput>
    create: XOR<ChurchCreateWithoutMinistryInput, ChurchUncheckedCreateWithoutMinistryInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutMinistryInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutMinistryInput, ChurchUncheckedUpdateWithoutMinistryInput>
  }

  export type ChurchUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchCreateWithoutPasteurInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    batism?: BaptismCreateNestedManyWithoutChurchInput
    fullAddress?: AddressCreateNestedOneWithoutChurchInput
    mission?: MissionCreateNestedOneWithoutChurchInput
    tti?: TtiCreateNestedOneWithoutChurchInput
    events?: EventCreateNestedManyWithoutChurchInput
    funerals?: FuneralCreateNestedManyWithoutChurchInput
    groups?: GroupeCreateNestedManyWithoutChurchInput
    mariages?: MariageCreateNestedManyWithoutChurchInput
    presentations?: PresentationCreateNestedManyWithoutChurchInput
    services?: ServiceCreateNestedManyWithoutChurchInput
    users?: UserCreateNestedManyWithoutChurchInput
    appointments?: appointmentCreateNestedManyWithoutChurchInput
    comitees?: comiteeCreateNestedManyWithoutChurchInput
    death?: deathCreateNestedManyWithoutChurchInput
    donation?: donationCreateNestedManyWithoutChurchInput
    expense?: expenseCreateNestedManyWithoutChurchInput
    ministry?: ministryCreateNestedManyWithoutChurchInput
    moisson?: moissonCreateNestedManyWithoutChurchInput
    offering?: offeringCreateNestedManyWithoutChurchInput
    sanction?: sanctionCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassCreateNestedManyWithoutChurchInput
    tithing?: tithingCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertCreateNestedManyWithoutToChurchInput
  }

  export type ChurchUncheckedCreateWithoutPasteurInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
    batism?: BaptismUncheckedCreateNestedManyWithoutChurchInput
    events?: EventUncheckedCreateNestedManyWithoutChurchInput
    funerals?: FuneralUncheckedCreateNestedManyWithoutChurchInput
    groups?: GroupeUncheckedCreateNestedManyWithoutChurchInput
    mariages?: MariageUncheckedCreateNestedManyWithoutChurchInput
    presentations?: PresentationUncheckedCreateNestedManyWithoutChurchInput
    services?: ServiceUncheckedCreateNestedManyWithoutChurchInput
    users?: UserUncheckedCreateNestedManyWithoutChurchInput
    appointments?: appointmentUncheckedCreateNestedManyWithoutChurchInput
    comitees?: comiteeUncheckedCreateNestedManyWithoutChurchInput
    death?: deathUncheckedCreateNestedManyWithoutChurchInput
    donation?: donationUncheckedCreateNestedManyWithoutChurchInput
    expense?: expenseUncheckedCreateNestedManyWithoutChurchInput
    ministry?: ministryUncheckedCreateNestedManyWithoutChurchInput
    moisson?: moissonUncheckedCreateNestedManyWithoutChurchInput
    offering?: offeringUncheckedCreateNestedManyWithoutChurchInput
    sanction?: sanctionUncheckedCreateNestedManyWithoutChurchInput
    sundayClass?: sundayClassUncheckedCreateNestedManyWithoutChurchInput
    tithing?: tithingUncheckedCreateNestedManyWithoutChurchInput
    transfersFrom?: transfertUncheckedCreateNestedManyWithoutFromChurchInput
    transfersTo?: transfertUncheckedCreateNestedManyWithoutToChurchInput
  }

  export type ChurchCreateOrConnectWithoutPasteurInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutPasteurInput, ChurchUncheckedCreateWithoutPasteurInput>
  }

  export type ChurchUpsertWithoutPasteurInput = {
    update: XOR<ChurchUpdateWithoutPasteurInput, ChurchUncheckedUpdateWithoutPasteurInput>
    create: XOR<ChurchCreateWithoutPasteurInput, ChurchUncheckedCreateWithoutPasteurInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutPasteurInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutPasteurInput, ChurchUncheckedUpdateWithoutPasteurInput>
  }

  export type ChurchUpdateWithoutPasteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutPasteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type CommuneCreateWithoutDepartementInput = {
    id?: string
    name: string
    sectionCommunale?: SectionCommunaleCreateNestedManyWithoutCommuneInput
  }

  export type CommuneUncheckedCreateWithoutDepartementInput = {
    id?: string
    name: string
    sectionCommunale?: SectionCommunaleUncheckedCreateNestedManyWithoutCommuneInput
  }

  export type CommuneCreateOrConnectWithoutDepartementInput = {
    where: CommuneWhereUniqueInput
    create: XOR<CommuneCreateWithoutDepartementInput, CommuneUncheckedCreateWithoutDepartementInput>
  }

  export type CommuneCreateManyDepartementInputEnvelope = {
    data: CommuneCreateManyDepartementInput | CommuneCreateManyDepartementInput[]
    skipDuplicates?: boolean
  }

  export type CommuneUpsertWithWhereUniqueWithoutDepartementInput = {
    where: CommuneWhereUniqueInput
    update: XOR<CommuneUpdateWithoutDepartementInput, CommuneUncheckedUpdateWithoutDepartementInput>
    create: XOR<CommuneCreateWithoutDepartementInput, CommuneUncheckedCreateWithoutDepartementInput>
  }

  export type CommuneUpdateWithWhereUniqueWithoutDepartementInput = {
    where: CommuneWhereUniqueInput
    data: XOR<CommuneUpdateWithoutDepartementInput, CommuneUncheckedUpdateWithoutDepartementInput>
  }

  export type CommuneUpdateManyWithWhereWithoutDepartementInput = {
    where: CommuneScalarWhereInput
    data: XOR<CommuneUpdateManyMutationInput, CommuneUncheckedUpdateManyWithoutDepartementInput>
  }

  export type CommuneScalarWhereInput = {
    AND?: CommuneScalarWhereInput | CommuneScalarWhereInput[]
    OR?: CommuneScalarWhereInput[]
    NOT?: CommuneScalarWhereInput | CommuneScalarWhereInput[]
    id?: StringFilter<"Commune"> | string
    name?: StringFilter<"Commune"> | string
    departementId?: StringFilter<"Commune"> | string
  }

  export type DepartementCreateWithoutCommuneInput = {
    id?: string
    name: string
  }

  export type DepartementUncheckedCreateWithoutCommuneInput = {
    id?: string
    name: string
  }

  export type DepartementCreateOrConnectWithoutCommuneInput = {
    where: DepartementWhereUniqueInput
    create: XOR<DepartementCreateWithoutCommuneInput, DepartementUncheckedCreateWithoutCommuneInput>
  }

  export type SectionCommunaleCreateWithoutCommuneInput = {
    id?: string
    name: string
  }

  export type SectionCommunaleUncheckedCreateWithoutCommuneInput = {
    id?: string
    name: string
  }

  export type SectionCommunaleCreateOrConnectWithoutCommuneInput = {
    where: SectionCommunaleWhereUniqueInput
    create: XOR<SectionCommunaleCreateWithoutCommuneInput, SectionCommunaleUncheckedCreateWithoutCommuneInput>
  }

  export type SectionCommunaleCreateManyCommuneInputEnvelope = {
    data: SectionCommunaleCreateManyCommuneInput | SectionCommunaleCreateManyCommuneInput[]
    skipDuplicates?: boolean
  }

  export type DepartementUpsertWithoutCommuneInput = {
    update: XOR<DepartementUpdateWithoutCommuneInput, DepartementUncheckedUpdateWithoutCommuneInput>
    create: XOR<DepartementCreateWithoutCommuneInput, DepartementUncheckedCreateWithoutCommuneInput>
    where?: DepartementWhereInput
  }

  export type DepartementUpdateToOneWithWhereWithoutCommuneInput = {
    where?: DepartementWhereInput
    data: XOR<DepartementUpdateWithoutCommuneInput, DepartementUncheckedUpdateWithoutCommuneInput>
  }

  export type DepartementUpdateWithoutCommuneInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartementUncheckedUpdateWithoutCommuneInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCommunaleUpsertWithWhereUniqueWithoutCommuneInput = {
    where: SectionCommunaleWhereUniqueInput
    update: XOR<SectionCommunaleUpdateWithoutCommuneInput, SectionCommunaleUncheckedUpdateWithoutCommuneInput>
    create: XOR<SectionCommunaleCreateWithoutCommuneInput, SectionCommunaleUncheckedCreateWithoutCommuneInput>
  }

  export type SectionCommunaleUpdateWithWhereUniqueWithoutCommuneInput = {
    where: SectionCommunaleWhereUniqueInput
    data: XOR<SectionCommunaleUpdateWithoutCommuneInput, SectionCommunaleUncheckedUpdateWithoutCommuneInput>
  }

  export type SectionCommunaleUpdateManyWithWhereWithoutCommuneInput = {
    where: SectionCommunaleScalarWhereInput
    data: XOR<SectionCommunaleUpdateManyMutationInput, SectionCommunaleUncheckedUpdateManyWithoutCommuneInput>
  }

  export type SectionCommunaleScalarWhereInput = {
    AND?: SectionCommunaleScalarWhereInput | SectionCommunaleScalarWhereInput[]
    OR?: SectionCommunaleScalarWhereInput[]
    NOT?: SectionCommunaleScalarWhereInput | SectionCommunaleScalarWhereInput[]
    id?: StringFilter<"SectionCommunale"> | string
    name?: StringFilter<"SectionCommunale"> | string
    communeId?: StringFilter<"SectionCommunale"> | string
  }

  export type CommuneCreateWithoutSectionCommunaleInput = {
    id?: string
    name: string
    departement: DepartementCreateNestedOneWithoutCommuneInput
  }

  export type CommuneUncheckedCreateWithoutSectionCommunaleInput = {
    id?: string
    name: string
    departementId: string
  }

  export type CommuneCreateOrConnectWithoutSectionCommunaleInput = {
    where: CommuneWhereUniqueInput
    create: XOR<CommuneCreateWithoutSectionCommunaleInput, CommuneUncheckedCreateWithoutSectionCommunaleInput>
  }

  export type CommuneUpsertWithoutSectionCommunaleInput = {
    update: XOR<CommuneUpdateWithoutSectionCommunaleInput, CommuneUncheckedUpdateWithoutSectionCommunaleInput>
    create: XOR<CommuneCreateWithoutSectionCommunaleInput, CommuneUncheckedCreateWithoutSectionCommunaleInput>
    where?: CommuneWhereInput
  }

  export type CommuneUpdateToOneWithWhereWithoutSectionCommunaleInput = {
    where?: CommuneWhereInput
    data: XOR<CommuneUpdateWithoutSectionCommunaleInput, CommuneUncheckedUpdateWithoutSectionCommunaleInput>
  }

  export type CommuneUpdateWithoutSectionCommunaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departement?: DepartementUpdateOneRequiredWithoutCommuneNestedInput
  }

  export type CommuneUncheckedUpdateWithoutSectionCommunaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    departementId?: StringFieldUpdateOperationsInput | string
  }

  export type PresenceCreateManyServiceInput = {
    id?: string
    statut: $Enums.StatutPresence
    utilisateurId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    utilisateurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    utilisateurId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchCreateManyTtiInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    missionId?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    addressId?: string | null
  }

  export type ChurchUpdateWithoutTtiInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    mission?: MissionUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutTtiInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateManyWithoutTtiInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    missionId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BaptismCreateManyChurchInput = {
    id?: string
    fullName: string
    birthDate: Date | string
    placeOfBirth: string
    baptismDate: Date | string
    baptismCertificate?: string | null
    officiantName: string
    withness: string
    previousChurch: string
    testimony: string
    conversionDate: Date | string
    status?: string | null
    baptismLocation: string
    endDate?: string | null
    startDate?: string | null
  }

  export type EventCreateManyChurchInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    frequency: string
    startDate: string
    endDate: string
    createAt?: Date | string
    updateAt?: Date | string
    isRecurring?: boolean
    endPeriode?: string | null
    startPeriode?: string | null
  }

  export type FuneralCreateManyChurchInput = {
    id?: string
    fullname: string
    birthDate: Date | string
    funeralDate: Date | string
    funeralTime: string
    relationShip: string
    email: string
    deathCertificate?: string | null
    nextOfKin: string
    officiantName: string
    description: string
    funeralLocation: string
    createdAt?: Date | string
    status?: string
    updatedAt?: Date | string
    telephone?: string | null
  }

  export type GroupeCreateManyChurchInput = {
    id?: string
    name: string
    description?: string | null
    picture?: string | null
    showToMembers?: boolean | null
    showToNonMembers?: boolean | null
    showMembers?: boolean | null
    showLeaders?: boolean | null
    meetingDays?: string | null
    meetingTime?: string | null
    meetingLocation?: string | null
    meetingFrequency?: string | null
    maxMembers?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ageGroup?: string | null
    minister?: string | null
  }

  export type MariageCreateManyChurchInput = {
    id?: string
    brideFullname: string
    birthDate: Date | string
    groomFullname: string
    goomBirthDate: Date | string
    weddingDate: Date | string
    weddingLocation: string
    weddingCertificate?: string | null
    officiantName: string
    brideCertificate?: string | null
    civilStateOfficer?: string | null
    grooomCertificate?: string | null
    witness?: string | null
    civilStateStateOfficer?: string | null
    witnessSignature?: string | null
  }

  export type PresentationCreateManyChurchInput = {
    id?: string
    placeOfBirth: string
    birthCertificate?: string | null
    fatherName: string
    motherName: string
    phone: string
    address: string
    presentationDate: Date | string
    officiantName: string
    description?: string | null
    childName: string
    dateOfBirth: Date | string
    witness: string
  }

  export type ServiceCreateManyChurchInput = {
    id?: string
    nom: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
    timotheeId?: string | null
  }

  export type appointmentCreateManyChurchInput = {
    id?: string
    name: string
    visibility?: string | null
    description: string
    date: Date | string
    time: string
    duration: string
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type comiteeCreateManyChurchInput = {
    id?: string
    description: string
    meetingDay: string
    meetingTime: string
    name: string
  }

  export type deathCreateManyChurchInput = {
    id?: string
    deathDate: Date | string
    deathPlace: string
    deathCause: string
    deathCertificate?: string | null
    deathTime: string
    description?: string | null
    location: string
    officiantName: string
    relationShip: string
    serviceDate: Date | string
    nextOfKin: string
  }

  export type donationCreateManyChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type expenseCreateManyChurchInput = {
    id?: string
    amount: number
    category: string
    date: Date | string
    paymentMethod: string
    description: string
  }

  export type ministryCreateManyChurchInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type moissonCreateManyChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type offeringCreateManyChurchInput = {
    id?: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
    status?: string | null
  }

  export type pasteurCreateManyChurchInput = {
    id?: string
    pasteurName: string
    address: string
    phone: string
    status: string
    email: string
  }

  export type sanctionCreateManyChurchInput = {
    id?: string
    name: string
    description: string
    startDate: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    endDate?: string | null
  }

  export type sundayClassCreateManyChurchInput = {
    id?: string
    nom: string
    teacher: string
    startTime: string
    endTime: string
    description: string
    createdAt?: Date | string
    maxStudents: string
    ageGroup: string
    book?: string | null
  }

  export type tithingCreateManyChurchInput = {
    id?: string
    contributorName: string
    amount: number
    date: Date | string
    paymentMethod: string
    note: string
  }

  export type transfertCreateManyFromChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    toChurchId: string
    userId: string
  }

  export type transfertCreateManyToChurchInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurchId: string
    userId: string
  }

  export type BaptismUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    baptismDate?: DateTimeFieldUpdateOperationsInput | Date | string
    baptismCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    withness?: StringFieldUpdateOperationsInput | string
    previousChurch?: StringFieldUpdateOperationsInput | string
    testimony?: StringFieldUpdateOperationsInput | string
    conversionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: StringFieldUpdateOperationsInput | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BaptismUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    baptismDate?: DateTimeFieldUpdateOperationsInput | Date | string
    baptismCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    withness?: StringFieldUpdateOperationsInput | string
    previousChurch?: StringFieldUpdateOperationsInput | string
    testimony?: StringFieldUpdateOperationsInput | string
    conversionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: StringFieldUpdateOperationsInput | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BaptismUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    baptismDate?: DateTimeFieldUpdateOperationsInput | Date | string
    baptismCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    withness?: StringFieldUpdateOperationsInput | string
    previousChurch?: StringFieldUpdateOperationsInput | string
    testimony?: StringFieldUpdateOperationsInput | string
    conversionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: StringFieldUpdateOperationsInput | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    endPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    startPeriode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    endPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    startPeriode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    endPeriode?: NullableStringFieldUpdateOperationsInput | string | null
    startPeriode?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuneralUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralTime?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    nextOfKin?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    funeralLocation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuneralUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralTime?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    nextOfKin?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    funeralLocation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuneralUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralDate?: DateTimeFieldUpdateOperationsInput | Date | string
    funeralTime?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    nextOfKin?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    funeralLocation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupeUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutGroupsNestedInput
  }

  export type GroupeUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupeUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MariageUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    brideFullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    groomFullname?: StringFieldUpdateOperationsInput | string
    goomBirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingLocation?: StringFieldUpdateOperationsInput | string
    weddingCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    brideCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    grooomCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    witness?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    witnessSignature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MariageUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    brideFullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    groomFullname?: StringFieldUpdateOperationsInput | string
    goomBirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingLocation?: StringFieldUpdateOperationsInput | string
    weddingCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    brideCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    grooomCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    witness?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    witnessSignature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MariageUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    brideFullname?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    groomFullname?: StringFieldUpdateOperationsInput | string
    goomBirthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    weddingLocation?: StringFieldUpdateOperationsInput | string
    weddingCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    officiantName?: StringFieldUpdateOperationsInput | string
    brideCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    grooomCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    witness?: NullableStringFieldUpdateOperationsInput | string | null
    civilStateStateOfficer?: NullableStringFieldUpdateOperationsInput | string | null
    witnessSignature?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PresentationUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    birthCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    fatherName?: StringFieldUpdateOperationsInput | string
    motherName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    presentationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    childName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    witness?: StringFieldUpdateOperationsInput | string
  }

  export type PresentationUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    birthCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    fatherName?: StringFieldUpdateOperationsInput | string
    motherName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    presentationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    childName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    witness?: StringFieldUpdateOperationsInput | string
  }

  export type PresentationUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    placeOfBirth?: StringFieldUpdateOperationsInput | string
    birthCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    fatherName?: StringFieldUpdateOperationsInput | string
    motherName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    presentationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    officiantName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    childName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    witness?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presences?: PresenceUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presences?: PresenceUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUpdateManyWithoutUserAppointmentsNestedInput
  }

  export type appointmentUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutUserAppointmentsNestedInput
  }

  export type appointmentUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type comiteeUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commiteeLeader?: UserUpdateManyWithoutLeadingComitteesNestedInput
    commiteeMember?: UserUpdateManyWithoutMemberComitteesNestedInput
  }

  export type comiteeUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commiteeLeader?: UserUncheckedUpdateManyWithoutLeadingComitteesNestedInput
    commiteeMember?: UserUncheckedUpdateManyWithoutMemberComitteesNestedInput
  }

  export type comiteeUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type deathUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    deathDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deathPlace?: StringFieldUpdateOperationsInput | string
    deathCause?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    deathTime?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    serviceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    nextOfKin?: StringFieldUpdateOperationsInput | string
  }

  export type deathUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    deathDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deathPlace?: StringFieldUpdateOperationsInput | string
    deathCause?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    deathTime?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    serviceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    nextOfKin?: StringFieldUpdateOperationsInput | string
  }

  export type deathUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    deathDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deathPlace?: StringFieldUpdateOperationsInput | string
    deathCause?: StringFieldUpdateOperationsInput | string
    deathCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    deathTime?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    officiantName?: StringFieldUpdateOperationsInput | string
    relationShip?: StringFieldUpdateOperationsInput | string
    serviceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    nextOfKin?: StringFieldUpdateOperationsInput | string
  }

  export type donationUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type donationUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type donationUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type expenseUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type expenseUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type expenseUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ministryUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ministryUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ministryUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type moissonUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type moissonUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type moissonUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type offeringUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offeringUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type offeringUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type pasteurUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    pasteurName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type pasteurUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    pasteurName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type pasteurUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    pasteurName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type sanctionUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sanctionUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sanctionUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startDate?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sundayClassUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    teacher?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maxStudents?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    book?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sundayClassUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    teacher?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maxStudents?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    book?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sundayClassUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    teacher?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maxStudents?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    book?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tithingUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type tithingUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type tithingUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    contributorName?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type transfertUpdateWithoutFromChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toChurch?: ChurchUpdateOneRequiredWithoutTransfersToNestedInput
    member?: UserUpdateOneRequiredWithoutTransfersNestedInput
  }

  export type transfertUncheckedUpdateWithoutFromChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toChurchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type transfertUncheckedUpdateManyWithoutFromChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toChurchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type transfertUpdateWithoutToChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurch?: ChurchUpdateOneRequiredWithoutTransfersFromNestedInput
    member?: UserUpdateOneRequiredWithoutTransfersNestedInput
  }

  export type transfertUncheckedUpdateWithoutToChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type transfertUncheckedUpdateManyWithoutToChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PresenceCreateManyUserInput = {
    id?: string
    statut: $Enums.StatutPresence
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceId: string
  }

  export type UserCreateManyTimotheeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email?: string | null
    baptismDate?: string | null
    baptismLocation?: string | null
    birthCity?: string | null
    birthCountry?: string | null
    birthDate?: string | null
    churchId?: string | null
    churchRole?: string | null
    city?: string | null
    country?: string | null
    envelopeNumber?: string | null
    etatCivil?: string | null
    facebook?: string | null
    firstname: string
    instagram?: string | null
    password?: string | null
    picture?: string | null
    profession?: string | null
    role?: $Enums.Role
    sex?: string | null
    sundayClass?: string | null
    lastname: string
    membreActif?: boolean
    addressLine?: string | null
    homePhone?: string | null
    joinDate?: string | null
    mobilePhone?: string | null
    age?: string | null
    minister?: string | null
    plainPassword?: string | null
    personToContact?: string | null
    spouseFullName?: string | null
    latitude?: string | null
    longitude?: string | null
    nif?: string | null
    groupeSanguin?: string | null
    istimothee?: boolean | null
  }

  export type transfertCreateManyMemberInput = {
    id?: string
    createdAt?: Date | string
    updatedAt: Date | string
    fromChurchId: string
    toChurchId: string
  }

  export type PresenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type PresenceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    statut?: EnumStatutPresenceFieldUpdateOperationsInput | $Enums.StatutPresence
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutTimotheeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTimotheeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTimotheeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type transfertUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurch?: ChurchUpdateOneRequiredWithoutTransfersFromNestedInput
    toChurch?: ChurchUpdateOneRequiredWithoutTransfersToNestedInput
  }

  export type transfertUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurchId?: StringFieldUpdateOperationsInput | string
    toChurchId?: StringFieldUpdateOperationsInput | string
  }

  export type transfertUncheckedUpdateManyWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromChurchId?: StringFieldUpdateOperationsInput | string
    toChurchId?: StringFieldUpdateOperationsInput | string
  }

  export type comiteeUpdateWithoutCommiteeLeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutComiteesNestedInput
    commiteeMember?: UserUpdateManyWithoutMemberComitteesNestedInput
  }

  export type comiteeUncheckedUpdateWithoutCommiteeLeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    commiteeMember?: UserUncheckedUpdateManyWithoutMemberComitteesNestedInput
  }

  export type comiteeUncheckedUpdateManyWithoutCommiteeLeaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type comiteeUpdateWithoutCommiteeMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    church?: ChurchUpdateOneWithoutComiteesNestedInput
    commiteeLeader?: UserUpdateManyWithoutLeadingComitteesNestedInput
  }

  export type comiteeUncheckedUpdateWithoutCommiteeMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    commiteeLeader?: UserUncheckedUpdateManyWithoutLeadingComitteesNestedInput
  }

  export type comiteeUncheckedUpdateManyWithoutCommiteeMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    meetingDay?: StringFieldUpdateOperationsInput | string
    meetingTime?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupeUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    church?: ChurchUpdateOneWithoutGroupsNestedInput
  }

  export type GroupeUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GroupeUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    showToMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showToNonMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showMembers?: NullableBoolFieldUpdateOperationsInput | boolean | null
    showLeaders?: NullableBoolFieldUpdateOperationsInput | boolean | null
    meetingDays?: NullableStringFieldUpdateOperationsInput | string | null
    meetingTime?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLocation?: NullableStringFieldUpdateOperationsInput | string | null
    meetingFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ageGroup?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneWithoutAppointmentsNestedInput
  }

  export type appointmentUncheckedUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type appointmentUncheckedUpdateManyWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    visibility?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutLeadingComitteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutLeadingComitteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutLeadingComitteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutMemberComitteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutMemberComitteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
    userAppointments?: appointmentUncheckedUpdateManyWithoutAssignedUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMemberComitteesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutUserAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    presences?: PresenceUpdateManyWithoutUserNestedInput
    church?: ChurchUpdateOneWithoutUsersNestedInput
    timothee?: UserUpdateOneWithoutTithesNestedInput
    tithes?: UserUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutUserAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
    presences?: PresenceUncheckedUpdateManyWithoutUserNestedInput
    tithes?: UserUncheckedUpdateManyWithoutTimotheeNestedInput
    transfers?: transfertUncheckedUpdateManyWithoutMemberNestedInput
    leadingComittees?: comiteeUncheckedUpdateManyWithoutCommiteeLeaderNestedInput
    memberComittees?: comiteeUncheckedUpdateManyWithoutCommiteeMemberNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUserAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    baptismDate?: NullableStringFieldUpdateOperationsInput | string | null
    baptismLocation?: NullableStringFieldUpdateOperationsInput | string | null
    birthCity?: NullableStringFieldUpdateOperationsInput | string | null
    birthCountry?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: NullableStringFieldUpdateOperationsInput | string | null
    churchRole?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    envelopeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    etatCivil?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    firstname?: StringFieldUpdateOperationsInput | string
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    sundayClass?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: StringFieldUpdateOperationsInput | string
    membreActif?: BoolFieldUpdateOperationsInput | boolean
    addressLine?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    minister?: NullableStringFieldUpdateOperationsInput | string | null
    plainPassword?: NullableStringFieldUpdateOperationsInput | string | null
    personToContact?: NullableStringFieldUpdateOperationsInput | string | null
    spouseFullName?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    groupeSanguin?: NullableStringFieldUpdateOperationsInput | string | null
    istimothee?: NullableBoolFieldUpdateOperationsInput | boolean | null
    timotheeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChurchCreateManyMissionInput = {
    id?: string
    name: string
    quantity?: string
    address?: string | null
    phone?: string | null
    anthem?: string | null
    facebook?: string | null
    instagram?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    picture?: string | null
    email?: string | null
    mainPasteur?: string | null
    whatsapp?: string | null
    latitude?: string | null
    longitude?: string | null
    ttiId?: string | null
    addressId?: string | null
  }

  export type ChurchUpdateWithoutMissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUpdateManyWithoutChurchNestedInput
    fullAddress?: AddressUpdateOneWithoutChurchNestedInput
    tti?: TtiUpdateOneWithoutChurchNestedInput
    events?: EventUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUpdateManyWithoutChurchNestedInput
    groups?: GroupeUpdateManyWithoutChurchNestedInput
    mariages?: MariageUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUpdateManyWithoutChurchNestedInput
    services?: ServiceUpdateManyWithoutChurchNestedInput
    users?: UserUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUpdateManyWithoutChurchNestedInput
    death?: deathUpdateManyWithoutChurchNestedInput
    donation?: donationUpdateManyWithoutChurchNestedInput
    expense?: expenseUpdateManyWithoutChurchNestedInput
    ministry?: ministryUpdateManyWithoutChurchNestedInput
    moisson?: moissonUpdateManyWithoutChurchNestedInput
    offering?: offeringUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUpdateManyWithoutChurchNestedInput
    tithing?: tithingUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutMissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    batism?: BaptismUncheckedUpdateManyWithoutChurchNestedInput
    events?: EventUncheckedUpdateManyWithoutChurchNestedInput
    funerals?: FuneralUncheckedUpdateManyWithoutChurchNestedInput
    groups?: GroupeUncheckedUpdateManyWithoutChurchNestedInput
    mariages?: MariageUncheckedUpdateManyWithoutChurchNestedInput
    presentations?: PresentationUncheckedUpdateManyWithoutChurchNestedInput
    services?: ServiceUncheckedUpdateManyWithoutChurchNestedInput
    users?: UserUncheckedUpdateManyWithoutChurchNestedInput
    appointments?: appointmentUncheckedUpdateManyWithoutChurchNestedInput
    comitees?: comiteeUncheckedUpdateManyWithoutChurchNestedInput
    death?: deathUncheckedUpdateManyWithoutChurchNestedInput
    donation?: donationUncheckedUpdateManyWithoutChurchNestedInput
    expense?: expenseUncheckedUpdateManyWithoutChurchNestedInput
    ministry?: ministryUncheckedUpdateManyWithoutChurchNestedInput
    moisson?: moissonUncheckedUpdateManyWithoutChurchNestedInput
    offering?: offeringUncheckedUpdateManyWithoutChurchNestedInput
    pasteur?: pasteurUncheckedUpdateManyWithoutChurchNestedInput
    sanction?: sanctionUncheckedUpdateManyWithoutChurchNestedInput
    sundayClass?: sundayClassUncheckedUpdateManyWithoutChurchNestedInput
    tithing?: tithingUncheckedUpdateManyWithoutChurchNestedInput
    transfersFrom?: transfertUncheckedUpdateManyWithoutFromChurchNestedInput
    transfersTo?: transfertUncheckedUpdateManyWithoutToChurchNestedInput
  }

  export type ChurchUncheckedUpdateManyWithoutMissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    anthem?: NullableStringFieldUpdateOperationsInput | string | null
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mainPasteur?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    ttiId?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommuneCreateManyDepartementInput = {
    id?: string
    name: string
  }

  export type CommuneUpdateWithoutDepartementInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sectionCommunale?: SectionCommunaleUpdateManyWithoutCommuneNestedInput
  }

  export type CommuneUncheckedUpdateWithoutDepartementInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sectionCommunale?: SectionCommunaleUncheckedUpdateManyWithoutCommuneNestedInput
  }

  export type CommuneUncheckedUpdateManyWithoutDepartementInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCommunaleCreateManyCommuneInput = {
    id?: string
    name: string
  }

  export type SectionCommunaleUpdateWithoutCommuneInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCommunaleUncheckedUpdateWithoutCommuneInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SectionCommunaleUncheckedUpdateManyWithoutCommuneInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}